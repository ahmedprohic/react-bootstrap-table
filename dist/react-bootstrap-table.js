!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],t):"object"==typeof exports?exports.ReactBootstrapTable=t(require("react"),require("react-dom")):e.ReactBootstrapTable=t(e.React,e.ReactDOM)}(this,function(e,t){return function(e){function t(o){if(r[o])return r[o].exports;var n=r[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(16),i=o(n),s=r(24),a=o(s),u=r(8);"undefined"!=typeof window&&(window.BootstrapTable=i["default"],window.TableHeaderColumn=a["default"],window.TableDataSet=u.TableDataSet),t["default"]={BootstrapTable:i["default"],TableHeaderColumn:a["default"],TableDataSet:u.TableDataSet},e.exports=t["default"]},function(t,r){t.exports=e},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]={SORT_DESC:"desc",SORT_ASC:"asc",SIZE_PER_PAGE:10,NEXT_PAGE:">",LAST_PAGE:">>",PRE_PAGE:"<",FIRST_PAGE:"<<",ROW_SELECT_BG_COLOR:"",ROW_SELECT_NONE:"none",ROW_SELECT_SINGLE:"radio",ROW_SELECT_MULTI:"checkbox",CELL_EDIT_NONE:"none",CELL_EDIT_CLICK:"click",CELL_EDIT_DBCLICK:"dbclick",SIZE_PER_PAGE_LIST:[10,25,30,50],PAGINATION_SIZE:5,NO_DATA_TEXT:"There is no data to display",SHOW_ONLY_SELECT:"Show Selected Only",SHOW_ALL:"Show All",FILTER_DELAY:500,FILTER_TYPE:{TEXT:"TextFilter",SELECT:"SelectFilter",NUMBER:"NumberFilter",DATE:"DateFilter",CUSTOM:"CustomFilter"}},e.exports=t["default"]},function(e,t,r){var o,n;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
!function(){"use strict";function r(){for(var e=[],t=0;t<arguments.length;t++){var o=arguments[t];if(o){var n=typeof o;if("string"===n||"number"===n)e.push(o);else if(Array.isArray(o))e.push(r.apply(null,o));else if("object"===n)for(var s in o)i.call(o,s)&&o[s]&&e.push(s)}}return e.join(" ")}var i={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=r:(o=[],n=function(){return r}.apply(t,o),!(void 0!==n&&(e.exports=n)))}()},function(e,r){e.exports=t},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),i=o(n),s=r(2),a=o(s),u=r(3),l=o(u);t["default"]={renderSortCaret:function(e){var t=document.createElement("span");t.className="order",e==a["default"].SORT_ASC&&(t.className+=" dropup");var r=document.createElement("span");return r.className="caret",r.style.margin="10px 5px",t.appendChild(r),t},renderReactSortCaret:function(e){var t=(0,l["default"])("order",{dropup:e==a["default"].SORT_ASC});return i["default"].createElement("span",{className:t},i["default"].createElement("span",{className:"caret",style:{margin:"10px 5px"}}))},getScrollBarWidth:function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var t=document.createElement("div");t.style.position="absolute",t.style.top="0px",t.style.left="0px",t.style.visibility="hidden",t.style.width="200px",t.style.height="150px",t.style.overflow="hidden",t.appendChild(e),document.body.appendChild(t);var r=e.offsetWidth;t.style.overflow="scroll";var o=e.offsetWidth;return r==o&&(o=t.clientWidth),document.body.removeChild(t),r-o}},e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},i=r(1),s=o(i),a=r(9),u=o(a);r(54);var l=r(10),p=o(l),c=function(e,t,r,o,i){if(e===!0||"string"==typeof e){var a=e===!0?"text":e;return s["default"].createElement("input",n({},t,{type:a,defaultValue:i,className:(o||"")+" form-control editor edit-text"}))}if(!e){var a=e===!0?"text":e;return s["default"].createElement("input",n({},t,{type:a,defaultValue:i,disabled:"disabled",className:(o||"")+" form-control editor edit-text"}))}if(e.type){if(e.style&&(t.style=e.style),t.className=(o||"")+" form-control editor edit-"+e.type+(e.className?" "+e.className:""),"select"===e.type){var l=[],c=e.options.values;if(Array.isArray(c)){var d;l=c.map(function(e,t){return d=r?r(e):e,s["default"].createElement("option",{key:"option"+t,value:e},d)})}return s["default"].createElement("select",n({},t,{defaultValue:i}),l)}if("textarea"===e.type){e.cols&&(t.cols=e.cols),e.rows&&(t.rows=e.rows);var f=t.onKeyDown,h=null;return f&&(t.onKeyDown=function(e){13!=e.keyCode&&f(e)},h=s["default"].createElement("butto",{className:"btn btn-info btn-xs textarea-save-btn",onClick:f},"save")),s["default"].createElement("div",null,s["default"].createElement("textarea",n({},t,{defaultValue:i})),h)}if("checkbox"===e.type){var y="true:false";e.options&&e.options.values&&(y=e.options.values),t.className=t.className.replace("form-control",""),t.className+=" checkbox pull-right";var v=!(!i||i.toString()!=y.split(":")[0]);return s["default"].createElement("input",n({},t,{type:"checkbox",value:y,defaultChecked:v}))}if("switch"===e.type){var m="true:false";t.className=t.className.replace("form-control",""),t.className+=" checkbox pull-right";var v=!(!i||i.toString()!=m.split(":")[0]);return s["default"].createElement(u["default"],{className:t.className,defaultChecked:v})}if("react-select"===e.type){var g="undefined"!=typeof e.options.multi?e.options.multi:!1;return s["default"].createElement(p["default"],{className:"pull-right",options:e.options.values,multi:g,simpleValue:!0})}return s["default"].createElement("input",n({},t,{type:a,defaultValue:i}))}return s["default"].createElement("input",n({},t,{type:"text",className:(o||"")+" form-control editor edit-text"}))};t["default"]=c,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(2),c=(o(p),r(45)),d=l["default"].createFactory(c.ToastMessage.animation),f=function(e){function t(){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),s(t,[{key:"notice",value:function(e,t,r){this.refs.toastr[e](t,r,{mode:"single",timeOut:5e3,extendedTimeOut:1e3,showAnimation:"animated  bounceIn",hideAnimation:"animated bounceOut"})}},{key:"render",value:function(){return l["default"].createElement(c.ToastContainer,{ref:"toastr",toastMessageFactory:d,id:"toast-container",className:"toast-top-right"})}}]),t}(l["default"].Component);t["default"]=f,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t,r,o){return r=r.toLowerCase(),e.sort(function(e,n){return o?o(e,n,r,t):r==p["default"].SORT_DESC?e[t]>n[t]?-1:e[t]<n[t]?1:0:e[t]<n[t]?-1:e[t]>n[t]?1:0}),e}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),u=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},l=r(2),p=o(l),c=r(14).EventEmitter,d=function(e){function t(e){n(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.data=e}return i(t,e),a(t,[{key:"setData",value:function(e){this.emit("change",e)}},{key:"clear",value:function(){this.data=null}},{key:"getData",value:function(){return this.data}}]),t}(c);t.TableDataSet=d;var f=function(){function e(t){n(this,e),this.data=t,this.colInfos=null,this.filteredData=null,this.isOnFilter=!1,this.filterObj=null,this.searchText=null,this.sortObj=null,this.pageObj={},this.selected=[],this.multiColumnSearch=!1,this.showOnlySelected=!1,this.remote=!1}return a(e,[{key:"setProps",value:function(e){this.keyField=e.keyField,this.enablePagination=e.isPagination,this.colInfos=e.colInfos,this.remote=e.remote,this.multiColumnSearch=e.multiColumnSearch}},{key:"setData",value:function(e){this.data=e,this.isOnFilter&&(null!==this.filterObj&&this.filter(this.filterObj),null!==this.searchText&&this.search(this.searchText)),this.sortObj&&this.sort(this.sortObj.order,this.sortObj.sortField)}},{key:"getSortInfo",value:function(){return this.sortObj}},{key:"setSelectedRowKey",value:function(e){this.selected=e}},{key:"getSelectedRowKeys",value:function(){return this.selected}},{key:"getCurrentDisplayData",value:function(){return this.isOnFilter?this.filteredData:this.data}},{key:"ignoreNonSelected",value:function(){var e=this;this.showOnlySelected=!this.showOnlySelected,this.showOnlySelected?(this.isOnFilter=!0,this.filteredData=this.data.filter(function(t){var r=e.selected.find(function(r){return t[e.keyField]===r});return"undefined"!=typeof r})):this.isOnFilter=!1}},{key:"sort",value:function(e,t){this.sortObj={order:e,sortField:t};var r=this.getCurrentDisplayData();if(!this.colInfos[t])return this;var o=this.colInfos[t].sortFunc;return r=s(r,t,e,o),this}},{key:"page",value:function(e,t){return this.pageObj.end=e*t-1,this.pageObj.start=this.pageObj.end-(t-1),this}},{key:"edit",value:function(e,t,r){var o=this.getCurrentDisplayData(),n=void 0;return this.enablePagination?(o[this.pageObj.start+t][r]=e,n=o[this.pageObj.start+t][this.keyField]):(o[t][r]=e,n=o[t][this.keyField]),this.isOnFilter&&(this.data.forEach(function(t){t[this.keyField]===n&&(t[r]=e)},this),null!==this.filterObj&&this.filter(this.filterObj),null!==this.searchText&&this.search(this.searchText)),this}},{key:"addAtBegin",value:function(e){if(!e[this.keyField]||""===e[this.keyField].toString())throw this.keyField+" can't be empty value.";var t=this.getCurrentDisplayData();t.forEach(function(t){if(t[this.keyField].toString()===e[this.keyField].toString())throw this.keyField+" "+e[this.keyField]+" already exists"},this),console.log("@@"),t.unshift(e),this.isOnFilter&&this.data.unshift(e)}},{key:"add",value:function(e){if(!e[this.keyField]||""===e[this.keyField].toString())throw this.keyField+" can't be empty value.";var t=this.getCurrentDisplayData();t.forEach(function(t){if(t[this.keyField].toString()===e[this.keyField].toString())throw this.keyField+" "+e[this.keyField]+" already exists"},this),t.push(e),this.isOnFilter&&this.data.push(e)}},{key:"remove",value:function(e){var t=this.getCurrentDisplayData(),r=t.filter(function(t){return-1==e.indexOf(t[this.keyField])},this);this.isOnFilter?(this.data=this.data.filter(function(t){return-1==e.indexOf(t[this.keyField])},this),this.filteredData=r):this.data=r}},{key:"filter",value:function(e){var t=this;0==Object.keys(e).length?(this.filteredData=null,this.isOnFilter=!1,this.filterObj=null):(this.filterObj=e,this.filteredData=this.data.filter(function(r){var o=!0,n=void 0;for(var i in e){var s=r[i];switch(e[i].type){case p["default"].FILTER_TYPE.NUMBER:n=e[i].value.number;break;case p["default"].FILTER_TYPE.CUSTOM:n="object"==typeof e[i].value?void 0:"string"==typeof e[i].value?e[i].value.toLowerCase():e[i].value;break;default:n="string"==typeof e[i].value?e[i].value.toLowerCase():e[i].value,void 0===n&&(n=e[i].toLowerCase())}if(t.colInfos[i]){var a=t.colInfos[i],u=a.format,l=a.filterFormatted,c=a.formatExtraData;l&&u&&(s=u(r[i],r,c))}switch(e[i].type){case p["default"].FILTER_TYPE.NUMBER:o=t.filterNumber(s,n,e[i].value.comparator);break;case p["default"].FILTER_TYPE.DATE:o=t.filterDate(s,n);break;case p["default"].FILTER_TYPE.CUSTOM:o=t.filterCustom(s,n,e[i].value);break;default:o=t.filterText(s,n)}if(!o)break}return o}),this.isOnFilter=!0)}},{key:"filterNumber",value:function(e,t,r){var o=!0;switch(r){case"=":e!=t&&(o=!1);break;case">":t>=e&&(o=!1);break;case">=":t>e&&(o=!1);break;case"<":e>=t&&(o=!1);break;case"<=":e>t&&(o=!1);break;case"!=":e==t&&(o=!1);break;default:console.error("Number comparator provided is not supported")}return o}},{key:"filterDate",value:function(e,t){return e.getDate()==t.getDate()&&e.getMonth()==t.getMonth()&&e.getFullYear()==t.getFullYear()}},{key:"filterCustom",value:function(e,t,r){return null!=r&&"object"==typeof r?r.callback(e,r.callbackParameters):filterText(e,t)}},{key:"filterText",value:function(e,t){return-1!=e.toString().toLowerCase().indexOf(t)}},{key:"search",value:function(e){var t=this;""===e.trim()?(this.filteredData=null,this.isOnFilter=!1,this.searchText=null):!function(){t.searchText=e;var r=[];t.multiColumnSearch?r=e.split(" "):r.push(e),t.filteredData=t.data.filter(function(e){for(var o=Object.keys(e),n=!1,i=0,s=o.length;s>i;i++){var a=o[i];if(t.colInfos[a]&&e[a]){var u=t.colInfos[a],l=u.format,p=u.filterFormatted,c=u.formatExtraData,d=u.searchable,f=(u.hidden,e[a]);if(d){p&&l&&(f=l(f,e,c));for(var h=0,y=r.length;y>h;h++){var v=r[h].toLowerCase();if(-1!==f.toString().toLowerCase().indexOf(v)){n=!0;break}}}}}return n}),t.isOnFilter=!0}()}},{key:"getDataIgnoringPagination",value:function(){var e=this.getCurrentDisplayData();return e}},{key:"get",value:function(){var e=this.getCurrentDisplayData();if(0==e.length)return e;if(this.remote||!this.enablePagination)return e;for(var t=[],r=this.pageObj.start;r<=this.pageObj.end&&(t.push(e[r]),r+1!=e.length);r++);return t}},{key:"getKeyField",value:function(){return this.keyField}},{key:"getDataNum",value:function(){return this.getCurrentDisplayData().length}},{key:"isChangedPage",value:function(){return!(!this.pageObj.start||!this.pageObj.end)}},{key:"getAllRowkey",value:function(){return this.data.map(function(e){return e[this.keyField]},this)}}]),e}();t.TableDataStore=f},function(e,t,r){"use strict";e.exports=r(37)},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e){return"object"==typeof e?JSON.stringify(e):e}Object.defineProperty(t,"__esModule",{value:!0});var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},s=r(1),a=o(s),u=r(4),l=o(u),p=r(41),c=o(p),d=r(3),f=o(d),h=r(11),y=o(h),v=r(38),m=o(v),g=r(39),b=o(g),E=r(40),P=o(E),T=a["default"].PropTypes.oneOfType([a["default"].PropTypes.string,a["default"].PropTypes.node]),w=a["default"].createClass({displayName:"Select",propTypes:{addLabelText:a["default"].PropTypes.string,allowCreate:a["default"].PropTypes.bool,autoBlur:a["default"].PropTypes.bool,autofocus:a["default"].PropTypes.bool,backspaceRemoves:a["default"].PropTypes.bool,className:a["default"].PropTypes.string,clearAllText:T,clearValueText:T,clearable:a["default"].PropTypes.bool,delimiter:a["default"].PropTypes.string,disabled:a["default"].PropTypes.bool,escapeClearsValue:a["default"].PropTypes.bool,filterOption:a["default"].PropTypes.func,filterOptions:a["default"].PropTypes.any,ignoreAccents:a["default"].PropTypes.bool,ignoreCase:a["default"].PropTypes.bool,inputProps:a["default"].PropTypes.object,isLoading:a["default"].PropTypes.bool,labelKey:a["default"].PropTypes.string,matchPos:a["default"].PropTypes.string,matchProp:a["default"].PropTypes.string,menuBuffer:a["default"].PropTypes.number,menuContainerStyle:a["default"].PropTypes.object,menuStyle:a["default"].PropTypes.object,multi:a["default"].PropTypes.bool,name:a["default"].PropTypes.string,newOptionCreator:a["default"].PropTypes.func,noResultsText:T,onBlur:a["default"].PropTypes.func,onBlurResetsInput:a["default"].PropTypes.bool,onChange:a["default"].PropTypes.func,onClose:a["default"].PropTypes.func,onFocus:a["default"].PropTypes.func,onInputChange:a["default"].PropTypes.func,onMenuScrollToBottom:a["default"].PropTypes.func,onOpen:a["default"].PropTypes.func,onValueClick:a["default"].PropTypes.func,optionComponent:a["default"].PropTypes.func,optionRenderer:a["default"].PropTypes.func,options:a["default"].PropTypes.array,placeholder:T,required:a["default"].PropTypes.bool,scrollMenuIntoView:a["default"].PropTypes.bool,searchable:a["default"].PropTypes.bool,simpleValue:a["default"].PropTypes.bool,style:a["default"].PropTypes.object,tabIndex:a["default"].PropTypes.string,value:a["default"].PropTypes.any,valueComponent:a["default"].PropTypes.func,valueKey:a["default"].PropTypes.string,valueRenderer:a["default"].PropTypes.func,wrapperStyle:a["default"].PropTypes.object},statics:{Async:m["default"]},getDefaultProps:function(){return{addLabelText:'Add "{label}"?',allowCreate:!1,backspaceRemoves:!0,clearable:!0,clearAllText:"Clear all",clearValueText:"Clear value",delimiter:",",disabled:!1,escapeClearsValue:!0,filterOptions:!0,ignoreAccents:!0,ignoreCase:!0,inputProps:{},isLoading:!1,labelKey:"label",matchPos:"any",matchProp:"any",menuBuffer:0,multi:!1,noResultsText:"No results found",onBlurResetsInput:!0,optionComponent:b["default"],placeholder:"Select...",required:!1,scrollMenuIntoView:!0,searchable:!0,simpleValue:!1,valueComponent:P["default"],valueKey:"value"}},getInitialState:function(){return{inputValue:"",isFocused:!1,isLoading:!1,isOpen:!1,isPseudoFocused:!1,required:this.props.required&&this.handleRequired(this.props.value,this.props.multi)}},componentDidMount:function(){this.props.autofocus&&this.focus()},componentWillUpdate:function(e,t){if(t.isOpen!==this.state.isOpen){var r=t.isOpen?e.onOpen:e.onClose;r&&r()}},componentDidUpdate:function(e,t){if(this.refs.menu&&this.refs.focused&&this.state.isOpen&&!this.hasScrolledToOption){var r=l["default"].findDOMNode(this.refs.focused),o=l["default"].findDOMNode(this.refs.menu);o.scrollTop=r.offsetTop,this.hasScrolledToOption=!0}else this.state.isOpen||(this.hasScrolledToOption=!1);if(t.inputValue!==this.state.inputValue&&this.props.onInputChange&&this.props.onInputChange(this.state.inputValue),this._scrollToFocusedOptionOnUpdate&&this.refs.focused&&this.refs.menu){this._scrollToFocusedOptionOnUpdate=!1;var n=l["default"].findDOMNode(this.refs.focused),i=l["default"].findDOMNode(this.refs.menu),s=n.getBoundingClientRect(),a=i.getBoundingClientRect();(s.bottom>a.bottom||s.top<a.top)&&(i.scrollTop=n.offsetTop+n.clientHeight-i.offsetHeight)}if(this.props.scrollMenuIntoView&&this.refs.menuContainer){var u=this.refs.menuContainer.getBoundingClientRect();window.innerHeight<u.bottom+this.props.menuBuffer&&window.scrollTo(0,window.scrollY+u.bottom+this.props.menuBuffer-window.innerHeight)}e.disabled!==this.props.disabled&&this.setState({isFocused:!1})},focus:function(){this.refs.input&&this.refs.input.focus()},blurInput:function(){this.refs.input&&this.refs.input.blur()},handleTouchMove:function(e){this.dragging=!0},handleTouchStart:function(e){this.dragging=!1},handleTouchEnd:function(e){this.dragging||this.handleMouseDown(e)},handleTouchEndClearValue:function(e){this.dragging||this.clearValue(e)},handleMouseDown:function(e){return this.props.disabled||"mousedown"===e.type&&0!==e.button?void 0:(e.stopPropagation(),e.preventDefault(),this.props.searchable?void(this.state.isFocused?this.setState({isOpen:!0,isPseudoFocused:!1}):(this._openAfterFocus=!0,this.focus())):(this.focus(),this.setState({isOpen:!this.state.isOpen})))},handleMouseDownOnArrow:function(e){this.props.disabled||"mousedown"===e.type&&0!==e.button||this.state.isOpen&&(e.stopPropagation(),e.preventDefault(),this.closeMenu())},handleMouseDownOnMenu:function(e){this.props.disabled||"mousedown"===e.type&&0!==e.button||(e.stopPropagation(),e.preventDefault(),this._openAfterFocus=!0,this.focus())},closeMenu:function(){this.setState({isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi,inputValue:""}),this.hasScrolledToOption=!1},handleInputFocus:function(e){var t=this.state.isOpen||this._openAfterFocus;this.props.onFocus&&this.props.onFocus(e),this.setState({isFocused:!0,isOpen:t}),this._openAfterFocus=!1},handleInputBlur:function(e){if(!this.refs.menu||!document.activeElement.isEqualNode(this.refs.menu)){this.props.onBlur&&this.props.onBlur(e);var t={isFocused:!1,isOpen:!1,isPseudoFocused:!1};this.props.onBlurResetsInput&&(t.inputValue=""),this.setState(t)}},handleInputChange:function(e){this.setState({isOpen:!0,isPseudoFocused:!1,inputValue:e.target.value})},handleKeyDown:function(e){if(!this.props.disabled){switch(e.keyCode){case 8:return void(!this.state.inputValue&&this.props.backspaceRemoves&&(e.preventDefault(),this.popValue()));case 9:if(e.shiftKey||!this.state.isOpen)return;return void this.selectFocusedOption();case 13:if(!this.state.isOpen)return;e.stopPropagation(),this.selectFocusedOption();break;case 27:this.state.isOpen?this.closeMenu():this.props.clearable&&this.props.escapeClearsValue&&this.clearValue(e);break;case 38:this.focusPreviousOption();break;case 40:this.focusNextOption();break;default:return}e.preventDefault()}},handleValueClick:function(e,t){this.props.onValueClick&&this.props.onValueClick(e,t)},handleMenuScroll:function(e){if(this.props.onMenuScrollToBottom){var t=e.target;t.scrollHeight>t.offsetHeight&&!(t.scrollHeight-t.offsetHeight-t.scrollTop)&&this.props.onMenuScrollToBottom()}},handleRequired:function(e,t){return e?t?0===e.length:0===Object.keys(e).length:!0},getOptionLabel:function(e){return e[this.props.labelKey]},getValueArray:function(){var e=this.props.value;if(this.props.multi){if("string"==typeof e&&(e=e.split(this.props.delimiter)),!Array.isArray(e)){if(null===e||void 0===e)return[];e=[e]}return e.map(this.expandValue).filter(function(e){return e})}var t=this.expandValue(e);return t?[t]:[]},expandValue:function(e){if("string"!=typeof e&&"number"!=typeof e)return e;var t=this.props,r=t.options,o=t.valueKey;if(r)for(var n=0;n<r.length;n++)if(r[n][o]===e)return r[n]},setValue:function(e){var t=this;if(this.props.autoBlur&&this.blurInput(),this.props.onChange){if(this.props.required){var r=this.handleRequired(e,this.props.multi);this.setState({required:r})}this.props.simpleValue&&e&&(e=this.props.multi?e.map(function(e){return e[t.props.valueKey]}).join(this.props.delimiter):e[this.props.valueKey]),this.props.onChange(e)}},selectValue:function(e){this.hasScrolledToOption=!1,this.props.multi?(this.addValue(e),this.setState({inputValue:""})):(this.setValue(e),this.setState({isOpen:!1,inputValue:"",isPseudoFocused:this.state.isFocused}))},addValue:function(e){var t=this.getValueArray();this.setValue(t.concat(e))},popValue:function(){var e=this.getValueArray();e.length&&e[e.length-1].clearableValue!==!1&&this.setValue(e.slice(0,e.length-1))},removeValue:function(e){var t=this.getValueArray();this.setValue(t.filter(function(t){return t!==e})),this.focus()},clearValue:function(e){e&&"mousedown"===e.type&&0!==e.button||(e.stopPropagation(),e.preventDefault(),this.setValue(null),this.setState({isOpen:!1,inputValue:""},this.focus))},focusOption:function(e){this.setState({focusedOption:e})},focusNextOption:function(){this.focusAdjacentOption("next")},focusPreviousOption:function(){this.focusAdjacentOption("previous")},focusAdjacentOption:function(e){var t=this._visibleOptions.filter(function(e){return!e.disabled});if(this._scrollToFocusedOptionOnUpdate=!0,!this.state.isOpen)return void this.setState({isOpen:!0,inputValue:"",focusedOption:this._focusedOption||t["next"===e?0:t.length-1]});if(t.length){for(var r=-1,o=0;o<t.length;o++)if(this._focusedOption===t[o]){r=o;break}var n=t[0];"next"===e&&r>-1&&r<t.length-1?n=t[r+1]:"previous"===e&&(n=r>0?t[r-1]:t[t.length-1]),this.setState({focusedOption:n})}},selectFocusedOption:function(){return this._focusedOption?this.selectValue(this._focusedOption):void 0},renderLoading:function(){return this.props.isLoading?a["default"].createElement("span",{className:"Select-loading-zone","aria-hidden":"true"},a["default"].createElement("span",{className:"Select-loading"})):void 0},renderValue:function(e,t){var r=this,o=this.props.valueRenderer||this.getOptionLabel,n=this.props.valueComponent;if(!e.length)return this.state.inputValue?null:a["default"].createElement("div",{className:"Select-placeholder"},this.props.placeholder);var i=this.props.onValueClick?this.handleValueClick:null;return this.props.multi?e.map(function(e,t){return a["default"].createElement(n,{disabled:r.props.disabled||e.clearableValue===!1,key:"value-"+t+"-"+e[r.props.valueKey],onClick:i,onRemove:r.removeValue,value:e},o(e))}):this.state.inputValue?void 0:(t&&(i=null),a["default"].createElement(n,{disabled:this.props.disabled,onClick:i,value:e[0]},o(e[0])))},renderInput:function(e){var t=(0,f["default"])("Select-input",this.props.inputProps.className);return this.props.disabled||!this.props.searchable?a["default"].createElement("div",i({},this.props.inputProps,{className:t,tabIndex:this.props.tabIndex||0,onBlur:this.handleInputBlur,onFocus:this.handleInputFocus,ref:"input",style:{border:0,width:1,display:"inline-block"}})):a["default"].createElement(c["default"],i({},this.props.inputProps,{className:t,tabIndex:this.props.tabIndex,onBlur:this.handleInputBlur,onChange:this.handleInputChange,onFocus:this.handleInputFocus,minWidth:"5",ref:"input",required:this.state.required,value:this.state.inputValue}))},renderClear:function(){return!this.props.clearable||!this.props.value||this.props.multi&&!this.props.value.length||this.props.disabled||this.props.isLoading?void 0:a["default"].createElement("span",{className:"Select-clear-zone",title:this.props.multi?this.props.clearAllText:this.props.clearValueText,"aria-label":this.props.multi?this.props.clearAllText:this.props.clearValueText,onMouseDown:this.clearValue,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEndClearValue},a["default"].createElement("span",{className:"Select-clear",dangerouslySetInnerHTML:{__html:"&times;"}}))},renderArrow:function(){return a["default"].createElement("span",{className:"Select-arrow-zone",onMouseDown:this.handleMouseDownOnArrow},a["default"].createElement("span",{className:"Select-arrow",onMouseDown:this.handleMouseDownOnArrow}))},filterOptions:function(e){var t=this,r=this.state.inputValue,o=this.props.options||[];return"function"==typeof this.props.filterOptions?this.props.filterOptions.call(this,o,r,e):this.props.filterOptions?(this.props.ignoreAccents&&(r=(0,y["default"])(r)),this.props.ignoreCase&&(r=r.toLowerCase()),e&&(e=e.map(function(e){return e[t.props.valueKey]})),o.filter(function(o){if(e&&e.indexOf(o[t.props.valueKey])>-1)return!1;if(t.props.filterOption)return t.props.filterOption.call(t,o,r);if(!r)return!0;var n=String(o[t.props.valueKey]),i=String(o[t.props.labelKey]);return t.props.ignoreAccents&&("label"!==t.props.matchProp&&(n=(0,y["default"])(n)),"value"!==t.props.matchProp&&(i=(0,y["default"])(i))),t.props.ignoreCase&&("label"!==t.props.matchProp&&(n=n.toLowerCase()),"value"!==t.props.matchProp&&(i=i.toLowerCase())),"start"===t.props.matchPos?"label"!==t.props.matchProp&&n.substr(0,r.length)===r||"value"!==t.props.matchProp&&i.substr(0,r.length)===r:"label"!==t.props.matchProp&&n.indexOf(r)>=0||"value"!==t.props.matchProp&&i.indexOf(r)>=0})):o},renderMenu:function(e,t,r){var o=this;if(!e||!e.length)return this.props.noResultsText?a["default"].createElement("div",{className:"Select-noresults"},this.props.noResultsText):null;var n=function(){var n=o.props.optionComponent,i=o.props.optionRenderer||o.getOptionLabel;return{v:e.map(function(e,s){var u=t&&t.indexOf(e)>-1,l=e===r,p=l?"focused":null,c=(0,f["default"])({"Select-option":!0,"is-selected":u,"is-focused":l,"is-disabled":e.disabled});return a["default"].createElement(n,{className:c,isDisabled:e.disabled,isFocused:l,key:"option-"+s+"-"+e[o.props.valueKey],onSelect:o.selectValue,onFocus:o.focusOption,option:e,isSelected:u,ref:p},i(e))})}}();return"object"==typeof n?n.v:void 0},renderHiddenField:function(e){var t=this;if(this.props.name){var r=e.map(function(e){return n(e[t.props.valueKey])}).join(this.props.delimiter);return a["default"].createElement("input",{type:"hidden",ref:"value",name:this.props.name,value:r,disabled:this.props.disabled})}},getFocusableOption:function(e){var t=this._visibleOptions;if(t.length){var r=this.state.focusedOption||e;if(r&&t.indexOf(r)>-1)return r;for(var o=0;o<t.length;o++)if(!t[o].disabled)return t[o]}},render:function(){var e=this.getValueArray(),t=this._visibleOptions=this.filterOptions(this.props.multi?e:null),r=this.state.isOpen;this.props.multi&&!t.length&&e.length&&!this.state.inputValue&&(r=!1);var o=this._focusedOption=this.getFocusableOption(e[0]),n=(0,f["default"])("Select",this.props.className,{"Select--multi":this.props.multi,"is-disabled":this.props.disabled,"is-focused":this.state.isFocused,"is-loading":this.props.isLoading,"is-open":r,"is-pseudo-focused":this.state.isPseudoFocused,"is-searchable":this.props.searchable,"has-value":e.length});return a["default"].createElement("div",{ref:"wrapper",className:n,style:this.props.wrapperStyle},this.renderHiddenField(e),a["default"].createElement("div",{ref:"control",className:"Select-control",style:this.props.style,onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleTouchEnd,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},this.renderValue(e,r),this.renderInput(e),this.renderLoading(),this.renderClear(),this.renderArrow()),r?a["default"].createElement("div",{ref:"menuContainer",className:"Select-menu-outer",style:this.props.menuContainerStyle},a["default"].createElement("div",{ref:"menu",className:"Select-menu",style:this.props.menuStyle,onScroll:this.handleMenuScroll,onMouseDown:this.handleMouseDownOnMenu},this.renderMenu(t,this.props.multi?null:e,o))):null)}});t["default"]=w,e.exports=t["default"]},function(e,t){"use strict";var r=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}];e.exports=function(e){for(var t=0;t<r.length;t++)e=e.replace(r[t].letters,r[t].base);return e}},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(){}Object.defineProperty(t,"__esModule",{value:!0}),t.jQuery=t.animation=void 0;var i=r(1),s=o(i),a=r(13),u=o(a),l=r(3),p=o(l),c=r(43),d=o(c),f=r(44),h=o(f),y={displayName:"ToastMessage",getDefaultProps:function(){var e={error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"};return{className:"toast",iconClassNames:e,titleClassName:"toast-title",messageClassName:"toast-message",tapToDismiss:!0,closeButton:!1}},handleOnClick:function(e){this.props.handleOnClick(e),this.props.tapToDismiss&&this.hideToast(!0)},_handle_close_button_click:function(e){e.stopPropagation(),this.hideToast(!0)},_handle_remove:function(){this.props.handleRemove(this.props.toastId)},_render_close_button:function(){return this.props.closeButton?s["default"].createElement("button",{className:"toast-close-button",role:"button",onClick:this._handle_close_button_click,dangerouslySetInnerHTML:{__html:"&times;"}}):!1},_render_title_element:function(){return this.props.title?s["default"].createElement("div",{className:this.props.titleClassName},this.props.title):!1},_render_message_element:function(){return this.props.message?s["default"].createElement("div",{className:this.props.messageClassName},this.props.message):!1},render:function(){var e=this.props.iconClassName||this.props.iconClassNames[this.props.type];return s["default"].createElement("div",{className:(0,p["default"])(this.props.className,e),style:this.props.style,onClick:this.handleOnClick,onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave},this._render_close_button(),this._render_title_element(),this._render_message_element())}},v=t.animation=s["default"].createClass((0,u["default"])(y,{displayName:{$set:"ToastMessage.animation"},mixins:{$set:[d["default"]]}})),m=t.jQuery=s["default"].createClass((0,u["default"])(y,{displayName:{$set:"ToastMessage.jQuery"},mixins:{$set:[h["default"]]}}));y.handleMouseEnter=n,y.handleMouseLeave=n,y.hideToast=n;var g=s["default"].createClass(y);g.animation=v,g.jQuery=m,t["default"]=g},function(e,t,r){e.exports=r(49)},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function n(e){return"number"==typeof e}function i(e){return"object"==typeof e&&null!==e}function s(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!n(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,n,a,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(r=this._events[e],s(r))return!1;if(o(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),r.apply(this,a)}else if(i(r))for(a=Array.prototype.slice.call(arguments,1),l=r.slice(),n=l.length,u=0;n>u;u++)l[u].apply(this,a);return!0},r.prototype.addListener=function(e,t){var n;if(!o(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(n=s(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}if(!o(t))throw TypeError("listener must be a function");var n=!1;return r.listener=t,this.on(e,r),this},r.prototype.removeListener=function(e,t){var r,n,s,a;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=this._events[e],s=r.length,n=-1,r===t||o(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(a=s;a-- >0;)if(r[a]===t||r[a].listener&&r[a].listener===t){n=a;break}if(0>n)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r=this._events[e],o(r))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(o(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t){function r(){l=!1,s.length?u=s.concat(u):p=-1,u.length&&o()}function o(){if(!l){var e=setTimeout(r);l=!0;for(var t=u.length;t;){for(s=u,u=[];++p<t;)s&&s[p].run();p=-1,t=u.length}s=null,l=!1,clearTimeout(e)}}function n(e,t){this.fun=e,this.array=t}function i(){}var s,a=e.exports={},u=[],l=!1,p=-1;a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new n(e,t)),1!==u.length||l||setTimeout(o,0)},n.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=i,a.addListener=i,a.once=i,a.off=i,a.removeListener=i,a.removeAllListeners=i,a.emit=i,a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(3),c=o(p),d=r(2),f=o(d),h=r(23),y=o(h),v=r(19),m=o(v),g=r(33),b=o(g),E=r(34),P=o(E),T=r(22),w=o(T),O=r(8),C=r(26),_=o(C),S=r(17),k=function(e){function t(e){var r=this;if(n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this._scrollHeader=function(e){r.refs.header.refs.container.scrollLeft=e.currentTarget.scrollLeft},this._adjustHeaderWidth=function(){var e=r.refs.header.refs.container.childNodes[0],t=r.refs.body.refs.container.childNodes[0];e.offsetWidth!==t.offsetWidth&&(e.style.width=t.offsetWidth+"px");var o=r.refs.body.getBodyHeaderDomProp();r.refs.header.fitHeader(o,r.refs.body.refs.container.scrollHeight>r.refs.body.refs.container.clientHeight)},this._attachCellEditFunc(),Array.isArray(this.props.data)){var o=this.props.data.slice();this.store=new O.TableDataStore(o)}else this.store=new O.TableDataStore(this.props.data.getData()),this.props.data.clear(),this.props.data.on("change",function(e){r.store.setData(e),r.setState({data:r.getTableData()})});if(this.initTable(this.props),this.filter&&!function(){var e=r;r.filter.on("onFilterChange",function(t){e.handleFilterData(t)})}(),this.props.selectRow&&this.props.selectRow.selected){var o=this.props.selectRow.selected.slice();this.store.setSelectedRowKey(o)}this.state={data:this.getTableData(),currPage:this.props.options.page||1,sizePerPage:this.props.options.sizePerPage||f["default"].SIZE_PER_PAGE_LIST[0],selectedRowKeys:this.store.getSelectedRowKeys()}}return i(t,e),s(t,[{key:"initTable",value:function(e){var t=this,r=e.keyField,o="string"==typeof r&&r.length;l["default"].Children.forEach(e.children,function(e){if(e.props.isKey){if(r)throw"Error. Multiple key column be detected in TableHeaderColumn.";r=e.props.dataField}e.props.filter&&(t.filter||(t.filter=new S.Filter),e.props.filter.emitter=t.filter)},this);var n=this.getColumnsDescription(e).reduce(function(e,t){return e[t.name]=t,e},{});if(!o&&!r)throw"Error. No any key column defined in TableHeaderColumn.\n            Use 'isKey={true}' to specify a unique column after version 0.5.4.";this.store.setProps({isPagination:e.pagination,keyField:r,colInfos:n,multiColumnSearch:e.multiColumnSearch,remote:this.isRemoteDataSource()})}},{key:"getTableData",value:function(){var e=[];if(this.props.options.sortName&&this.props.options.sortOrder&&this.store.sort(this.props.options.sortOrder,this.props.options.sortName),this.props.pagination){var t=void 0,r=void 0;this.store.isChangedPage()?(r=this.state.sizePerPage,t=this.state.currPage):(r=this.props.options.sizePerPage||f["default"].SIZE_PER_PAGE_LIST[0],t=this.props.options.page||1),e=this.store.page(t,r).get()}else e=this.store.get();return e}},{key:"getColumnsDescription",value:function(e){var t=e.children;return l["default"].Children.map(t,function(e,t){return{name:e.props.dataField,align:e.props.dataAlign,sort:e.props.dataSort,format:e.props.dataFormat,formatExtraData:e.props.formatExtraData,filterFormatted:e.props.filterFormatted,editable:e.props.editable,hidden:e.props.hidden,searchable:e.props.searchable,className:e.props.columnClassName,width:e.props.width,text:e.props.children,sortFunc:e.props.sortFunc,index:t}})}},{key:"componentWillReceiveProps",value:function(e){if(this.initTable(e),Array.isArray(e.data)){this.store.setData(e.data.slice());var t=this.refs.pagination,r=t&&t.getCurrentPage()||e.options.page||1,o=t&&t.getSizePerPage()||e.options.sizePerPage||f["default"].SIZE_PER_PAGE_LIST[0];r>Math.ceil(e.data.length/o)&&(r=1);var n=this.store.getSortInfo(),i=e.options.sortName||(n?n.sortField:void 0),s=e.options.sortOrder||(n?n.order:void 0);i&&s&&this.store.sort(s,i);var a=this.store.page(r,o).get();this.setState({data:a,currPage:r,sizePerPage:o})}if(e.selectRow&&e.selectRow.selected){var u=e.selectRow.selected.slice();this.store.setSelectedRowKey(u),this.setState({selectedRowKeys:u})}}},{key:"componentDidMount",value:function(){this._adjustHeaderWidth(),window.addEventListener("resize",this._adjustHeaderWidth),this.refs.body.refs.container.addEventListener("scroll",this._scrollHeader)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this._adjustHeaderWidth),this.refs.body.refs.container.removeEventListener("scroll",this._scrollHeader),this.filter&&this.filter.removeAllListeners("onFilterChange")}},{key:"componentDidUpdate",value:function(){this._adjustHeaderWidth(),this._attachCellEditFunc(),this.props.options.afterTableComplete&&this.props.options.afterTableComplete()}},{key:"_attachCellEditFunc",value:function(){this.props.cellEdit&&(this.props.cellEdit.__onCompleteEdit__=this.handleEditCell.bind(this),this.props.cellEdit.mode!==f["default"].CELL_EDIT_NONE&&(this.props.selectRow.clickToSelect=!1))}},{key:"isRemoteDataSource",value:function(e){return(e||this.props).remote}},{key:"render",value:function(){var e=((0,c["default"])("react-bs-table"),this.props.children),t={height:this.props.height,maxHeight:this.props.maxHeight};Array.isArray(this.props.children)||(e=[this.props.children]);var r=this.getColumnsDescription(this.props),o=this.store.getSortInfo(),n=this.renderPagination(),i=this.renderToolBar(),s=this.renderTableFilter(r),a=this.isSelectAll();return l["default"].createElement("div",{className:"react-bs-container",ref:"table"},i,l["default"].createElement("div",{className:"react-bs-table-container",onMouseEnter:this.handleMouseEnter.bind(this),onMouseLeave:this.handleMouseLeave.bind(this),style:t},l["default"].createElement(y["default"],{ref:"header",rowSelectType:this.props.selectRow.mode,hideSelectColumn:this.props.selectRow.hideSelectColumn,sortName:o?o.sortField:void 0,sortOrder:o?o.order:void 0,onSort:this.handleSort.bind(this),onSelectAllRow:this.handleSelectAllRow.bind(this),bordered:this.props.bordered,condensed:this.props.condensed,isFiltered:!!this.filter,tableID:this.props.tableID,isSelectAll:a},this.props.children),l["default"].createElement(m["default"],{height:this.props.height,maxHeight:this.props.maxHeight,ref:"body",data:this.state.data,columns:r,trClassName:this.props.trClassName,striped:this.props.striped,bordered:this.props.bordered,hover:this.props.hover,keyField:this.store.getKeyField(),condensed:this.props.condensed,selectRow:this.props.selectRow,cellEdit:this.props.cellEdit,selectedRowKeys:this.state.selectedRowKeys,onRowClick:this.handleRowClick.bind(this),onRowMouseOver:this.handleRowMouseOver.bind(this),onRowMouseOut:this.handleRowMouseOut.bind(this),onSelectRow:this.handleSelectRow.bind(this),noDataText:this.props.options.noDataText})),s,n)}},{key:"isSelectAll",value:function(){var e=this.store.getSelectedRowKeys(),t=this.store.getAllRowkey();return e.length!==t.length?0===e.length?!1:"indeterminate":!0}},{key:"cleanSelected",value:function(){this.store.setSelectedRowKey([]),this.setState({selectedRowKeys:[]})}},{key:"handleSort",value:function(e,t){this.props.options.onSortChange&&this.props.options.onSortChange(t,e,this.props);var r=this.store.sort(e,t).get();this.setState({data:r})}},{key:"handlePaginationData",value:function(e,t){var r=this.props.options.onPageChange;if(r&&r(e,t),!this.isRemoteDataSource()){var o=this.store.page(e,t).get();this.setState({data:o,currPage:e,sizePerPage:t})}}},{key:"handleMouseLeave",value:function(){this.props.options.onMouseLeave&&this.props.options.onMouseLeave()}},{key:"handleMouseEnter",value:function(){this.props.options.onMouseEnter&&this.props.options.onMouseEnter()}},{key:"handleRowMouseOut",value:function(e){this.props.options.onRowMouseOut&&this.props.options.onRowMouseOut(e)}},{key:"handleRowMouseOver",value:function(e){this.props.options.onRowMouseOver&&this.props.options.onRowMouseOver(e)}},{key:"handleRowClick",value:function(e){this.props.options.onRowClick&&this.props.options.onRowClick(e)}},{key:"handleSelectAllRow",value:function(e){var t=e.currentTarget.checked,r=[],o=!0;this.props.selectRow.onSelectAll&&(o=this.props.selectRow.onSelectAll(t,t?this.store.get():[])),"undefined"!=typeof o&&o===!1||(t&&(r=this.store.getAllRowkey()),this.store.setSelectedRowKey(r),this.setState({selectedRowKeys:r}))}},{key:"handleShowOnlySelected",value:function(){this.store.ignoreNonSelected();var e=void 0;e=this.props.pagination?this.store.page(1,this.state.sizePerPage).get():this.store.get(),this.setState({data:e,currPage:1})}},{key:"handleSelectRow",value:function(e,t){var r=this.store.getSelectedRowKeys(),o=e[this.store.getKeyField()],n=!0;this.props.selectRow.onSelect&&(n=this.props.selectRow.onSelect(e,t)),"undefined"!=typeof n&&n===!1||(this.props.selectRow.mode===f["default"].ROW_SELECT_SINGLE?r=t?[o]:[]:t?r.push(o):r=r.filter(function(e){return o!==e}),this.store.setSelectedRowKey(r),this.setState({selectedRowKeys:r}))}},{key:"handleEditCell",value:function(e,t,r){var o=void 0;l["default"].Children.forEach(this.props.children,function(e,t){return t==r?(o=e.props.dataField,!1):void 0});var n=this.store.edit(e,t,o).get();this.setState({data:n}),this.props.cellEdit.afterSaveCell&&this.props.cellEdit.afterSaveCell(this.state.data[t],o,e)}},{key:"handleAddRowBegin",value:function(){this.refs.body}},{key:"handleAddRowAtBegin",value:function(e){try{this.store.addAtBegin(e)}catch(t){return t}this._handleAfterAddingRow(e)}},{key:"handleAddRow",value:function(e){var t=this,r=this.props.options.beforeInsertRow?this.props.options.beforeInsertRow(e):e;return Promise.resolve(r).then(function(r){e=r;try{t.store.add(e)}catch(o){return o}t._handleAfterAddingRow(e)})["catch"](function(e){return console.log("gledaj ovde"),console.log(e),e.json()})}},{key:"getSizePerPage",value:function(){return this.state.sizePerPage}},{key:"getCurrentPage",value:function(){return this.state.currPage}},{key:"handleDropRow",value:function(e){var t=this,r=e?e:this.store.getSelectedRowKeys();r&&r.length>0&&(this.props.options.handleConfirmDeleteRow?this.props.options.handleConfirmDeleteRow(function(){t.deleteRow(r)}):confirm("Are you sure want delete?")&&this.deleteRow(r))}},{key:"deleteRow",value:function(e){var t=void 0;if(this.store.remove(e),this.store.setSelectedRowKey([]),this.props.pagination){var r=this.state.sizePerPage,o=this.state.currPage,n=Math.ceil(this.store.getDataNum()/r);o>n&&(o=n),t=this.store.page(o,r).get(),this.setState({data:t,selectedRowKeys:this.store.getSelectedRowKeys(),currPage:o})}else t=this.store.get(),this.setState({data:t,selectedRowKeys:this.store.getSelectedRowKeys()});this.props.options.afterDeleteRow&&this.props.options.afterDeleteRow(e)}},{key:"handleFilterData",value:function(e){this.store.filter(e);var t=void 0;if(this.props.pagination){var r=this.state.sizePerPage;t=this.store.page(1,r).get()}else t=this.store.get();this.props.options.afterColumnFilter&&this.props.options.afterColumnFilter(e,this.store.getDataIgnoringPagination()),this.setState({data:t,currPage:1})}},{key:"handleExportCSV",value:function(){var e=this.store.getDataIgnoringPagination(),t=[];this.props.children.map(function(e){e.props.hidden===!1&&t.push(e.props.dataField)}),(0,_["default"])(e,t,this.props.csvFileName)}},{key:"handleSearch",value:function(e){this.store.search(e);var t=void 0;if(this.props.pagination){var r=this.state.sizePerPage;t=this.store.page(1,r).get()}else t=this.store.get();this.props.options.afterSearch&&this.props.options.afterSearch(e,this.store.getDataIgnoringPagination()),this.setState({data:t,currPage:1})}},{key:"renderPagination",value:function(){if(this.props.pagination){var e=void 0;return e=this.isRemoteDataSource()?this.props.fetchInfo.dataTotalSize:this.store.getDataNum(),l["default"].createElement("div",{className:"table-footer-pagination"},l["default"].createElement(b["default"],{ref:"pagination",currPage:this.state.currPage,changePage:this.handlePaginationData.bind(this),sizePerPage:this.state.sizePerPage,sizePerPageList:this.props.options.sizePerPageList||f["default"].SIZE_PER_PAGE_LIST,paginationSize:this.props.options.paginationSize||f["default"].PAGINATION_SIZE,remote:this.isRemoteDataSource(),dataSize:e,onSizePerPageList:this.props.options.onSizePerPageList,prePage:this.props.options.prePage||f["default"].PRE_PAGE,nextPage:this.props.options.nextPage||f["default"].NEXT_PAGE,firstPage:this.props.options.firstPage||f["default"].FIRST_PAGE,lastPage:this.props.options.lastPage||f["default"].LAST_PAGE}))}return null}},{key:"renderToolBar",value:function(){var e=this.props.selectRow&&this.props.selectRow.showOnlySelected;if(e||this.props.insertRow||this.props.deleteRow||this.props.search||this.props.exportCSV){var t=void 0;return t=Array.isArray(this.props.children)?this.props.children.map(function(e){var t=e.props;return{name:t.children,field:t.dataField,autoValue:t.autoValue||!1,editable:t.editable&&"function"==typeof t.editable?t.editable():t.editable,hiddenInPopup:t.hiddenInPopup,format:t.dataFormat?function(e){return t.dataFormat(e,null,t.formatExtraData).replace(/<.*?>/g,"")}:!1}}):[{name:this.props.children.props.children,field:this.props.children.props.dataField,editable:this.props.children.props.editable,hiddenInPopup:this.props.children.props.hiddenInPopup}],l["default"].createElement("div",{className:"tool-bar"},l["default"].createElement(P["default"],{clearSearch:this.props.options.clearSearch,enableInsert:this.props.insertRow,enableDelete:this.props.deleteRow,enableSearch:this.props.search,enableExportCSV:this.props.exportCSV,enableShowOnlySelected:e,columns:t,searchPlaceholder:this.props.searchPlaceholder,onAddRow:this.handleAddRow.bind(this),onAddRowBegin:this.handleAddRowBegin.bind(this),onDropRow:this.handleDropRow.bind(this),onSearch:this.handleSearch.bind(this),onExportCSV:this.handleExportCSV.bind(this),onShowOnlySelected:this.handleShowOnlySelected.bind(this)}))}return null}},{key:"renderTableFilter",value:function(e){return this.props.columnFilter?l["default"].createElement(w["default"],{columns:e,rowSelectType:this.props.selectRow.mode,onFilter:this.handleFilterData.bind(this)}):null}},{key:"_handleAfterAddingRow",value:function(e){var t=void 0;if(this.props.pagination){var r=this.state.sizePerPage,o=Math.ceil(this.store.getDataNum()/r);t=this.store.page(o,r).get(),this.setState({data:t,currPage:o})}else t=this.store.get(),this.setState({data:t});this.props.options.afterInsertRow&&this.props.options.afterInsertRow(e)}}]),t}(l["default"].Component);k.propTypes={keyField:l["default"].PropTypes.string,height:l["default"].PropTypes.string,maxHeight:l["default"].PropTypes.string,tableID:l["default"].PropTypes.string,data:l["default"].PropTypes.oneOfType([l["default"].PropTypes.array,l["default"].PropTypes.object]),remote:l["default"].PropTypes.bool,striped:l["default"].PropTypes.bool,bordered:l["default"].PropTypes.bool,hover:l["default"].PropTypes.bool,condensed:l["default"].PropTypes.bool,pagination:l["default"].PropTypes.bool,searchPlaceholder:l["default"].PropTypes.string,selectRow:l["default"].PropTypes.shape({mode:l["default"].PropTypes.oneOf([f["default"].ROW_SELECT_NONE,f["default"].ROW_SELECT_SINGLE,f["default"].ROW_SELECT_MULTI]),bgColor:l["default"].PropTypes.string,selected:l["default"].PropTypes.array,onSelect:l["default"].PropTypes.func,onSelectAll:l["default"].PropTypes.func,clickToSelect:l["default"].PropTypes.bool,hideSelectColumn:l["default"].PropTypes.bool,clickToSelectAndEditCell:l["default"].PropTypes.bool,showOnlySelected:l["default"].PropTypes.bool}),cellEdit:l["default"].PropTypes.shape({mode:l["default"].PropTypes.string,blurToSave:l["default"].PropTypes.bool,afterSaveCell:l["default"].PropTypes.func}),insertRow:l["default"].PropTypes.bool,deleteRow:l["default"].PropTypes.bool,search:l["default"].PropTypes.bool,columnFilter:l["default"].PropTypes.bool,trClassName:l["default"].PropTypes.any,options:l["default"].PropTypes.shape({beforeInsertRow:l["default"].PropTypes.func,clearSearch:l["default"].PropTypes.bool,sortName:l["default"].PropTypes.string,sortOrder:l["default"].PropTypes.string,afterTableComplete:l["default"].PropTypes.func,afterDeleteRow:l["default"].PropTypes.func,afterInsertRow:l["default"].PropTypes.func,afterSearch:l["default"].PropTypes.func,afterColumnFilter:l["default"].PropTypes.func,onRowClick:l["default"].PropTypes.func,page:l["default"].PropTypes.number,sizePerPageList:l["default"].PropTypes.array,sizePerPage:l["default"].PropTypes.number,paginationSize:l["default"].PropTypes.number,onSortChange:l["default"].PropTypes.func,onPageChange:l["default"].PropTypes.func,onSizePerPageList:l["default"].PropTypes.func,noDataText:l["default"].PropTypes.string,handleConfirmDeleteRow:l["default"].PropTypes.func,prePage:l["default"].PropTypes.string,nextPage:l["default"].PropTypes.string,firstPage:l["default"].PropTypes.string,lastPage:l["default"].PropTypes.string}),fetchInfo:l["default"].PropTypes.shape({dataTotalSize:l["default"].PropTypes.number}),exportCSV:l["default"].PropTypes.bool,csvFileName:l["default"].PropTypes.string},k.defaultProps={height:"100%",maxHeight:void 0,tableID:void 0,striped:!1,bordered:!0,hover:!1,condensed:!1,pagination:!1,searchPlaceholder:void 0,selectRow:{mode:f["default"].ROW_SELECT_NONE,bgColor:f["default"].ROW_SELECT_BG_COLOR,selected:[],onSelect:void 0,onSelectAll:void 0,clickToSelect:!1,hideSelectColumn:!1,clickToSelectAndEditCell:!1,showOnlySelected:!1},cellEdit:{mode:f["default"].CELL_EDIT_NONE,blurToSave:!1,afterSaveCell:void 0},insertRow:!1,deleteRow:!1,search:!1,multiColumnSearch:!1,columnFilter:!1,trClassName:"",options:{clearSearch:!1,sortName:void 0,sortOrder:void 0,afterTableComplete:void 0,afterDeleteRow:void 0,afterInsertRow:void 0,afterSearch:void 0,afterColumnFilter:void 0,onRowClick:void 0,onMouseLeave:void 0,onMouseEnter:void 0,onRowMouseOut:void 0,onRowMouseOver:void 0,page:void 0,sizePerPageList:f["default"].SIZE_PER_PAGE_LIST,sizePerPage:void 0,paginationSize:f["default"].PAGINATION_SIZE,onSizePerPageList:void 0,noDataText:void 0,handleConfirmDeleteRow:void 0,prePage:f["default"].PRE_PAGE,nextPage:f["default"].NEXT_PAGE,firstPage:f["default"].FIRST_PAGE,lastPage:f["default"].LAST_PAGE},fetchInfo:{dataTotalSize:0},exportCSV:!1,csvFileName:void 0},t["default"]=k,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(2),l=o(u),p=r(14).EventEmitter,c=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.currentFilter={}}return i(t,e),s(t,[{key:"handleFilter",value:function(e,t,r){var o=r||l["default"].FILTER_TYPE.CUSTOM;if(null!=t&&"object"==typeof t){var n=!0;for(var i in t)if(!t[i]||""===t[i]){n=!1;break}n?this.currentFilter[e]={
value:t,type:o}:delete this.currentFilter[e]}else t&&""!==t.trim()?this.currentFilter[e]={value:t.trim(),type:o}:delete this.currentFilter[e];this.emit("onFilterChange",this.currentFilter)}}]),t}(p);t.Filter=c},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(3),c=(o(p),r(2)),d=(o(c),function(e){function t(){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),s(t,[{key:"render",value:function(){var e={width:parseInt(this.props.width)?this.props.width:35};return l["default"].createElement("th",{style:e},l["default"].createElement("div",{className:"th-inner table-header-column"},this.props.children))}}]),t}(l["default"].Component));t["default"]=d,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(2),c=o(p),d=r(5),f=o(d),h=r(25),y=o(h),v=r(20),m=o(v),g=r(21),b=o(g),E=r(3),P=o(E),T=function(e){return e&&"function"==typeof e},w=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={currEditCell:null},this.editing=!1}return i(t,e),s(t,[{key:"componentDidMount",value:function(){this.adjustBody()}},{key:"componentDidUpdate",value:function(){this.adjustBody()}},{key:"render",value:function(){var e=(0,P["default"])("table-container"),t=(0,P["default"])("table",{"table-striped":this.props.striped,"table-bordered":this.props.bordered,"table-hover":this.props.hover,"table-condensed":this.props.condensed}),r=this._isSelectRowDefined(),o=this.renderTableHeader(r),n=this.props.data.map(function(e,t){var o=this.props.columns.map(function(r,o){var n=e[r.name];if(this.editing&&r.name!==this.props.keyField&&r.editable&&null!=this.state.currEditCell&&this.state.currEditCell.rid==t&&this.state.currEditCell.cid==o){var i=r.format?function(t){return r.format(t,e,r.formatExtraData).replace(/<.*?>/g,"")}:!1;return l["default"].createElement(b["default"],{completeEdit:this.handleCompleteEditCell.bind(this),editable:T(r.editable)?r.editable(n,e,t,o):r.editable,format:r.format?i:!1,key:o,blurToSave:this.props.cellEdit.blurToSave,rowIndex:t,colIndex:o},n)}var s=T(r.className)?r.className(n,e,t,o):r.className;if("undefined"!=typeof r.format){var a=r.format(n,e,r.formatExtraData);return l["default"].isValidElement(a)||(a=l["default"].createElement("div",{dangerouslySetInnerHTML:{__html:a}})),l["default"].createElement(m["default"],{dataAlign:r.align,key:o,className:s,cellEdit:this.props.cellEdit,hidden:r.hidden,onEdit:this.handleEditCell.bind(this),width:r.width},a)}return l["default"].createElement(m["default"],{dataAlign:r.align,key:o,className:s,cellEdit:this.props.cellEdit,hidden:r.hidden,onEdit:this.handleEditCell.bind(this),width:r.width},n)},this),n=-1!=this.props.selectedRowKeys.indexOf(e[this.props.keyField]),i=r&&!this.props.selectRow.hideSelectColumn?this.renderSelectRowColumn(n):null,s=T(this.props.trClassName)?this.props.trClassName(e,t):this.props.trClassName;return l["default"].createElement(y["default"],{isSelected:n,key:t,className:s,selectRow:r?this.props.selectRow:void 0,enableCellEdit:this.props.cellEdit.mode!==c["default"].CELL_EDIT_NONE,onRowClick:this.handleRowClick.bind(this),onRowMouseOver:this.handleRowMouseOver.bind(this),onRowMouseOut:this.handleRowMouseOut.bind(this),onSelectRow:this.handleSelectRow.bind(this)},i,o)},this);0===n.length&&n.push(l["default"].createElement(y["default"],{key:"##table-empty##"},l["default"].createElement("td",{colSpan:this.props.columns.length+(r?1:0),className:"react-bs-table-no-data"},this.props.noDataText||c["default"].NO_DATA_TEXT))),this.editing=!1;var i=this.calculateContainerHeight().toString();return l["default"].createElement("div",{ref:"container",className:e,style:{height:i}},l["default"].createElement("table",{ref:"body",className:t},o,l["default"].createElement("tbody",null,n)))}},{key:"renderTableHeader",value:function(e){var t=null;if(e){var r={width:35,minWidth:35};t=this.props.selectRow.hideSelectColumn?null:l["default"].createElement("th",{style:r,key:-1})}var o=this.props.columns.map(function(e,t){var r=null==e.width?e.width:parseInt(e.width),o={display:e.hidden?"none":null,width:r,maxWidth:r},n=e.sort?f["default"].renderReactSortCaret(c["default"].SORT_DESC):null;return l["default"].createElement("th",{style:o,key:t,className:e.className},e.text,n)});return l["default"].createElement("thead",{ref:"header"},l["default"].createElement("tr",null,t,o))}},{key:"handleRowMouseOut",value:function(e){var t=this.props.data[e-1];this.props.onRowMouseOut(t)}},{key:"handleRowMouseOver",value:function(e){var t=this.props.data[e-1];this.props.onRowMouseOver(t)}},{key:"handleRowClick",value:function(e){var t,r;this.props.data.forEach(function(o,n){n==e-1&&(t=o[this.props.keyField],r=o)},this),this.props.onRowClick(r)}},{key:"handleSelectRow",value:function(e,t){var r,o;this.props.data.forEach(function(t,n){return n==e-1?(r=t[this.props.keyField],o=t,!1):void 0},this),this.props.onSelectRow(o,t)}},{key:"handleSelectRowColumChange",value:function(e){this.props.selectRow.clickToSelect&&this.props.selectRow.clickToSelectAndEditCell||this.handleSelectRow(e.currentTarget.parentElement.parentElement.rowIndex,e.currentTarget.checked)}},{key:"handleEditCell",value:function(e,t){this.editing=!0,this._isSelectRowDefined()&&(t--,this.props.selectRow.hideSelectColumn&&t++),e--;var r={currEditCell:{rid:e,cid:t}};this.props.selectRow.clickToSelectAndEditCell&&this.handleSelectRow(e+1,!0),this.setState(r)}},{key:"cancelEdit",value:function(){var e=this.state.currEditCell;e&&this.handleCompleteEditCell(null,e.rid,e.cid)}},{key:"handleCompleteEditCell",value:function(e,t,r){this.setState({currEditCell:null}),null!=e&&this.props.cellEdit.__onCompleteEdit__(e,t,r)}},{key:"renderSelectRowColumn",value:function(e){return this.props.selectRow.mode==c["default"].ROW_SELECT_SINGLE?l["default"].createElement(m["default"],null,l["default"].createElement("input",{type:"radio",checked:e,onChange:this.handleSelectRowColumChange.bind(this)})):l["default"].createElement(m["default"],null,l["default"].createElement("input",{type:"checkbox",checked:e,onChange:this.handleSelectRowColumChange.bind(this)}))}},{key:"getBodyHeaderDomProp",value:function(){for(var e=this.refs.header.childNodes[0].childNodes,t=[],r=0;r<e.length;r++)t.push({width:e[r].offsetWidth});return t}},{key:"adjustBody",value:function(){this.hardFixHeaderWidth(),this.props.condensed&&(this.refs.body.style.marginTop="-36px"),this.props.maxHeight&&parseInt(this.props.maxHeight)<this.refs.container.offsetHeight&&(this.refs.container.style.height=this.props.maxHeight-42+"px")}},{key:"hardFixHeaderWidth",value:function(){for(var e=this.refs.header.childNodes[0].childNodes,t=0;t<e.length;t++)e[t].style.width=e[t].offsetWidth+"px"}},{key:"calculateContainerHeight",value:function(){return"100%"==this.props.height?this.props.height:parseInt(this.props.height)-42}},{key:"_isSelectRowDefined",value:function(){return this.props.selectRow.mode===c["default"].ROW_SELECT_SINGLE||this.props.selectRow.mode===c["default"].ROW_SELECT_MULTI}}]),t}(l["default"].Component);w.propTypes={height:l["default"].PropTypes.string,data:l["default"].PropTypes.array,columns:l["default"].PropTypes.array,striped:l["default"].PropTypes.bool,bordered:l["default"].PropTypes.bool,hover:l["default"].PropTypes.bool,condensed:l["default"].PropTypes.bool,keyField:l["default"].PropTypes.string,selectedRowKeys:l["default"].PropTypes.array,onRowClick:l["default"].PropTypes.func,onSelectRow:l["default"].PropTypes.func,noDataText:l["default"].PropTypes.string},t["default"]=w,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},a=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),u=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},l=r(1),p=o(l),c=r(2),d=o(c),f=function(e){function t(e){n(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return i(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t){var r=this.props.children,o=this.props.width!==e.width||this.props.className!==e.className||this.props.hidden!==e.hidden||this.props.dataAlign!==e.dataAlign||typeof r!=typeof e.children||(""+this.props.onEdit).toString()!==(""+e.onEdit).toString();return o?o:(o="object"==typeof r&&null!==r&&null!==r.props?"checkbox"===r.props.type||"radio"===r.props.type?o||r.props.type!==e.children.props.type||r.props.checked!==e.children.props.checked:!0:o||r!==e.children,o?o:this.props.cellEdit&&e.cellEdit?o||this.props.cellEdit.mode!==e.cellEdit.mode:!1)}},{key:"handleCellEdit",value:function(e){if(this.props.cellEdit.mode==d["default"].CELL_EDIT_DBCLICK)if(document.selection&&document.selection.empty)document.selection.empty();else if(window.getSelection){var t=window.getSelection();t.removeAllRanges()}this.props.onEdit(e.currentTarget.parentElement.rowIndex,e.currentTarget.cellIndex)}},{key:"render",value:function(){var e=null==this.props.width?this.props.width:-1!==this.props.width.indexOf("%")?this.props.width:parseInt(this.props.width),t={textAlign:this.props.dataAlign,display:this.props.hidden?"none":null,width:e,maxWidth:e},r=this.props.className;this.props.width&&(r+=" col-md-"+e);var o={};return this.props.cellEdit&&(this.props.cellEdit.mode==d["default"].CELL_EDIT_CLICK?o.onClick=this.handleCellEdit.bind(this):this.props.cellEdit.mode==d["default"].CELL_EDIT_DBCLICK&&(o.onDoubleClick=this.handleCellEdit.bind(this))),p["default"].createElement("td",s({style:t,className:r},o),this.props.children)}}]),t}(p["default"].Component);f.propTypes={dataAlign:p["default"].PropTypes.string,hidden:p["default"].PropTypes.bool,className:p["default"].PropTypes.string},f.defaultProps={dataAlign:"left",hidden:!1,className:""},t["default"]=f,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(2),c=(o(p),r(6)),d=o(c),f=r(7),h=o(f),y=r(3),v=o(y),m=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.timeouteClear=0,this.state={shakeEditor:!1}}return i(t,e),s(t,[{key:"handleKeyPress",value:function(e){if(13==e.keyCode){var t="checkbox"==e.currentTarget.type?this._getCheckBoxValue(e):e.currentTarget.value;if(!this.validator(t))return;this.props.completeEdit(t,this.props.rowIndex,this.props.colIndex)}else 27==e.keyCode&&this.props.completeEdit(null,this.props.rowIndex,this.props.colIndex)}},{key:"handleBlur",value:function(e){if(this.props.blurToSave){var t="checkbox"==e.currentTarget.type?this._getCheckBoxValue(e):e.currentTarget.value;if(!this.validator(t))return;this.props.completeEdit(t,this.props.rowIndex,this.props.colIndex)}}},{key:"validator",value:function(e){var t=this;if(t.props.editable.validator){var r=t.props.editable.validator(e);if(r!==!0){t.refs.notifier.notice("error",r,"Pressed ESC can cancel");var o=t.refs.inputRef;return t.clearTimeout(),t.setState({shakeEditor:!0}),t.timeouteClear=setTimeout(function(){t.setState({shakeEditor:!1})},300),o.focus(),!1}}return!0}},{key:"clearTimeout",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){0!=this.timeouteClear&&(clearTimeout(this.timeouteClear),this.timeouteClear=0)})},{key:"componentDidMount",value:function(){var e=this.refs.inputRef;e.focus()}},{key:"componentWillUnmount",value:function(){this.clearTimeout()}},{key:"render",value:function(){var e=this.props.editable,t=this.props.format,r={ref:"inputRef",onKeyDown:this.handleKeyPress.bind(this),onBlur:this.handleBlur.bind(this)};e.placeholder&&(r.placeholder=e.placeholder);var o=(0,v["default"])({animated:this.state.shakeEditor,shake:this.state.shakeEditor});return l["default"].createElement("td",{ref:"td",style:{position:"relative"}},(0,d["default"])(e,r,t,o,this.props.children||""),l["default"].createElement(h["default"],{ref:"notifier"}))}},{key:"_getCheckBoxValue",value:function(e){var t="",r=e.currentTarget.value.split(":");return t=e.currentTarget.checked?r[0]:r[1]}}]),t}(l["default"].Component);m.propTypes={completeEdit:l["default"].PropTypes.func,rowIndex:l["default"].PropTypes.number,colIndex:l["default"].PropTypes.number,blurToSave:l["default"].PropTypes.bool},t["default"]=m,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(2),c=o(p),d=r(3),f=o(d),h=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.filterObj={}}return i(t,e),s(t,[{key:"handleKeyUp",value:function(e){""===e.currentTarget.value.trim()?delete this.filterObj[e.currentTarget.name]:this.filterObj[e.currentTarget.name]=e.currentTarget.value,this.props.onFilter(this.filterObj)}},{key:"render",value:function(){var e=(0,f["default"])("table",{"table-striped":this.props.striped,"table-condensed":this.props.condensed}),t=null;if(this.props.rowSelectType==c["default"].ROW_SELECT_SINGLE||this.props.rowSelectType==c["default"].ROW_SELECT_MULTI){var r={width:35,paddingLeft:0,paddingRight:0};t=l["default"].createElement("th",{style:r,key:-1},"Filter")}var o=this.props.columns.map(function(e){var t={display:e.hidden?"none":null,width:e.width};return l["default"].createElement("th",{key:e.name,style:t},l["default"].createElement("div",{className:"th-inner table-header-column"},l["default"].createElement("input",{size:"10",type:"text",placeholder:e.name,name:e.name,onKeyUp:this.handleKeyUp.bind(this)})))},this);return l["default"].createElement("table",{className:e,style:{marginTop:5}},l["default"].createElement("thead",null,l["default"].createElement("tr",{style:{borderBottomStyle:"hidden"}},t,o)))}}]),t}(l["default"].Component);h.propTypes={columns:l["default"].PropTypes.array,rowSelectType:l["default"].PropTypes.string,onFilter:l["default"].PropTypes.func},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(4),c=o(p),d=r(2),f=o(d),h=r(5),y=o(h),v=r(3),m=o(v),g=r(18),b=o(g),E=function(e){function t(){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),s(t,[{key:"componentDidMount",value:function(){this.update(this.props.checked)}},{key:"componentWillReceiveProps",value:function(e){this.update(e.checked)}},{key:"update",value:function(e){c["default"].findDOMNode(this).indeterminate="indeterminate"===e}},{key:"render",value:function(){return l["default"].createElement("input",{className:"react-bs-select-all",type:"checkbox",checked:this.props.checked,onChange:this.props.onChange})}}]),t}(l["default"].Component),P=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.selectRowColumnWidth=null}return i(t,e),s(t,[{key:"render",value:function(){var e=(0,m["default"])("table-header"),t=(0,m["default"])("table","table-hover",{"table-bordered":this.props.bordered,"table-condensed":this.props.condensed}),r=this.props.hideSelectColumn?null:this.renderSelectRowHeader();return this._attachClearSortCaretFunc(),l["default"].createElement("div",{className:"table-header-wrapper"},l["default"].createElement("div",{ref:"container",className:e},l["default"].createElement("table",{className:t,id:this.props.tableID},l["default"].createElement("thead",null,l["default"].createElement("tr",{ref:"header"},r,this.props.children)))))}},{key:"renderSelectRowHeader",value:function(){return this.props.rowSelectType==f["default"].ROW_SELECT_SINGLE?l["default"].createElement(b["default"],{width:this.selectRowColumnWidth}):this.props.rowSelectType==f["default"].ROW_SELECT_MULTI?l["default"].createElement(b["default"],{width:this.selectRowColumnWidth},l["default"].createElement(E,{onChange:this.props.onSelectAllRow,checked:this.props.isSelectAll})):null}},{key:"_attachClearSortCaretFunc",value:function(){if(Array.isArray(this.props.children))for(var e=0;e<this.props.children.length;e++){var t=this.props.children[e].props.dataField,r=t===this.props.sortName?this.props.sortOrder:void 0;this.props.children[e]=l["default"].cloneElement(this.props.children[e],{key:e,onSort:this.props.onSort,sort:r})}else{var t=this.props.children.props.dataField,r=t===this.props.sortName?this.props.sortOrder:void 0;this.props.children=l["default"].cloneElement(this.props.children,{key:0,onSort:this.props.onSort,sort:r})}}},{key:"fitHeader",value:function(e,t){if(Array.isArray(this.props.children)){var r=this.props.rowSelectType!=f["default"].ROW_SELECT_SINGLE&&this.props.rowSelectType!=f["default"].ROW_SELECT_MULTI||this.props.hideSelectColumn?0:1;1==r&&(this.selectRowColumnWidth=e[0].width);for(var o=0;o<this.props.children.length;o++)this.props.children[o]=l["default"].cloneElement(this.props.children[o],{width:e[o+r].width+"px"})}else this.props.children=l["default"].cloneElement(this.props.children,{width:e[0].width+"px"});this.props.condensed&&!this.props.isFiltered&&(this.refs.container.style.height="36px"),this.forceUpdate(),t&&(this.refs.container.style.marginRight=y["default"].getScrollBarWidth()+"px")}}]),t}(l["default"].Component);P.propTypes={rowSelectType:l["default"].PropTypes.string,onSort:l["default"].PropTypes.func,onSelectAllRow:l["default"].PropTypes.func,sortName:l["default"].PropTypes.string,sortOrder:l["default"].PropTypes.string,hideSelectColumn:l["default"].PropTypes.bool,bordered:l["default"].PropTypes.bool,condensed:l["default"].PropTypes.bool,isFiltered:l["default"].PropTypes.bool,isSelectAll:l["default"].PropTypes.oneOf([!0,"indeterminate",!1])},P.defaultProps={},t["default"]=P,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},a=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),u=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},l=r(1),p=o(l),c=r(3),d=(o(c),r(2)),f=o(d),h=r(5),y=o(h),v=r(28),m=o(v),g=r(31),b=o(g),E=r(30),P=o(E),T=r(29),w=o(T),O=function(e){function t(e){n(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.handleFilter=this.handleFilter.bind(this)}return i(t,e),a(t,[{key:"handleColumnClick",value:function(e){if(this.props.dataSort){var t=this.props.sort==f["default"].SORT_DESC?f["default"].SORT_ASC:f["default"].SORT_DESC;this.props.onSort(t,this.props.dataField)}}},{key:"handleFilter",value:function(e,t){this.props.filter.emitter.handleFilter(this.props.dataField,e,t)}},{key:"getFilters",value:function(){switch(this.props.filter.type){case f["default"].FILTER_TYPE.TEXT:return p["default"].createElement(b["default"],s({},this.props.filter,{columnName:this.props.children,filterHandler:this.handleFilter}));case f["default"].FILTER_TYPE.SELECT:return p["default"].createElement(P["default"],s({},this.props.filter,{columnName:this.props.children,filterHandler:this.handleFilter}));case f["default"].FILTER_TYPE.NUMBER:return p["default"].createElement(w["default"],s({},this.props.filter,{columnName:this.props.children,filterHandler:this.handleFilter}));case f["default"].FILTER_TYPE.DATE:return p["default"].createElement(m["default"],s({},this.props.filter,{columnName:this.props.children,filterHandler:this.handleFilter}));case f["default"].FILTER_TYPE.CUSTOM:return this.props.filter.getElement(this.handleFilter,this.props.filter.customFilterParameters)}}},{key:"componentDidMount",value:function(){this.refs.innerDiv.setAttribute("data-field",this.props.dataField)}},{key:"render",value:function(){var e=null!==this.props.width?parseInt(this.props.width):null,t={textAlign:this.props.dataAlign,display:this.props.hidden?"none":null,width:e,maxWidth:e},r=this.props.dataSort?p["default"].createElement("span",{className:"order"},p["default"].createElement("span",{className:"dropdown"},p["default"].createElement("span",{className:"caret",style:{margin:"10px 0 10px 5px",color:"#ccc"}})),p["default"].createElement("span",{className:"dropup"},p["default"].createElement("span",{className:"caret",style:{margin:"10px 0",color:"#ccc"}}))):null,o=this.props.sort?y["default"].renderReactSortCaret(this.props.sort):r,n=this.props.className+" "+(this.props.dataSort?"sort-column":"");return p["default"].createElement("th",{ref:"header-col",className:n,style:t},p["default"].createElement("div",{ref:"innerDiv",className:"th-inner table-header-column",onClick:this.handleColumnClick.bind(this)},this.props.children,o),this.props.filter?this.getFilters():null)}}]),t}(p["default"].Component),C=[];for(var _ in f["default"].FILTER_TYPE)C.push(f["default"].FILTER_TYPE[_]);O.propTypes={dataField:p["default"].PropTypes.string,dataAlign:p["default"].PropTypes.string,dataSort:p["default"].PropTypes.bool,onSort:p["default"].PropTypes.func,dataFormat:p["default"].PropTypes.func,isKey:p["default"].PropTypes.bool,editable:p["default"].PropTypes.any,hidden:p["default"].PropTypes.bool,hiddenInPopup:p["default"].PropTypes.bool,searchable:p["default"].PropTypes.bool,className:p["default"].PropTypes.string,width:p["default"].PropTypes.string,sortFunc:p["default"].PropTypes.func,columnClassName:p["default"].PropTypes.any,filterFormatted:p["default"].PropTypes.bool,sort:p["default"].PropTypes.string,formatExtraData:p["default"].PropTypes.any,filter:p["default"].PropTypes.shape({type:p["default"].PropTypes.oneOf(C),delay:p["default"].PropTypes.number,options:p["default"].PropTypes.oneOfType([p["default"].PropTypes.object,p["default"].PropTypes.arrayOf(p["default"].PropTypes.number)]),numberComparators:p["default"].PropTypes.arrayOf(p["default"].PropTypes.string),emitter:p["default"].PropTypes.object,placeholder:p["default"].PropTypes.string,getElement:p["default"].PropTypes.func,customFilterParameters:p["default"].PropTypes.object})},O.defaultProps={dataAlign:"left",dataSort:!1,dataFormat:void 0,isKey:!1,editable:!0,onSort:void 0,hidden:!1,hiddenInPopup:!1,searchable:!0,className:"",width:null,sortFunc:void 0,columnClassName:"",filterFormatted:!1,sort:void 0,formatExtraData:void 0,filter:void 0},t["default"]=O,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},a=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),u=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},l=r(1),p=o(l),c=r(2),d=(o(c),function(e){function t(e){n(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.clickNum=0}return i(t,e),a(t,[{key:"rowClick",value:function(e){var t=this;"INPUT"!==e.target.tagName&&"SELECT"!==e.target.tagName&&"TEXTAREA"!==e.target.tagName&&!function(){var r=e.currentTarget.rowIndex;t.props.selectRow&&(t.props.selectRow.clickToSelect?t.props.onSelectRow(r,!t.props.isSelected):t.props.selectRow.clickToSelectAndEditCell&&(t.clickNum++,setTimeout(function(){1===t.clickNum&&t.props.onSelectRow(r,!t.props.isSelected),t.clickNum=0},200))),t.props.onRowClick&&t.props.onRowClick(r)}()}},{key:"rowMouseOut",value:function(e){this.props.onRowMouseOut&&this.props.onRowMouseOut(e.currentTarget.rowIndex)}},{key:"rowMouseOver",value:function(e){this.props.onRowMouseOver&&this.props.onRowMouseOver(e.currentTarget.rowIndex)}},{key:"render",value:function(){this.clickNum=0;var e={style:{backgroundColor:this.props.isSelected?this.props.selectRow.bgColor:null},className:(this.props.isSelected&&this.props.selectRow.className?this.props.selectRow.className:"")+(this.props.className||"")};return this.props.selectRow&&(this.props.selectRow.clickToSelect||this.props.selectRow.clickToSelectAndEditCell)||this.props.onRowClick?p["default"].createElement("tr",s({},e,{onMouseOver:this.rowMouseOver.bind(this),onMouseOut:this.rowMouseOut.bind(this),onClick:this.rowClick.bind(this)}),this.props.children):p["default"].createElement("tr",e,this.props.children);
}}]),t}(p["default"].Component));d.propTypes={isSelected:p["default"].PropTypes.bool,enableCellEdit:p["default"].PropTypes.bool,onRowClick:p["default"].PropTypes.func,onSelectRow:p["default"].PropTypes.func,onRowMouseOut:p["default"].PropTypes.func,onRowMouseOver:p["default"].PropTypes.func},d.defaultProps={onRowClick:void 0},t["default"]=d,e.exports=t["default"]},function(e,t,r){"use strict";function o(e,t){var r="";return 0===e.length?r:(r+=t.join(",")+"\n",e.map(function(e){t.map(function(o,n){var i="undefined"!=typeof e[o]?'"'+e[o]+'"':"";r+=i,n+1<t.length&&(r+=",")}),r+="\n"}),r)}if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"!=typeof window)var n=r(27),i=n.saveAs;var s=function(e,t,r){var n=o(e,t);"undefined"!=typeof window&&i(new Blob([n],{type:"text/plain;charset=utf-8"}),r||"spreadsheet.csv")};t["default"]=s,e.exports=t["default"]},function(e,t,r){var o,n,i=i||function(e){"use strict";if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var t=e.document,r=function(){return e.URL||e.webkitURL||e},o=t.createElementNS("http://www.w3.org/1999/xhtml","a"),n="download"in o,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},s=/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),a=e.webkitRequestFileSystem,u=e.requestFileSystem||a||e.mozRequestFileSystem,l=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},p="application/octet-stream",c=0,d=500,f=function(t){var o=function(){"string"==typeof t?r().revokeObjectURL(t):t.remove()};e.chrome?o():setTimeout(o,d)},h=function(e,t,r){t=[].concat(t);for(var o=t.length;o--;){var n=e["on"+t[o]];if("function"==typeof n)try{n.call(e,r||e)}catch(i){l(i)}}},y=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e},v=function(t,l,d){d||(t=y(t));var v,m,g,b=this,E=t.type,P=!1,T=function(){h(b,"writestart progress write writeend".split(" "))},w=function(){if(m&&s&&"undefined"!=typeof FileReader){var o=new FileReader;return o.onloadend=function(){var e=o.result;m.location.href="data:attachment/file"+e.slice(e.search(/[,;]/)),b.readyState=b.DONE,T()},o.readAsDataURL(t),void(b.readyState=b.INIT)}if(!P&&v||(v=r().createObjectURL(t)),m)m.location.href=v;else{var n=e.open(v,"_blank");void 0==n&&s&&(e.location.href=v)}b.readyState=b.DONE,T(),f(v)},O=function(e){return function(){return b.readyState!==b.DONE?e.apply(this,arguments):void 0}},C={create:!0,exclusive:!1};return b.readyState=b.INIT,l||(l="download"),n?(v=r().createObjectURL(t),o.href=v,o.download=l,void setTimeout(function(){i(o),T(),f(v),b.readyState=b.DONE})):(e.chrome&&E&&E!==p&&(g=t.slice||t.webkitSlice,t=g.call(t,0,t.size,p),P=!0),a&&"download"!==l&&(l+=".download"),(E===p||a)&&(m=e),u?(c+=t.size,void u(e.TEMPORARY,c,O(function(e){e.root.getDirectory("saved",C,O(function(e){var r=function(){e.getFile(l,C,O(function(e){e.createWriter(O(function(r){r.onwriteend=function(t){m.location.href=e.toURL(),b.readyState=b.DONE,h(b,"writeend",t),f(e)},r.onerror=function(){var e=r.error;e.code!==e.ABORT_ERR&&w()},"writestart progress write abort".split(" ").forEach(function(e){r["on"+e]=b["on"+e]}),r.write(t),b.abort=function(){r.abort(),b.readyState=b.DONE},b.readyState=b.WRITING}),w)}),w)};e.getFile(l,{create:!1},O(function(e){e.remove(),r()}),O(function(e){e.code===e.NOT_FOUND_ERR?r():w()}))}),w)}),w)):void w())},m=v.prototype,g=function(e,t,r){return new v(e,t,r)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,r){return r||(e=y(e)),navigator.msSaveOrOpenBlob(e,t||"download")}:(m.abort=function(){var e=this;e.readyState=e.DONE,h(e,"abort")},m.readyState=m.INIT=0,m.WRITING=1,m.DONE=2,m.error=m.onwritestart=m.onprogress=m.onwrite=m.onabort=m.onerror=m.onwriteend=null,g)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||(void 0).content);"undefined"!=typeof e&&e.exports?e.exports.saveAs=i:null!==r(55)&&null!=r(56)&&(o=[],n=function(){return i}.apply(t,o),!(void 0!==n&&(e.exports=n)))},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(2),c=o(p),d=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.filter=this.filter.bind(this)}return i(t,e),s(t,[{key:"setDefaultDate",value:function(){var e="";if(this.props.defaultValue){var t=new Date(this.props.defaultValue);e=t.getFullYear()+"-"+("0"+(t.getMonth()+1)).slice(-2)+"-"+("0"+t.getDate()).slice(-2)}return e}},{key:"filter",value:function(e){var t=e.target.value;t?this.props.filterHandler(new Date(t),c["default"].FILTER_TYPE.DATE):this.props.filterHandler(null,c["default"].FILTER_TYPE.DATE)}},{key:"componentDidMount",value:function(){var e=this.refs.inputDate.defaultValue;e&&this.props.filterHandler(new Date(e),c["default"].FILTER_TYPE.DATE)}},{key:"render",value:function(){return l["default"].createElement("input",{ref:"inputDate",className:"filter date-filter form-control",type:"date",onChange:this.filter,defaultValue:this.setDefaultDate()})}}]),t}(l["default"].Component);d.propTypes={filterHandler:l["default"].PropTypes.func.isRequired,defaultValue:l["default"].PropTypes.object,columnName:l["default"].PropTypes.string},t["default"]=d,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(3),c=o(p),d=r(2),f=o(d),h=["=",">",">=","<","<=","!="],y=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.numberComparators=this.props.numberComparators||h,this.timeout=null,this.state={isPlaceholderSelected:void 0==this.props.defaultValue||void 0==this.props.defaultValue.number||this.props.options&&-1==this.props.options.indexOf(this.props.defaultValue.number)},this.onChangeNumber=this.onChangeNumber.bind(this),this.onChangeNumberSet=this.onChangeNumberSet.bind(this),this.onChangeComparator=this.onChangeComparator.bind(this)}return i(t,e),s(t,[{key:"onChangeNumber",value:function(e){if(""!==this.refs.numberFilterComparator.value){this.timeout&&clearTimeout(this.timeout);var t=this,r=e.target.value;this.timeout=setTimeout(function(){t.props.filterHandler({number:r,comparator:t.refs.numberFilterComparator.value},f["default"].FILTER_TYPE.NUMBER)},t.props.delay)}}},{key:"onChangeNumberSet",value:function(e){this.setState({isPlaceholderSelected:""===e.target.value}),""!==this.refs.numberFilterComparator.value&&this.props.filterHandler({number:e.target.value,comparator:this.refs.numberFilterComparator.value},f["default"].FILTER_TYPE.NUMBER)}},{key:"onChangeComparator",value:function(e){""!==this.refs.numberFilter.value&&this.props.filterHandler({number:this.refs.numberFilter.value,comparator:e.target.value},f["default"].FILTER_TYPE.NUMBER)}},{key:"getComparatorOptions",value:function(){var e=[];e.push(l["default"].createElement("option",{key:"-1"}));for(var t=0;t<this.numberComparators.length;t++)e.push(l["default"].createElement("option",{key:t,value:this.numberComparators[t]},this.numberComparators[t]));return e}},{key:"getNumberOptions",value:function(){var e=[],t=this.props.options;e.push(l["default"].createElement("option",{key:"-1",value:""},this.props.placeholder||"Select "+this.props.columnName+"..."));for(var r=0;r<t.length;r++)e.push(l["default"].createElement("option",{key:r,value:t[r]},t[r]));return e}},{key:"componentDidMount",value:function(){this.refs.numberFilterComparator.value&&this.refs.numberFilter.value&&this.props.filterHandler({number:this.refs.numberFilter.value,comparator:this.refs.numberFilterComparator.value},f["default"].FILTER_TYPE.NUMBER)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"render",value:function(){var e=(0,c["default"])("select-filter","number-filter-input","form-control",{"placeholder-selected":this.state.isPlaceholderSelected});return l["default"].createElement("div",{className:"filter number-filter"},l["default"].createElement("select",{ref:"numberFilterComparator",className:"number-filter-comparator form-control",onChange:this.onChangeComparator,defaultValue:this.props.defaultValue?this.props.defaultValue.comparator:""},this.getComparatorOptions()),this.props.options?l["default"].createElement("select",{ref:"numberFilter",className:e,onChange:this.onChangeNumberSet,defaultValue:this.props.defaultValue?this.props.defaultValue.number:""},this.getNumberOptions()):l["default"].createElement("input",{ref:"numberFilter",type:"number",className:"number-filter-input form-control",placeholder:this.props.placeholder||"Enter "+this.props.columnName+"...",onChange:this.onChangeNumber,defaultValue:this.props.defaultValue?this.props.defaultValue.number:""}))}}]),t}(l["default"].Component);y.propTypes={filterHandler:l["default"].PropTypes.func.isRequired,options:l["default"].PropTypes.arrayOf(l["default"].PropTypes.number),defaultValue:l["default"].PropTypes.shape({number:l["default"].PropTypes.number,comparator:l["default"].PropTypes.oneOf(h)}),delay:l["default"].PropTypes.number,numberComparators:function(e,t){if(e[t])for(var r=0;r<e[t].length;r++){for(var o=!1,n=0;n<h.length;n++)if(h[n]===e[t][r]){o=!0;break}if(!o)return new Error("Number comparator provided is not supported. Use only "+h)}},placeholder:l["default"].PropTypes.string,columnName:l["default"].PropTypes.string},y.defaultProps={delay:f["default"].FILTER_DELAY},t["default"]=y,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(3),c=o(p),d=r(2),f=o(d),h=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.filter=this.filter.bind(this),this.state={isPlaceholderSelected:void 0==this.props.defaultValue||!this.props.options.hasOwnProperty(this.props.defaultValue)}}return i(t,e),s(t,[{key:"filter",value:function(e){this.setState({isPlaceholderSelected:""===e.target.value}),this.props.filterHandler(e.target.value,f["default"].FILTER_TYPE.SELECT)}},{key:"getOptions",value:function(){var e=[],t=this.props.options;return e.push(l["default"].createElement("option",{key:"-1",value:""},this.props.placeholder||"Select "+this.props.columnName+"...")),Object.keys(t).map(function(r){e.push(l["default"].createElement("option",{key:r,value:r},t[r]))}),e}},{key:"componentDidMount",value:function(){this.refs.selectInput.value&&this.props.filterHandler(this.refs.selectInput.value,f["default"].FILTER_TYPE.SELECT)}},{key:"render",value:function(){var e=(0,c["default"])("filter","select-filter","form-control",{"placeholder-selected":this.state.isPlaceholderSelected});return l["default"].createElement("select",{ref:"selectInput",className:e,onChange:this.filter,defaultValue:void 0!=this.props.defaultValue?this.props.defaultValue:""},this.getOptions())}}]),t}(l["default"].Component);h.propTypes={filterHandler:l["default"].PropTypes.func.isRequired,options:l["default"].PropTypes.object.isRequired,placeholder:l["default"].PropTypes.string,columnName:l["default"].PropTypes.string},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(2),c=o(p),d=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.filter=this.filter.bind(this),this.timeout=null}return i(t,e),s(t,[{key:"filter",value:function(e){this.timeout&&clearTimeout(this.timeout);var t=this,r=e.target.value;this.timeout=setTimeout(function(){t.props.filterHandler(r,c["default"].FILTER_TYPE.TEXT)},t.props.delay)}},{key:"componentDidMount",value:function(){this.refs.inputText.defaultValue&&this.props.filterHandler(this.refs.inputText.defaultValue,c["default"].FILTER_TYPE.TEXT)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"render",value:function(){return l["default"].createElement("input",{ref:"inputText",className:"filter text-filter form-control",type:"text",onChange:this.filter,placeholder:this.props.placeholder||"Enter "+this.props.columnName+"...",defaultValue:this.props.defaultValue?this.props.defaultValue:""})}}]),t}(l["default"].Component);d.propTypes={filterHandler:l["default"].PropTypes.func.isRequired,defaultValue:l["default"].PropTypes.string,delay:l["default"].PropTypes.number,placeholder:l["default"].PropTypes.string,columnName:l["default"].PropTypes.string},d.defaultProps={delay:c["default"].FILTER_DELAY},t["default"]=d,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(3),c=o(p),d=function(e){function t(e){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return i(t,e),s(t,[{key:"pageBtnClick",value:function(e){e.preventDefault(),this.props.changePage(e.currentTarget.text)}},{key:"render",value:function(){var e=(0,c["default"])({active:this.props.active,disabled:this.props.disable,hidden:this.props.hidden});return l["default"].createElement("li",{className:e},l["default"].createElement("a",{href:"#",onClick:this.pageBtnClick.bind(this)},this.props.children))}}]),t}(l["default"].Component);d.propTypes={changePage:l["default"].PropTypes.func,active:l["default"].PropTypes.bool,disable:l["default"].PropTypes.bool},t["default"]=d,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(32),c=o(p),d=r(2),f=o(d),h=function(e){function t(){n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),s(t,[{key:"changePage",value:function(e){e=e==this.props.prePage?this.props.currPage-1<1?1:this.props.currPage-1:e==this.props.nextPage?this.props.currPage+1>this.totalPages?this.totalPages:this.props.currPage+1:e==this.props.lastPage?this.totalPages:e==this.props.firstPage?1:parseInt(e),e!=this.props.currPage&&this.props.changePage(e,this.props.sizePerPage)}},{key:"changeSizePerPage",value:function(e){e.preventDefault();var t=parseInt(e.currentTarget.text),r=this.props.currPage;t!=this.props.sizePerPage&&(this.totalPages=Math.ceil(this.props.dataSize/t),r>this.totalPages&&(r=this.totalPages),this.props.changePage(r,t),this.props.onSizePerPageList&&this.props.onSizePerPageList(t))}},{key:"render",value:function(){var e=this;this.totalPages=Math.ceil(this.props.dataSize/this.props.sizePerPage);var t=this.makePage(),r={"float":"right",marginTop:"0px"},o=this.props.sizePerPageList.map(function(t){return l["default"].createElement("li",{key:t,role:"presentation"},l["default"].createElement("a",{role:"menuitem",tabIndex:"-1",href:"#",onClick:e.changeSizePerPage.bind(e)},t))});return l["default"].createElement("div",{className:"row",style:{marginTop:15}},this.props.sizePerPageList.length>1?l["default"].createElement("div",null,l["default"].createElement("div",{className:"col-md-6"},l["default"].createElement("div",{className:"dropdown"},l["default"].createElement("button",{className:"btn btn-default dropdown-toggle",type:"button",id:"pageDropDown","data-toggle":"dropdown","aria-expanded":"true"},this.props.sizePerPage,l["default"].createElement("span",null," ",l["default"].createElement("span",{className:"caret"}))),l["default"].createElement("ul",{className:"dropdown-menu",role:"menu","aria-labelledby":"pageDropDown"},o))),l["default"].createElement("div",{className:"col-md-6"},l["default"].createElement("ul",{className:"pagination",style:r},t))):l["default"].createElement("div",{className:"col-md-12"},l["default"].createElement("ul",{className:"pagination",style:r},t)))}},{key:"makePage",value:function(){var e=this.getPages();return e.map(function(e){var t=e===this.props.currPage,r=!1,o=!1;return 1!=this.props.currPage||e!==this.props.firstPage&&e!==this.props.prePage||(r=!0,o=!0),this.props.currPage!=this.totalPages||e!==this.props.nextPage&&e!==this.props.lastPage||(r=!0,o=!0),l["default"].createElement(c["default"],{changePage:this.changePage.bind(this),active:t,disable:r,hidden:o,key:e},e)},this)}},{key:"getPages",value:function(){var e=1,t=this.totalPages;e=Math.max(this.props.currPage-Math.floor(this.props.paginationSize/2),1),t=e+this.props.paginationSize-1,t>this.totalPages&&(t=this.totalPages,e=t-this.props.paginationSize+1);var r;r=1!=e&&this.totalPages>this.props.paginationSize?[this.props.firstPage,this.props.prePage]:this.totalPages>1?[this.props.prePage]:[];for(var o=e;t>=o;o++)o>0&&r.push(o);return t!=this.totalPages?(r.push(this.props.nextPage),r.push(this.props.lastPage)):this.totalPages>1&&r.push(this.props.nextPage),r}},{key:"getCurrentPage",value:function(){return this.props.currPage}},{key:"getSizePerPage",value:function(){return this.props.sizePerPage}}]),t}(l["default"].Component);h.propTypes={currPage:l["default"].PropTypes.number,sizePerPage:l["default"].PropTypes.number,dataSize:l["default"].PropTypes.number,changePage:l["default"].PropTypes.func,sizePerPageList:l["default"].PropTypes.array,paginationSize:l["default"].PropTypes.number,remote:l["default"].PropTypes.bool,onSizePerPageList:l["default"].PropTypes.func,prePage:l["default"].PropTypes.string},h.defaultProps={sizePerPage:f["default"].SIZE_PER_PAGE},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),a=function(e,t,r){for(var o=!0;o;){var n=e,i=t,s=r;o=!1,null===n&&(n=Function.prototype);var a=Object.getOwnPropertyDescriptor(n,i);if(void 0!==a){if("value"in a)return a.value;var u=a.get;if(void 0===u)return;return u.call(s)}var l=Object.getPrototypeOf(n);if(null===l)return;e=l,t=i,r=s,o=!0,a=l=void 0}},u=r(1),l=o(u),p=r(3),c=o(p),d=r(2),f=o(d),h=r(6),y=o(h),v=r(7),m=o(v),g=r(9),b=(o(g),function(e){function t(e){var r=this;n(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.handleShowOnlyToggle=function(e){r.setState({showSelected:!r.state.showSelected}),r.props.onShowOnlySelected()},this.handleClearBtnClick=function(){r.refs.seachInput.value="",r.props.onSearch("")},this.timeouteClear=0,this.state={isInsertRowTrigger:!0,validateState:null,shakeEditor:!1,showSelected:!1}}return i(t,e),s(t,[{key:"componentWillUnmount",value:function(){this.clearTimeout()}},{key:"clearTimeout",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){this.timeouteClear&&(clearTimeout(this.timeouteClear),this.timeouteClear=0)})},{key:"checkAndParseForm",value:function(){var e,t,r=this,o={},n=!0,i={};return this.props.columns.forEach(function(r,s){if(r.autoValue)e="function"==typeof r.autoValue?r.autoValue():"autovalue-"+(new Date).getTime();else{var a=this.refs[r.field+s];if(e="undefined"!=typeof a?a.value:!0,r.editable&&"checkbox"==r.editable.type){var u=a.value.split(":");e=a.checked?u[0]:u[1]}r.editable&&r.editable.validator&&(t=r.editable.validator(e),t!==!0&&(n=!1,i[r.field]=t))}o[r.field]=e},this),n?o:(r.clearTimeout(),this.setState({validateState:i,shakeEditor:!0}),r.refs.notifier.notice("error","Form validate errors, please checking!","Pressed ESC can cancel"),r.timeouteClear=setTimeout(function(){r.setState({shakeEditor:!1})},300),null)}},{key:"handleSaveBtnClick",value:function(e){var t=this,r=this.checkAndParseForm();r&&this.props.onAddRow(r).then(function(e){if(e){var r="";try{e.errors.map(function(e){r+=e.message+". "})}catch(o){console.log(o),r+=e.toString()}var n=t;n.refs.notifier.notice("error",r,"Pressed ESC can cancel"),n.clearTimeout(),n.setState({shakeEditor:!0,validateState:"this is hack for prevent bootstrap modal hide"}),n.timeouteClear=setTimeout(function(){n.setState({shakeEditor:!1})},300)}else t.setState({validateState:null,shakeEditor:!1},function(){for(var e=document.querySelectorAll(".modal"),t=0;t<e.length;t++)e[t].click()}),t.refs.form.reset()})}},{key:"handleDropRowBtnClick",value:function(e){this.props.onDropRow()}},{key:"handleCloseBtn",value:function(e){this.refs.warning.style.display="none"}},{key:"handleKeyUp",value:function(e){this.props.onSearch(e.currentTarget.value)}},{key:"handleExportCSV",value:function(){this.props.onExportCSV()}},{key:"render",value:function(){var e="bs-table-modal-sm"+(new Date).getTime(),t=this.props.enableInsert?l["default"].createElement("button",{type:"button",onClick:this.props.onAddRowBegin,className:"btn btn-info react-bs-table-add-btn","data-toggle":"modal","data-target":"."+e},l["default"].createElement("i",{className:"glyphicon glyphicon-plus"})," New"):null,r=this.props.enableDelete?l["default"].createElement("button",{type:"button",className:"btn btn-warning react-bs-table-del-btn","data-toggle":"tooltip","data-placement":"right",title:"Drop selected row",onClick:this.handleDropRowBtnClick.bind(this)},l["default"].createElement("i",{className:"glyphicon glyphicon-trash"})," Delete"):null,o=this.renderSearchPanel(),n=this.props.enableShowOnlySelected?l["default"].createElement("button",{type:"button",onClick:this.handleShowOnlyToggle.bind(this),className:"btn btn-primary","data-toggle":"button","aria-pressed":"false"},this.state.showSelected?f["default"].SHOW_ALL:f["default"].SHOW_ONLY_SELECT):null,i=this.props.enableInsert?this.renderInsertRowModal(e):null,s=this.props.enableExportCSV?l["default"].createElement("button",{type:"button",className:"btn btn-success",onClick:this.handleExportCSV.bind(this)},l["default"].createElement("i",{className:"glyphicon glyphicon-export"})," Export to CSV"):null;return l["default"].createElement("div",{className:"row"},l["default"].createElement("div",{className:"col-xs-12 col-sm-6 col-md-6 col-lg-8"},l["default"].createElement("div",{className:"btn-group btn-group-sm",role:"group"},s,t,r,n)),l["default"].createElement("div",{className:"col-xs-12 col-sm-6 col-md-6 col-lg-4"},o),l["default"].createElement(m["default"],{ref:"notifier"}),i)}},{key:"renderSearchPanel",value:function(){if(this.props.enableSearch){var e="form-group form-group-sm",t=null;return this.props.clearSearch&&(t=l["default"].createElement("span",{className:"input-group-btn"},l["default"].createElement("button",{className:"btn btn-default",type:"button",onClick:this.handleClearBtnClick},"Clear")),e="form-group form-group-sm input-group input-group-sm"),l["default"].createElement("div",{className:e},l["default"].createElement("input",{ref:"seachInput",className:"form-control",type:"text",placeholder:this.props.searchPlaceholder?this.props.searchPlaceholder:"Search",onKeyUp:this.handleKeyUp.bind(this)}),t)}return null}},{key:"renderInsertRowModal",value:function(e){var t=this.state.validateState||{},r=this.props.columns.map(function(e,r){var o=e.editable,n=e.format,i={ref:e.field+r,placeholder:o.placeholder?o.placeholder:e.name};if(e.autoValue)return null;var s=t[e.field]?l["default"].createElement("span",{className:"help-block bg-danger"},t[e.field]):null,a={display:e.hiddenInPopup?"none":"block"};return l["default"].createElement("div",{className:"form-group",key:e.field,style:a},l["default"].createElement("label",null,e.name),(0,y["default"])(o,i,n,""),s)}),o=(0,c["default"])("modal","fade",e,{"in":this.state.shakeEditor||this.state.validateState}),n=(0,c["default"])("modal-dialog","modal-sm",{animated:this.state.shakeEditor,shake:this.state.shakeEditor});return l["default"].createElement("div",{ref:"modal",className:o,tabIndex:"-1",role:"dialog"},l["default"].createElement("div",{className:n},l["default"].createElement("div",{className:"modal-content"},l["default"].createElement("div",{className:"modal-header"},l["default"].createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},l["default"].createElement("span",{"aria-hidden":"true"},"×")),l["default"].createElement("h4",{className:"modal-title"},"New Record")),l["default"].createElement("div",{className:"modal-body"},l["default"].createElement("form",{ref:"form"},r)),l["default"].createElement("div",{className:"modal-footer"},l["default"].createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),l["default"].createElement("button",{type:"button",className:"btn btn-success",onClick:this.handleSaveBtnClick.bind(this)},"Save")))))}}]),t}(l["default"].Component));b.propTypes={onAddRow:l["default"].PropTypes.func,onDropRow:l["default"].PropTypes.func,onShowOnlySelected:l["default"].PropTypes.func,enableInsert:l["default"].PropTypes.bool,enableDelete:l["default"].PropTypes.bool,enableSearch:l["default"].PropTypes.bool,enableShowOnlySelected:l["default"].PropTypes.bool,columns:l["default"].PropTypes.array,searchPlaceholder:l["default"].PropTypes.string,clearSearch:l["default"].PropTypes.bool},b.defaultProps={enableInsert:!1,enableDelete:!1,enableSearch:!1,enableShowOnlySelected:!1,clearSearch:!1},t["default"]=b,e.exports=t["default"]},function(e,t,r){t=e.exports=r(36)(),t.push([e.id,'.rc-switch{position:relative;display:inline-block;box-sizing:border-box;width:44px;height:22px;line-height:20px;vertical-align:middle;border-radius:20px 20px;border:1px solid #ccc;background-color:#ccc;cursor:pointer;transition:all .3s cubic-bezier(.35,0,.25,1)}.rc-switch-inner{color:#fff;font-size:12px;position:absolute;left:24px}.rc-switch:after{position:absolute;width:18px;height:18px;left:2px;top:1px;border-radius:50% 50%;background-color:#fff;content:" ";cursor:pointer;box-shadow:0 2px 5px rgba(0,0,0,.26);-webkit-transform:scale(1);transform:scale(1);transition:left .3s cubic-bezier(.35,0,.25,1);-webkit-animation-timing-function:cubic-bezier(.35,0,.25,1);animation-timing-function:cubic-bezier(.35,0,.25,1);-webkit-animation-duration:.3s;animation-duration:.3s;-webkit-animation-name:rcSwitchOff;animation-name:rcSwitchOff}.rc-switch:hover:after{-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-name:rcSwitchOn;animation-name:rcSwitchOn}.rc-switch-checked{border:1px solid #87d068;background-color:#87d068}.rc-switch-checked .rc-switch-inner{left:6px}.rc-switch-checked:after{left:22px}.rc-switch-disabled{cursor:no-drop;background:#ccc;border-color:#ccc}.rc-switch-disabled:after{background:#9e9e9e;-webkit-animation-name:none;animation-name:none;cursor:no-drop}.rc-switch-disabled:hover:after{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-name:none;animation-name:none}.rc-switch-label{display:inline-block;line-height:20px;font-size:14px;padding-left:10px;vertical-align:middle;white-space:normal;pointer-events:none;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}@-webkit-keyframes rcSwitchOn{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.25);transform:scale(1.25)}to{-webkit-transform:scale(1.1);transform:scale(1.1)}}@keyframes rcSwitchOn{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.25);transform:scale(1.25)}to{-webkit-transform:scale(1.1);transform:scale(1.1)}}@-webkit-keyframes rcSwitchOff{0%{-webkit-transform:scale(1.1);transform:scale(1.1)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes rcSwitchOff{0%{-webkit-transform:scale(1.1);transform:scale(1.1)}to{-webkit-transform:scale(1);transform:scale(1)}}',""]);
},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var r=this[t];r[2]?e.push("@media "+r[2]+"{"+r[1]+"}"):e.push(r[1])}return e.join("")},e.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var o={},n=0;n<this.length;n++){var i=this[n][0];"number"==typeof i&&(o[i]=!0)}for(n=0;n<t.length;n++){var s=t[n];"number"==typeof s[0]&&o[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="("+s[2]+") and ("+r+")"),e.push(s))}},e}},function(e,t,r){"use strict";function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(){}var i=r(1),s=r(3),a=i.createClass({displayName:"Switch",propTypes:{className:i.PropTypes.string,prefixCls:i.PropTypes.string,disabled:i.PropTypes.bool,style:i.PropTypes.object,checkedChildren:i.PropTypes.any,unCheckedChildren:i.PropTypes.any,onChange:i.PropTypes.func},getDefaultProps:function(){return{prefixCls:"rc-switch",style:{},checkedChildren:null,unCheckedChildren:null,className:"",defaultChecked:!1,onChange:n}},getInitialState:function(){var e=this.props,t=!1;return t="checked"in e?!!e.checked:!!e.defaultChecked,{checked:t}},componentWillReceiveProps:function(e){"checked"in e&&this.setState({checked:!!e.checked})},toggle:function(){var e=!this.state.checked;"checked"in this.props||this.setState({checked:e}),this.props.onChange(e)},render:function(){var e,t=this.props,r=t.className,a=t.prefixCls,u=t.disabled,l=t.style,p=t.checkedChildren,c=t.unCheckedChildren,d=this.state.checked,f=s((e={},o(e,r,!!r),o(e,a,!0),o(e,a+"-checked",d),o(e,a+"-disabled",u),e));return i.createElement("span",{className:f,onClick:u?n:this.toggle,style:l},i.createElement("span",{className:a+"-inner"},d?p:c))}});e.exports=a},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e){return e&&"object"!=typeof e&&(e={}),e?e:null}function i(e,t,r){e&&(e[t]=r)}function s(e,t){if(e)for(var r=t.length;r>=0;--r){var o=t.slice(0,r);if(e[o]&&(t===o||e[o].complete))return e[o]}}function a(e,t){return e&&"function"==typeof e.then?e.then(function(e){t(null,e)},function(e){t(e)}):void 0}var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},l=r(1),p=o(l),c=r(10),d=o(c),f=r(11),h=o(f),y=0,v=p["default"].PropTypes.oneOfType([p["default"].PropTypes.string,p["default"].PropTypes.node]),m=p["default"].createClass({displayName:"Async",propTypes:{cache:p["default"].PropTypes.any,ignoreAccents:p["default"].PropTypes.bool,ignoreCase:p["default"].PropTypes.bool,isLoading:p["default"].PropTypes.bool,loadOptions:p["default"].PropTypes.func.isRequired,loadingPlaceholder:p["default"].PropTypes.string,minimumInput:p["default"].PropTypes.number,noResultsText:p["default"].PropTypes.string,placeholder:v,searchPromptText:p["default"].PropTypes.string,searchingText:p["default"].PropTypes.string},getDefaultProps:function(){return{cache:!0,ignoreAccents:!0,ignoreCase:!0,loadingPlaceholder:"Loading...",minimumInput:0,searchingText:"Searching...",searchPromptText:"Type to search"}},getInitialState:function(){return{cache:n(this.props.cache),isLoading:!1,options:[]}},componentWillMount:function(){this._lastInput=""},componentDidMount:function(){this.loadOptions("")},componentWillReceiveProps:function(e){e.cache!==this.props.cache&&this.setState({cache:n(e.cache)})},focus:function(){this.refs.select.focus()},resetState:function(){this._currentRequestId=-1,this.setState({isLoading:!1,options:[]})},getResponseHandler:function(e){var t=this,r=this._currentRequestId=y++;return function(o,n){if(o)throw o;t.isMounted()&&(i(t.state.cache,e,n),r===t._currentRequestId&&t.setState({isLoading:!1,options:n&&n.options||[]}))}},loadOptions:function(e){if(this.props.ignoreAccents&&(e=(0,h["default"])(e)),this.props.ignoreCase&&(e=e.toLowerCase()),this._lastInput=e,e.length<this.props.minimumInput)return this.resetState();var t=s(this.state.cache,e);if(t)return this.setState({options:t.options});this.setState({isLoading:!0});var r=this.getResponseHandler(e);return a(this.props.loadOptions(e,r),r)},render:function(){var e=this.props.noResultsText,t=this.state,r=t.isLoading,o=t.options;this.props.isLoading&&(r=!0);var n=r?this.props.loadingPlaceholder:this.props.placeholder;return o.length||(this._lastInput.length<this.props.minimumInput&&(e=this.props.searchPromptText),r&&(e=this.props.searchingText)),p["default"].createElement(d["default"],u({},this.props,{ref:"select",isLoading:r,noResultsText:e,onInputChange:this.loadOptions,options:o,placeholder:n}))}});e.exports=m},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var n=r(1),i=o(n),s=r(3),a=o(s),u=i["default"].createClass({displayName:"Option",propTypes:{children:i["default"].PropTypes.node,className:i["default"].PropTypes.string,isDisabled:i["default"].PropTypes.bool,isFocused:i["default"].PropTypes.bool,isSelected:i["default"].PropTypes.bool,onFocus:i["default"].PropTypes.func,onSelect:i["default"].PropTypes.func,onUnfocus:i["default"].PropTypes.func,option:i["default"].PropTypes.object.isRequired},blockEvent:function(e){e.preventDefault(),e.stopPropagation(),"A"===e.target.tagName&&"href"in e.target&&(e.target.target?window.open(e.target.href,e.target.target):window.location.href=e.target.href)},handleMouseDown:function(e){e.preventDefault(),e.stopPropagation(),this.props.onSelect(this.props.option,e)},handleMouseEnter:function(e){this.onFocus(e)},handleMouseMove:function(e){this.onFocus(e)},handleTouchEnd:function(e){this.dragging||this.handleMouseDown(e)},handleTouchMove:function(e){this.dragging=!0},handleTouchStart:function(e){this.dragging=!1},onFocus:function(e){this.props.isFocused||this.props.onFocus(this.props.option,e)},render:function(){var e=this.props.option,t=(0,a["default"])(this.props.className,e.className);return e.disabled?i["default"].createElement("div",{className:t,onMouseDown:this.blockEvent,onClick:this.blockEvent},this.props.children):i["default"].createElement("div",{className:t,style:e.style,onMouseDown:this.handleMouseDown,onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEnd,title:e.title},this.props.children)}});e.exports=u},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var n=r(1),i=o(n),s=r(3),a=o(s),u=i["default"].createClass({displayName:"Value",propTypes:{children:i["default"].PropTypes.node,disabled:i["default"].PropTypes.bool,onClick:i["default"].PropTypes.func,onRemove:i["default"].PropTypes.func,value:i["default"].PropTypes.object.isRequired},handleMouseDown:function(e){return"mousedown"!==e.type||0===e.button?this.props.onClick?(e.stopPropagation(),void this.props.onClick(this.props.value,e)):void(this.props.value.href&&e.stopPropagation()):void 0},onRemove:function(e){e.preventDefault(),e.stopPropagation(),this.props.onRemove(this.props.value)},handleTouchEndRemove:function(e){this.dragging||this.onRemove(e)},handleTouchMove:function(e){this.dragging=!0},handleTouchStart:function(e){this.dragging=!1},renderRemoveIcon:function(){return!this.props.disabled&&this.props.onRemove?i["default"].createElement("span",{className:"Select-value-icon",onMouseDown:this.onRemove,onTouchEnd:this.handleTouchEndRemove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},"×"):void 0},renderLabel:function(){var e="Select-value-label";return this.props.onClick||this.props.value.href?i["default"].createElement("a",{className:e,href:this.props.value.href,target:this.props.value.target,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleMouseDown},this.props.children):i["default"].createElement("span",{className:e},this.props.children)},render:function(){return i["default"].createElement("div",{className:(0,a["default"])("Select-value",this.props.value.className),style:this.props.value.style,title:this.props.value.title},this.renderRemoveIcon(),this.renderLabel())}});e.exports=u},function(e,t,r){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},n=r(1),i={position:"absolute",visibility:"hidden",height:0,width:0,overflow:"scroll",whiteSpace:"nowrap"},s="undefined"!=typeof window?function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)}}().bind(window):void 0,a=n.createClass({displayName:"AutosizeInput",propTypes:{value:n.PropTypes.any,defaultValue:n.PropTypes.any,onChange:n.PropTypes.func,style:n.PropTypes.object,className:n.PropTypes.string,minWidth:n.PropTypes.oneOfType([n.PropTypes.number,n.PropTypes.string]),inputStyle:n.PropTypes.object,inputClassName:n.PropTypes.string},getDefaultProps:function(){return{minWidth:1}},getInitialState:function(){return{inputWidth:this.props.minWidth}},componentDidMount:function(){this.copyInputStyles(),this.updateInputWidth()},componentDidUpdate:function(){this.queueUpdateInputWidth()},copyInputStyles:function(){if(this.isMounted()&&window.getComputedStyle){var e=window.getComputedStyle(this.refs.input),t=this.refs.sizer;if(t.style.fontSize=e.fontSize,t.style.fontFamily=e.fontFamily,t.style.fontWeight=e.fontWeight,t.style.fontStyle=e.fontStyle,t.style.letterSpacing=e.letterSpacing,this.props.placeholder){var r=this.refs.placeholderSizer;r.style.fontSize=e.fontSize,r.style.fontFamily=e.fontFamily,r.style.fontWeight=e.fontWeight,r.style.fontStyle=e.fontStyle,r.style.letterSpacing=e.letterSpacing}}},queueUpdateInputWidth:function(){s(this.updateInputWidth)},updateInputWidth:function(){if(this.isMounted()&&"undefined"!=typeof this.refs.sizer.scrollWidth){var e=void 0;e=this.props.placeholder?Math.max(this.refs.sizer.scrollWidth,this.refs.placeholderSizer.scrollWidth)+2:this.refs.sizer.scrollWidth+2,e<this.props.minWidth&&(e=this.props.minWidth),e!==this.state.inputWidth&&this.setState({inputWidth:e})}},getInput:function(){return this.refs.input},focus:function(){this.refs.input.focus()},blur:function(){this.refs.input.blur()},select:function(){this.refs.input.select()},render:function(){var e=(this.props.defaultValue||this.props.value||"").replace(/\&/g,"&amp;").replace(/ /g,"&nbsp;").replace(/\</g,"&lt;").replace(/\>/g,"&gt;"),t=this.props.style||{};t.display||(t.display="inline-block");var r=o({},this.props.inputStyle);r.width=this.state.inputWidth,r.boxSizing="content-box";var s=this.props.placeholder?n.createElement("div",{ref:"placeholderSizer",style:i},this.props.placeholder):null;return n.createElement("div",{className:this.props.className,style:t},n.createElement("input",o({},this.props,{ref:"input",className:this.props.inputClassName,style:r})),n.createElement("div",{ref:"sizer",style:i,dangerouslySetInnerHTML:{__html:e}}),s)}});e.exports=a},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},l=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}();Object.defineProperty(t,"__esModule",{value:!0});var p=r(1),c=o(p),d=r(13),f=o(d),h=r(12),y=o(h),v=function(e){function t(){var e,r,o,n;i(this,t);for(var a=arguments.length,u=Array(a),l=0;a>l;l++)u[l]=arguments[l];return r=o=s(this,(e=Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),o.state={toasts:[],toastId:0,previousMessage:null},n=r,s(o,n)}return a(t,e),l(t,[{key:"error",value:function(e,t,r){this._notify(this.props.toastType.error,e,t,r)}},{key:"info",value:function(e,t,r){this._notify(this.props.toastType.info,e,t,r)}},{key:"success",value:function(e,t,r){this._notify(this.props.toastType.success,e,t,r)}},{key:"warning",value:function(e,t,r){this._notify(this.props.toastType.warning,e,t,r)}},{key:"clear",value:function(){var e=this;Object.keys(this.refs).forEach(function(t){e.refs[t].hideToast(!1)})}},{key:"_notify",value:function(e,t,r){var o=this,i=arguments.length<=3||void 0===arguments[3]?{}:arguments[3];if(!this.props.preventDuplicates||this.state.previousMessage!==t){var s=this.state.toastId++,a=s,u=(0,f["default"])(i,{$merge:{type:e,title:r,message:t,toastId:a,key:s,ref:"toasts__"+s,handleOnClick:function(e){return"function"==typeof i.handleOnClick&&i.handleOnClick(),o._handle_toast_on_click(e)},handleRemove:this._handle_toast_remove.bind(this)}}),l=n({},""+(this.props.newestOnTop?"$unshift":"$push"),[u]),p=(0,f["default"])(this.state,{toasts:l,previousMessage:{$set:t}});this.setState(p)}}},{key:"_handle_toast_on_click",value:function(e){this.props.onClick(e),e.defaultPrevented||(e.preventDefault(),e.stopPropagation())}},{key:"_handle_toast_remove",value:function(e){var t=this,r=""+(this.props.newestOnTop?"reduceRight":"reduce");this.state.toasts[r](function(r,o,n){return r||o.toastId!==e?!1:(t.setState((0,f["default"])(t.state,{toasts:{$splice:[[n,1]]}})),!0)},!1)}},{key:"render",value:function(){var e=this;return c["default"].createElement("div",u({},this.props,{"aria-live":"polite",role:"alert"}),this.state.toasts.map(function(t){return e.props.toastMessageFactory(t)}))}}]),t}(p.Component);v.propTypes={toastType:p.PropTypes.shape({error:p.PropTypes.string,info:p.PropTypes.string,success:p.PropTypes.string,warning:p.PropTypes.string}).isRequired,id:p.PropTypes.string.isRequired,toastMessageFactory:p.PropTypes.func.isRequired,preventDuplicates:p.PropTypes.bool.isRequired,newestOnTop:p.PropTypes.bool.isRequired,onClick:p.PropTypes.func.isRequired},v.defaultProps={toastType:{error:"error",info:"info",success:"success",warning:"warning"},id:"toast-container",toastMessageFactory:c["default"].createFactory(y["default"]),preventDuplicates:!1,newestOnTop:!0,onClick:function(){}},t["default"]=v},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(48),i=o(n),s=r(4),a=o(s),u=r(46),l=o(u),p=17,c=Object.prototype.toString;t["default"]={getDefaultProps:function(){return{transition:null,showAnimation:"animated bounceIn",hideAnimation:"animated bounceOut",timeOut:5e3,extendedTimeOut:1e3}},componentWillMount:function(){this.classNameQueue=[],this.isHiding=!1,this.intervalId=null},componentDidMount:function(){var e=this;this._is_mounted=!0,this._show();var t=a["default"].findDOMNode(this),r=function o(){e.isHiding&&(e._set_is_hiding(!1),i["default"].removeEndEventListener(t,o),e._handle_remove())};i["default"].addEndEventListener(t,r),this.props.timeOut>0&&this._set_interval_id(setTimeout(this.hideToast,this.props.timeOut))},componentWillUnmount:function(){this._is_mounted=!1,this.intervalId&&clearTimeout(this.intervalId)},_set_transition:function(e){var t=e?"leave":"enter",r=a["default"].findDOMNode(this),o=this.props.transition+"-"+t,n=o+"-active",s=function u(e){if(!e||e.target===r){var t=(0,l["default"])(r);t.remove(o),t.remove(n),i["default"].removeEndEventListener(r,u)}};i["default"].addEndEventListener(r,s),(0,l["default"])(r).add(o),this._queue_class(n)},_clear_transition:function(e){var t=a["default"].findDOMNode(this),r=e?"leave":"enter",o=this.props.transition+"-"+r,n=o+"-active",i=(0,l["default"])(t);i.remove(o),i.remove(n)},_set_animation:function(e){var t=a["default"].findDOMNode(this),r=this._get_animation_classes(e),o=function n(e){e&&e.target!==t||(r.forEach(function(e){return(0,l["default"])(t).remove(e)}),i["default"].removeEndEventListener(t,n))};i["default"].addEndEventListener(t,o),r.forEach(function(e){return(0,l["default"])(t).add(e)})},_get_animation_classes:function(e){var t=e?this.props.hideAnimation:this.props.showAnimation;return"[object Array]"===c.call(t)?t:"string"==typeof t?t.split(" "):void 0},_clear_animation:function(e){var t=a["default"].findDOMNode(this),r=this._get_animation_classes(e);r.forEach(function(e){return(0,l["default"])(t).remove(e)})},_queue_class:function(e){this.classNameQueue.push(e),this.timeout||(this.timeout=setTimeout(this._flush_class_name_queue,p))},_flush_class_name_queue:function(){var e=this;this._is_mounted&&!function(){var t=a["default"].findDOMNode(e);e.classNameQueue.forEach(function(e){return(0,l["default"])(t).add(e)})}(),this.classNameQueue.length=0,this.timeout=null},_show:function(){this.props.transition?this._set_transition():this.props.showAnimation&&this._set_animation()},handleMouseEnter:function(){clearTimeout(this.intervalId),this._set_interval_id(null),this.isHiding&&(this._set_is_hiding(!1),this.props.hideAnimation?this._clear_animation(!0):this.props.transition&&this._clear_transition(!0))},handleMouseLeave:function(){!this.isHiding&&(this.props.timeOut>0||this.props.extendedTimeOut>0)&&this._set_interval_id(setTimeout(this.hideToast,this.props.extendedTimeOut))},hideToast:function(e){this.isHiding||null===this.intervalId&&!e||(this._set_is_hiding(!0),this.props.transition?this._set_transition(!0):this.props.hideAnimation?this._set_animation(!0):this._handle_remove())},_set_interval_id:function(e){this.intervalId=e},_set_is_hiding:function(e){this.isHiding=e}}},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){e[t.showMethod]({duration:t.showDuration,easing:t.showEasing})}Object.defineProperty(t,"__esModule",{value:!0});var i=r(4),s=o(i);t["default"]={getDefaultProps:function(){return{style:{display:"none"},showMethod:"fadeIn",showDuration:300,showEasing:"swing",hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",timeOut:5e3,extendedTimeOut:1e3}},getInitialState:function(){return{intervalId:null,isHiding:!1}},componentDidMount:function(){n(this._get_$_node(),this.props),this.props.timeOut>0&&this._set_interval_id(setTimeout(this.hideToast,this.props.timeOut))},handleMouseEnter:function(){clearTimeout(this.state.intervalId),this._set_interval_id(null),this._set_is_hiding(!1),n(this._get_$_node().stop(!0,!0),this.props)},handleMouseLeave:function(){!this.state.isHiding&&(this.props.timeOut>0||this.props.extendedTimeOut>0)&&this._set_interval_id(setTimeout(this.hideToast,this.props.extendedTimeOut))},hideToast:function(e){this.state.isHiding||null===this.state.intervalId&&!e||(this.setState({isHiding:!0}),this._get_$_node()[this.props.hideMethod]({duration:this.props.hideDuration,easing:this.props.hideEasing,complete:this._handle_remove}))},_get_$_node:function(){return jQuery(s["default"].findDOMNode(this))},_set_interval_id:function(e){this.setState({intervalId:e})},_set_is_hiding:function(e){this.setState({isHiding:e})}}},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.ToastMessage=t.ToastContainer=void 0;var n=r(42),i=o(n),s=r(12),a=o(s);t.ToastContainer=i["default"],t.ToastMessage=a["default"]},function(e,t){function r(e,t){if(e.indexOf)return e.indexOf(t);for(var r=0,o=e.length;o>r;r++)if(e[r]===t)return r;return-1}function o(e){if(!(this instanceof o))return new o(e);e||(e={}),e.nodeType&&(e={el:e}),this.opts=e,this.el=e.el||document.body,"object"!=typeof this.el&&(this.el=document.querySelector(this.el))}e.exports=function(e){return new o(e)},o.prototype.add=function(e){var t=this.el;if(t){if(""===t.className)return t.className=e;var o=t.className.split(" ");return r(o,e)>-1?o:(o.push(e),t.className=o.join(" "),o)}},o.prototype.remove=function(e){var t=this.el;if(t&&""!==t.className){var o=t.className.split(" "),n=r(o,e);return n>-1&&o.splice(n,1),t.className=o.join(" "),o}},o.prototype.has=function(e){var t=this.el;if(t){var o=t.className.split(" ");return r(o,e)>-1}},o.prototype.toggle=function(e){var t=this.el;t&&(this.has(e)?this.remove(e):this.add(e))}},function(e,t){"use strict";function r(e,t){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var r=Object(e),o=Object.prototype.hasOwnProperty,n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i){var s=Object(i);for(var a in s)o.call(s,a)&&(r[a]=s[a])}}return r}e.exports=r},function(e,t,r){"use strict";function o(){var e=document.createElement("div"),t=e.style;"AnimationEvent"in window||delete a.animationend.animation,"TransitionEvent"in window||delete a.transitionend.transition;for(var r in a){var o=a[r];for(var n in o)if(n in t){u.push(o[n]);break}}}function n(e,t,r){e.addEventListener(t,r,!1)}function i(e,t,r){e.removeEventListener(t,r,!1)}var s=r(50),a={transitionend:{transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"mozTransitionEnd",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd"},animationend:{animation:"animationend",WebkitAnimation:"webkitAnimationEnd",MozAnimation:"mozAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd"}},u=[];s.canUseDOM&&o();var l={addEndEventListener:function(e,t){return 0===u.length?void window.setTimeout(t,0):void u.forEach(function(r){n(e,r,t)})},removeEndEventListener:function(e,t){0!==u.length&&u.forEach(function(r){i(e,r,t)})}};e.exports=l},function(e,t,r){(function(t){"use strict";function o(e){return Array.isArray(e)?e.concat():e&&"object"==typeof e?s(new e.constructor,e):e}function n(e,r,o){Array.isArray(e)?void 0:"production"!==t.env.NODE_ENV?u(!1,"update(): expected target of %s to be an array; got %s.",o,e):u(!1);var n=r[o];Array.isArray(n)?void 0:"production"!==t.env.NODE_ENV?u(!1,"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",o,n):u(!1)}function i(e,r){if("object"!=typeof r?"production"!==t.env.NODE_ENV?u(!1,"update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?",v.join(", "),f):u(!1):void 0,l.call(r,f))return 1!==Object.keys(r).length?"production"!==t.env.NODE_ENV?u(!1,"Cannot have more than one key in an object with %s",f):u(!1):void 0,r[f];var a=o(e);if(l.call(r,h)){var g=r[h];g&&"object"==typeof g?void 0:"production"!==t.env.NODE_ENV?u(!1,"update(): %s expects a spec of type 'object'; got %s",h,g):u(!1),a&&"object"==typeof a?void 0:"production"!==t.env.NODE_ENV?u(!1,"update(): %s expects a target of type 'object'; got %s",h,a):u(!1),s(a,r[h])}l.call(r,p)&&(n(e,r,p),r[p].forEach(function(e){a.push(e)})),l.call(r,c)&&(n(e,r,c),r[c].forEach(function(e){a.unshift(e)})),l.call(r,d)&&(Array.isArray(e)?void 0:"production"!==t.env.NODE_ENV?u(!1,"Expected %s target to be an array; got %s",d,e):u(!1),Array.isArray(r[d])?void 0:"production"!==t.env.NODE_ENV?u(!1,"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",d,r[d]):u(!1),r[d].forEach(function(e){Array.isArray(e)?void 0:"production"!==t.env.NODE_ENV?u(!1,"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",d,r[d]):u(!1),a.splice.apply(a,e)})),l.call(r,y)&&("function"!=typeof r[y]?"production"!==t.env.NODE_ENV?u(!1,"update(): expected spec of %s to be a function; got %s.",y,r[y]):u(!1):void 0,a=r[y](a));for(var b in r)m.hasOwnProperty(b)&&m[b]||(a[b]=i(e[b],r[b]));return a}var s=r(47),a=r(52),u=r(51),l={}.hasOwnProperty,p=a({$push:null}),c=a({$unshift:null}),d=a({$splice:null}),f=a({$set:null}),h=a({$merge:null}),y=a({$apply:null}),v=[p,c,d,f,h,y],m={};v.forEach(function(e){m[e]=!0}),e.exports=i}).call(t,r(15))},function(e,t){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,r){(function(t){"use strict";function r(e,r,o,n,i,s,a,u){if("production"!==t.env.NODE_ENV&&void 0===r)throw new Error("invariant requires an error message argument");if(!e){var l;if(void 0===r)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[o,n,i,s,a,u],c=0;l=new Error(r.replace(/%s/g,function(){return p[c++]})),l.name="Invariant Violation"}throw l.framesToPop=1,l}}e.exports=r}).call(t,r(15))},function(e,t){"use strict";var r=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};e.exports=r},function(e,t,r){function o(e,t){for(var r=0;r<e.length;r++){var o=e[r],n=f[o.id];if(n){n.refs++;for(var i=0;i<n.parts.length;i++)n.parts[i](o.parts[i]);for(;i<o.parts.length;i++)n.parts.push(l(o.parts[i],t))}else{for(var s=[],i=0;i<o.parts.length;i++)s.push(l(o.parts[i],t));f[o.id]={id:o.id,refs:1,parts:s}}}}function n(e){for(var t=[],r={},o=0;o<e.length;o++){var n=e[o],i=n[0],s=n[1],a=n[2],u=n[3],l={css:s,media:a,sourceMap:u};r[i]?r[i].parts.push(l):t.push(r[i]={id:i,parts:[l]})}return t}function i(e,t){var r=v(),o=b[b.length-1];if("top"===e.insertAt)o?o.nextSibling?r.insertBefore(t,o.nextSibling):r.appendChild(t):r.insertBefore(t,r.firstChild),b.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");r.appendChild(t)}}function s(e){e.parentNode.removeChild(e);var t=b.indexOf(e);t>=0&&b.splice(t,1)}function a(e){var t=document.createElement("style");return t.type="text/css",i(e,t),t}function u(e){var t=document.createElement("link");return t.rel="stylesheet",i(e,t),t}function l(e,t){var r,o,n;if(t.singleton){var i=g++;r=m||(m=a(t)),o=p.bind(null,r,i,!1),n=p.bind(null,r,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=u(t),o=d.bind(null,r),n=function(){s(r),r.href&&URL.revokeObjectURL(r.href)}):(r=a(t),o=c.bind(null,r),n=function(){s(r)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else n()}}function p(e,t,r,o){var n=r?"":o.css;if(e.styleSheet)e.styleSheet.cssText=E(t,n);else{var i=document.createTextNode(n),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function c(e,t){var r=t.css,o=t.media;t.sourceMap;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}function d(e,t){var r=t.css,o=(t.media,t.sourceMap);o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var n=new Blob([r],{type:"text/css"}),i=e.href;e.href=URL.createObjectURL(n),i&&URL.revokeObjectURL(i)}var f={},h=function(e){var t;return function(){return"undefined"==typeof t&&(t=e.apply(this,arguments)),t}},y=h(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),v=h(function(){return document.head||document.getElementsByTagName("head")[0]}),m=null,g=0,b=[];e.exports=function(e,t){t=t||{},"undefined"==typeof t.singleton&&(t.singleton=y()),"undefined"==typeof t.insertAt&&(t.insertAt="bottom");var r=n(e);return o(r,t),function(e){for(var i=[],s=0;s<r.length;s++){var a=r[s],u=f[a.id];u.refs--,i.push(u)}if(e){var l=n(e);o(l,t)}for(var s=0;s<i.length;s++){var u=i[s];if(0===u.refs){for(var p=0;p<u.parts.length;p++)u.parts[p]();delete f[u.id]}}}};var E=function(){var e=[];return function(t,r){return e[t]=r,e.filter(Boolean).join("\n")}}()},function(e,t,r){var o=r(35);"string"==typeof o&&(o=[[e.id,o,""]]);r(53)(o,{});o.locals&&(e.exports=o.locals)},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){(function(t){e.exports=t}).call(t,{})}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9yZWFjdC1ib290c3RyYXAtdGFibGUuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGU4NjQ2ZWQwMjUwODIxYTUwM2VhIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wicm9vdFwiOlwiUmVhY3RcIixcImNvbW1vbmpzMlwiOlwicmVhY3RcIixcImNvbW1vbmpzXCI6XCJyZWFjdFwiLFwiYW1kXCI6XCJyZWFjdFwifSIsIndlYnBhY2s6Ly8vLi9zcmMvQ29uc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdERPTVwiLFwiY29tbW9uanMyXCI6XCJyZWFjdC1kb21cIixcImNvbW1vbmpzXCI6XCJyZWFjdC1kb21cIixcImFtZFwiOlwicmVhY3QtZG9tXCJ9Iiwid2VicGFjazovLy8uL3NyYy91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9FZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL05vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvVGFibGVEYXRhU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYy1zd2l0Y2gvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2VsZWN0L2xpYi9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL3N0cmlwRGlhY3JpdGljcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXRvYXN0ci9saWIvVG9hc3RNZXNzYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtdG9hc3RyL34vcmVhY3QtYWRkb25zLXVwZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQm9vdHN0cmFwVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2VsZWN0Um93SGVhZGVyQ29sdW1uLmpzIiwid2VicGFjazovLy8uL3NyYy9UYWJsZUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RhYmxlQ29sdW1uLmpzIiwid2VicGFjazovLy8uL3NyYy9UYWJsZUVkaXRDb2x1bW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RhYmxlRmlsdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9UYWJsZUhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGFibGVIZWFkZXJDb2x1bW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RhYmxlUm93LmpzIiwid2VicGFjazovLy8uL3NyYy9jc3ZfZXhwb3J0X3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpbGVzYXZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZmlsdGVycy9EYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9maWx0ZXJzL051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZmlsdGVycy9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpbHRlcnMvVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnaW5hdGlvbi9QYWdlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdpbmF0aW9uL1BhZ2luYXRpb25MaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy90b29sYmFyL1Rvb2xCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYy1zd2l0Y2gvYXNzZXRzL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL34vcmMtc3dpdGNoL2xpYi9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zZWxlY3QvbGliL0FzeW5jLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2VsZWN0L2xpYi9PcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zZWxlY3QvbGliL1ZhbHVlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2VsZWN0L34vcmVhY3QtaW5wdXQtYXV0b3NpemUvbGliL0F1dG9zaXplSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC10b2FzdHIvbGliL1RvYXN0Q29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtdG9hc3RyL2xpYi9Ub2FzdE1lc3NhZ2UvYW5pbWF0aW9uTWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC10b2FzdHIvbGliL1RvYXN0TWVzc2FnZS9qUXVlcnlNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXRvYXN0ci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC10b2FzdHIvfi9lbGVtZW50LWNsYXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RUcmFuc2l0aW9uRXZlbnRzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL3VwZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L34vZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9+L2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L34vZmJqcy9saWIva2V5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL34vcmMtc3dpdGNoL2Fzc2V0cy9pbmRleC5jc3M/N2M5NCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fIiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX0Jvb3RzdHJhcFRhYmxlIiwiX0Jvb3RzdHJhcFRhYmxlMiIsIl9UYWJsZUhlYWRlckNvbHVtbiIsIl9UYWJsZUhlYWRlckNvbHVtbjIiLCJfc3RvcmVUYWJsZURhdGFTdG9yZSIsIndpbmRvdyIsIkJvb3RzdHJhcFRhYmxlIiwiVGFibGVIZWFkZXJDb2x1bW4iLCJUYWJsZURhdGFTZXQiLCJTT1JUX0RFU0MiLCJTT1JUX0FTQyIsIlNJWkVfUEVSX1BBR0UiLCJORVhUX1BBR0UiLCJMQVNUX1BBR0UiLCJQUkVfUEFHRSIsIkZJUlNUX1BBR0UiLCJST1dfU0VMRUNUX0JHX0NPTE9SIiwiUk9XX1NFTEVDVF9OT05FIiwiUk9XX1NFTEVDVF9TSU5HTEUiLCJST1dfU0VMRUNUX01VTFRJIiwiQ0VMTF9FRElUX05PTkUiLCJDRUxMX0VESVRfQ0xJQ0siLCJDRUxMX0VESVRfREJDTElDSyIsIlNJWkVfUEVSX1BBR0VfTElTVCIsIlBBR0lOQVRJT05fU0laRSIsIk5PX0RBVEFfVEVYVCIsIlNIT1dfT05MWV9TRUxFQ1QiLCJTSE9XX0FMTCIsIkZJTFRFUl9ERUxBWSIsIkZJTFRFUl9UWVBFIiwiVEVYVCIsIlNFTEVDVCIsIk5VTUJFUiIsIkRBVEUiLCJDVVNUT00iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmciLCJhcmdUeXBlIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5Iiwia2V5IiwiaGFzT3duIiwiam9pbiIsImhhc093blByb3BlcnR5IiwidW5kZWZpbmVkIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9Db25zdCIsIl9Db25zdDIiLCJfY2xhc3NuYW1lcyIsIl9jbGFzc25hbWVzMiIsInJlbmRlclNvcnRDYXJldCIsIm9yZGVyIiwid3JhcCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVyIiwic3R5bGUiLCJtYXJnaW4iLCJhcHBlbmRDaGlsZCIsInJlbmRlclJlYWN0U29ydENhcmV0Iiwib3JkZXJDbGFzcyIsImRyb3B1cCIsImdldFNjcm9sbEJhcldpZHRoIiwid2lkdGgiLCJoZWlnaHQiLCJvdXRlciIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInZpc2liaWxpdHkiLCJvdmVyZmxvdyIsImJvZHkiLCJ3MSIsIm9mZnNldFdpZHRoIiwidzIiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJwcm90b3R5cGUiLCJfcmNTd2l0Y2giLCJfcmNTd2l0Y2gyIiwiX3JlYWN0U2VsZWN0IiwiX3JlYWN0U2VsZWN0MiIsIkVkaXRvciIsImVkaXRhYmxlIiwiYXR0ciIsImZvcm1hdCIsImVkaXRvckNsYXNzIiwiZGVmYXVsdFZhbHVlIiwidHlwZSIsImRpc2FibGVkIiwib3B0aW9ucyIsInZhbHVlcyIsInJvd1ZhbHVlIiwibWFwIiwiZCIsImNvbHMiLCJyb3dzIiwia2V5VXBIYW5kbGVyIiwib25LZXlEb3duIiwic2F2ZUJ0biIsImUiLCJrZXlDb2RlIiwib25DbGljayIsIl92YWx1ZXMiLCJyZXBsYWNlIiwiY2hlY2tlZCIsInRvU3RyaW5nIiwic3BsaXQiLCJkZWZhdWx0Q2hlY2tlZCIsIl92YWx1ZXMyIiwibXVsdGlPcHQiLCJtdWx0aSIsInNpbXBsZVZhbHVlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2dldCIsIl94IiwiX3gyIiwiX3gzIiwiX2FnYWluIiwib2JqZWN0IiwicHJvcGVydHkiLCJyZWNlaXZlciIsIkZ1bmN0aW9uIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldHRlciIsImdldCIsInBhcmVudCIsImdldFByb3RvdHlwZU9mIiwiX3JlYWN0VG9hc3RyIiwiVG9hc3RyTWVzc2FnZUZhY3RvcnkiLCJjcmVhdGVGYWN0b3J5IiwiVG9hc3RNZXNzYWdlIiwiYW5pbWF0aW9uIiwiTm90aWZpY2F0aW9uIiwiX1JlYWN0JENvbXBvbmVudCIsIm1zZyIsInRpdGxlIiwicmVmcyIsInRvYXN0ciIsIm1vZGUiLCJ0aW1lT3V0IiwiZXh0ZW5kZWRUaW1lT3V0Iiwic2hvd0FuaW1hdGlvbiIsImhpZGVBbmltYXRpb24iLCJUb2FzdENvbnRhaW5lciIsInJlZiIsInRvYXN0TWVzc2FnZUZhY3RvcnkiLCJDb21wb25lbnQiLCJfc29ydCIsImFyciIsInNvcnRGaWVsZCIsInNvcnRGdW5jIiwidG9Mb3dlckNhc2UiLCJzb3J0IiwiYSIsImIiLCJFdmVudEVtaXR0ZXIiLCJfRXZlbnRFbWl0dGVyIiwiZGF0YSIsImVtaXQiLCJUYWJsZURhdGFTdG9yZSIsImNvbEluZm9zIiwiZmlsdGVyZWREYXRhIiwiaXNPbkZpbHRlciIsImZpbHRlck9iaiIsInNlYXJjaFRleHQiLCJzb3J0T2JqIiwicGFnZU9iaiIsInNlbGVjdGVkIiwibXVsdGlDb2x1bW5TZWFyY2giLCJzaG93T25seVNlbGVjdGVkIiwicmVtb3RlIiwia2V5RmllbGQiLCJlbmFibGVQYWdpbmF0aW9uIiwiaXNQYWdpbmF0aW9uIiwiZmlsdGVyIiwic2VhcmNoIiwic2VsZWN0ZWRSb3dLZXlzIiwiX3RoaXMiLCJyb3ciLCJyZXN1bHQiLCJmaW5kIiwieCIsImN1cnJlbnREaXNwbGF5RGF0YSIsImdldEN1cnJlbnREaXNwbGF5RGF0YSIsIl9wYWdlIiwic2l6ZVBlclBhZ2UiLCJlbmQiLCJzdGFydCIsIm5ld1ZhbCIsInJvd0luZGV4IiwiZmllbGROYW1lIiwicm93S2V5Q2FjaGUiLCJmb3JFYWNoIiwibmV3T2JqIiwiY29uc29sZSIsImxvZyIsInVuc2hpZnQiLCJyb3dLZXkiLCJpbmRleE9mIiwiX3RoaXMyIiwia2V5cyIsInZhbGlkIiwiZmlsdGVyVmFsIiwidGFyZ2V0VmFsIiwibnVtYmVyIiwiX2NvbEluZm9zJGtleSIsImZpbHRlckZvcm1hdHRlZCIsImZvcm1hdEV4dHJhRGF0YSIsImZpbHRlck51bWJlciIsImNvbXBhcmF0b3IiLCJmaWx0ZXJEYXRlIiwiZmlsdGVyQ3VzdG9tIiwiZmlsdGVyVGV4dCIsImVycm9yIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJjYWxsYmFja0luZm8iLCJjYWxsYmFjayIsImNhbGxiYWNrUGFyYW1ldGVycyIsIl90aGlzMyIsInRyaW0iLCJzZWFyY2hUZXh0QXJyYXkiLCJrZXlzTGVuZ3RoIiwiX2NvbEluZm9zJGtleTIiLCJzZWFyY2hhYmxlIiwiaGlkZGVuIiwiaiIsInRleHRMZW5ndGgiLCJfZGF0YSIsInN0cmluZ2lmeVZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9yZWFjdERvbSIsIl9yZWFjdERvbTIiLCJfcmVhY3RJbnB1dEF1dG9zaXplIiwiX3JlYWN0SW5wdXRBdXRvc2l6ZTIiLCJfdXRpbHNTdHJpcERpYWNyaXRpY3MiLCJfdXRpbHNTdHJpcERpYWNyaXRpY3MyIiwiX0FzeW5jIiwiX0FzeW5jMiIsIl9PcHRpb24iLCJfT3B0aW9uMiIsIl9WYWx1ZSIsIl9WYWx1ZTIiLCJzdHJpbmdPck5vZGUiLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJub2RlIiwiU2VsZWN0IiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImFkZExhYmVsVGV4dCIsImFsbG93Q3JlYXRlIiwiYm9vbCIsImF1dG9CbHVyIiwiYXV0b2ZvY3VzIiwiYmFja3NwYWNlUmVtb3ZlcyIsImNsZWFyQWxsVGV4dCIsImNsZWFyVmFsdWVUZXh0IiwiY2xlYXJhYmxlIiwiZGVsaW1pdGVyIiwiZXNjYXBlQ2xlYXJzVmFsdWUiLCJmaWx0ZXJPcHRpb24iLCJmdW5jIiwiZmlsdGVyT3B0aW9ucyIsImFueSIsImlnbm9yZUFjY2VudHMiLCJpZ25vcmVDYXNlIiwiaW5wdXRQcm9wcyIsImlzTG9hZGluZyIsImxhYmVsS2V5IiwibWF0Y2hQb3MiLCJtYXRjaFByb3AiLCJtZW51QnVmZmVyIiwibWVudUNvbnRhaW5lclN0eWxlIiwibWVudVN0eWxlIiwibmFtZSIsIm5ld09wdGlvbkNyZWF0b3IiLCJub1Jlc3VsdHNUZXh0Iiwib25CbHVyIiwib25CbHVyUmVzZXRzSW5wdXQiLCJvbkNoYW5nZSIsIm9uQ2xvc2UiLCJvbkZvY3VzIiwib25JbnB1dENoYW5nZSIsIm9uTWVudVNjcm9sbFRvQm90dG9tIiwib25PcGVuIiwib25WYWx1ZUNsaWNrIiwib3B0aW9uQ29tcG9uZW50Iiwib3B0aW9uUmVuZGVyZXIiLCJhcnJheSIsInBsYWNlaG9sZGVyIiwicmVxdWlyZWQiLCJzY3JvbGxNZW51SW50b1ZpZXciLCJ0YWJJbmRleCIsInZhbHVlQ29tcG9uZW50IiwidmFsdWVLZXkiLCJ2YWx1ZVJlbmRlcmVyIiwid3JhcHBlclN0eWxlIiwic3RhdGljcyIsIkFzeW5jIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiaW5wdXRWYWx1ZSIsImlzRm9jdXNlZCIsImlzT3BlbiIsImlzUHNldWRvRm9jdXNlZCIsImhhbmRsZVJlcXVpcmVkIiwiY29tcG9uZW50RGlkTW91bnQiLCJmb2N1cyIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJzdGF0ZSIsImhhbmRsZXIiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJtZW51IiwiZm9jdXNlZCIsImhhc1Njcm9sbGVkVG9PcHRpb24iLCJmb2N1c2VkT3B0aW9uTm9kZSIsImZpbmRET01Ob2RlIiwibWVudU5vZGUiLCJzY3JvbGxUb3AiLCJvZmZzZXRUb3AiLCJfc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUiLCJmb2N1c2VkRE9NIiwibWVudURPTSIsImZvY3VzZWRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibWVudVJlY3QiLCJib3R0b20iLCJjbGllbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJtZW51Q29udGFpbmVyIiwibWVudUNvbnRhaW5lclJlY3QiLCJpbm5lckhlaWdodCIsInNjcm9sbFRvIiwic2Nyb2xsWSIsInNldFN0YXRlIiwiaW5wdXQiLCJibHVySW5wdXQiLCJibHVyIiwiaGFuZGxlVG91Y2hNb3ZlIiwiZXZlbnQiLCJkcmFnZ2luZyIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZSIsImNsZWFyVmFsdWUiLCJidXR0b24iLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIl9vcGVuQWZ0ZXJGb2N1cyIsImhhbmRsZU1vdXNlRG93bk9uQXJyb3ciLCJjbG9zZU1lbnUiLCJoYW5kbGVNb3VzZURvd25Pbk1lbnUiLCJoYW5kbGVJbnB1dEZvY3VzIiwiaGFuZGxlSW5wdXRCbHVyIiwiYWN0aXZlRWxlbWVudCIsImlzRXF1YWxOb2RlIiwib25CbHVycmVkU3RhdGUiLCJoYW5kbGVJbnB1dENoYW5nZSIsImhhbmRsZUtleURvd24iLCJwb3BWYWx1ZSIsInNoaWZ0S2V5Iiwic2VsZWN0Rm9jdXNlZE9wdGlvbiIsImZvY3VzUHJldmlvdXNPcHRpb24iLCJmb2N1c05leHRPcHRpb24iLCJoYW5kbGVWYWx1ZUNsaWNrIiwib3B0aW9uIiwiaGFuZGxlTWVudVNjcm9sbCIsInNjcm9sbEhlaWdodCIsImdldE9wdGlvbkxhYmVsIiwib3AiLCJnZXRWYWx1ZUFycmF5IiwiZXhwYW5kVmFsdWUiLCJleHBhbmRlZFZhbHVlIiwiX3Byb3BzIiwic2V0VmFsdWUiLCJzZWxlY3RWYWx1ZSIsImFkZFZhbHVlIiwidmFsdWVBcnJheSIsImNvbmNhdCIsImNsZWFyYWJsZVZhbHVlIiwic2xpY2UiLCJyZW1vdmVWYWx1ZSIsImZvY3VzT3B0aW9uIiwiZm9jdXNlZE9wdGlvbiIsImZvY3VzQWRqYWNlbnRPcHRpb24iLCJkaXIiLCJfdmlzaWJsZU9wdGlvbnMiLCJfZm9jdXNlZE9wdGlvbiIsImZvY3VzZWRJbmRleCIsInJlbmRlckxvYWRpbmciLCJhcmlhLWhpZGRlbiIsInJlbmRlclZhbHVlIiwicmVuZGVyTGFiZWwiLCJWYWx1ZUNvbXBvbmVudCIsIm9uUmVtb3ZlIiwicmVuZGVySW5wdXQiLCJib3JkZXIiLCJkaXNwbGF5IiwibWluV2lkdGgiLCJyZW5kZXJDbGVhciIsImFyaWEtbGFiZWwiLCJvbk1vdXNlRG93biIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwicmVuZGVyQXJyb3ciLCJleGNsdWRlT3B0aW9ucyIsImZpbHRlclZhbHVlIiwidmFsdWVUZXN0IiwiU3RyaW5nIiwibGFiZWxUZXN0Iiwic3Vic3RyIiwicmVuZGVyTWVudSIsIl90aGlzNCIsIl9yZXQiLCJPcHRpb24iLCJ2IiwiaXNTZWxlY3RlZCIsIm9wdGlvblJlZiIsIm9wdGlvbkNsYXNzIiwiU2VsZWN0LW9wdGlvbiIsImlzLXNlbGVjdGVkIiwiaXMtZm9jdXNlZCIsImlzLWRpc2FibGVkIiwiaXNEaXNhYmxlZCIsIm9uU2VsZWN0IiwicmVuZGVySGlkZGVuRmllbGQiLCJfdGhpczUiLCJnZXRGb2N1c2FibGVPcHRpb24iLCJzZWxlY3RlZE9wdGlvbiIsInJlbmRlciIsIlNlbGVjdC0tbXVsdGkiLCJpcy1sb2FkaW5nIiwiaXMtb3BlbiIsImlzLXBzZXVkby1mb2N1c2VkIiwiaXMtc2VhcmNoYWJsZSIsImhhcy12YWx1ZSIsIm9uU2Nyb2xsIiwiYmFzZSIsImxldHRlcnMiLCJzdHIiLCJub29wIiwialF1ZXJ5IiwiX3JlYWN0QWRkb25zVXBkYXRlIiwiX3JlYWN0QWRkb25zVXBkYXRlMiIsIl9hbmltYXRpb25NaXhpbiIsIl9hbmltYXRpb25NaXhpbjIiLCJfalF1ZXJ5TWl4aW4iLCJfalF1ZXJ5TWl4aW4yIiwiVG9hc3RNZXNzYWdlU3BlYyIsImljb25DbGFzc05hbWVzIiwiaW5mbyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwidGl0bGVDbGFzc05hbWUiLCJtZXNzYWdlQ2xhc3NOYW1lIiwidGFwVG9EaXNtaXNzIiwiY2xvc2VCdXR0b24iLCJoYW5kbGVPbkNsaWNrIiwiaGlkZVRvYXN0IiwiX2hhbmRsZV9jbG9zZV9idXR0b25fY2xpY2siLCJfaGFuZGxlX3JlbW92ZSIsImhhbmRsZVJlbW92ZSIsInRvYXN0SWQiLCJfcmVuZGVyX2Nsb3NlX2J1dHRvbiIsInJvbGUiLCJfcmVuZGVyX3RpdGxlX2VsZW1lbnQiLCJfcmVuZGVyX21lc3NhZ2VfZWxlbWVudCIsIm1lc3NhZ2UiLCJpY29uQ2xhc3NOYW1lIiwib25Nb3VzZUVudGVyIiwiaGFuZGxlTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImhhbmRsZU1vdXNlTGVhdmUiLCIkc2V0IiwibWl4aW5zIiwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiZGVmYXVsdE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsIm4iLCJpc05hTiIsImVyIiwibGVuIiwiYXJncyIsImxpc3RlbmVycyIsIkVycm9yIiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsIm5ld0xpc3RlbmVyIiwid2FybmVkIiwidHJhY2UiLCJvbiIsIm9uY2UiLCJnIiwicmVtb3ZlTGlzdGVuZXIiLCJmaXJlZCIsImxpc3QiLCJzcGxpY2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZXQiLCJsaXN0ZW5lckNvdW50IiwiZXZsaXN0ZW5lciIsImVtaXR0ZXIiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsInJ1biIsImNsZWFyVGltZW91dCIsIkl0ZW0iLCJmdW4iLCJwcm9jZXNzIiwibmV4dFRpY2siLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9mZiIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiX1RhYmxlSGVhZGVyIiwiX1RhYmxlSGVhZGVyMiIsIl9UYWJsZUJvZHkiLCJfVGFibGVCb2R5MiIsIl9wYWdpbmF0aW9uUGFnaW5hdGlvbkxpc3QiLCJfcGFnaW5hdGlvblBhZ2luYXRpb25MaXN0MiIsIl90b29sYmFyVG9vbEJhciIsIl90b29sYmFyVG9vbEJhcjIiLCJfVGFibGVGaWx0ZXIiLCJfVGFibGVGaWx0ZXIyIiwiX2Nzdl9leHBvcnRfdXRpbCIsIl9jc3ZfZXhwb3J0X3V0aWwyIiwiX0ZpbHRlciIsIl9zY3JvbGxIZWFkZXIiLCJoZWFkZXIiLCJjb250YWluZXIiLCJzY3JvbGxMZWZ0IiwiY3VycmVudFRhcmdldCIsIl9hZGp1c3RIZWFkZXJXaWR0aCIsInRhYmxlSGVhZGVyRG9tIiwiY2hpbGROb2RlcyIsInRhYmxlQm9keURvbSIsImhlYWRlclByb3BzIiwiZ2V0Qm9keUhlYWRlckRvbVByb3AiLCJmaXRIZWFkZXIiLCJfYXR0YWNoQ2VsbEVkaXRGdW5jIiwiY29weSIsInN0b3JlIiwiZ2V0RGF0YSIsImNsZWFyIiwic2V0RGF0YSIsImdldFRhYmxlRGF0YSIsImluaXRUYWJsZSIsInNlbGYiLCJjdXJyZW50RmlsdGVyIiwiaGFuZGxlRmlsdGVyRGF0YSIsInNlbGVjdFJvdyIsInNldFNlbGVjdGVkUm93S2V5IiwiY3VyclBhZ2UiLCJwYWdlIiwiZ2V0U2VsZWN0ZWRSb3dLZXlzIiwiaXNLZXlGaWVsZERlZmluZWQiLCJDaGlsZHJlbiIsImNoaWxkcmVuIiwiY29sdW1uIiwiaXNLZXkiLCJkYXRhRmllbGQiLCJGaWx0ZXIiLCJnZXRDb2x1bW5zRGVzY3JpcHRpb24iLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsInNldFByb3BzIiwicGFnaW5hdGlvbiIsImlzUmVtb3RlRGF0YVNvdXJjZSIsInNvcnROYW1lIiwic29ydE9yZGVyIiwiaXNDaGFuZ2VkUGFnZSIsIl9yZWYiLCJhbGlnbiIsImRhdGFBbGlnbiIsImRhdGFTb3J0IiwiZGF0YUZvcm1hdCIsImNvbHVtbkNsYXNzTmFtZSIsInRleHQiLCJpbmRleCIsInBhZ2luYXRpb25Eb20iLCJnZXRDdXJyZW50UGFnZSIsImdldFNpemVQZXJQYWdlIiwiTWF0aCIsImNlaWwiLCJzb3J0SW5mbyIsImdldFNvcnRJbmZvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZnRlclRhYmxlQ29tcGxldGUiLCJjZWxsRWRpdCIsIl9fb25Db21wbGV0ZUVkaXRfXyIsImhhbmRsZUVkaXRDZWxsIiwiYmluZCIsImNsaWNrVG9TZWxlY3QiLCJjaGlsZHJlbnMiLCJtYXhIZWlnaHQiLCJjb2x1bW5zIiwicmVuZGVyUGFnaW5hdGlvbiIsInRvb2xCYXIiLCJyZW5kZXJUb29sQmFyIiwidGFibGVGaWx0ZXIiLCJyZW5kZXJUYWJsZUZpbHRlciIsImlzU2VsZWN0QWxsIiwicm93U2VsZWN0VHlwZSIsImhpZGVTZWxlY3RDb2x1bW4iLCJvblNvcnQiLCJoYW5kbGVTb3J0Iiwib25TZWxlY3RBbGxSb3ciLCJoYW5kbGVTZWxlY3RBbGxSb3ciLCJib3JkZXJlZCIsImNvbmRlbnNlZCIsImlzRmlsdGVyZWQiLCJ0YWJsZUlEIiwidHJDbGFzc05hbWUiLCJzdHJpcGVkIiwiaG92ZXIiLCJnZXRLZXlGaWVsZCIsIm9uUm93Q2xpY2siLCJoYW5kbGVSb3dDbGljayIsIm9uUm93TW91c2VPdmVyIiwiaGFuZGxlUm93TW91c2VPdmVyIiwib25Sb3dNb3VzZU91dCIsImhhbmRsZVJvd01vdXNlT3V0Iiwib25TZWxlY3RSb3ciLCJoYW5kbGVTZWxlY3RSb3ciLCJub0RhdGFUZXh0IiwiZGVmYXVsdFNlbGVjdFJvd0tleXMiLCJhbGxSb3dLZXlzIiwiZ2V0QWxsUm93a2V5Iiwib25Tb3J0Q2hhbmdlIiwib25QYWdlQ2hhbmdlIiwib25TZWxlY3RBbGwiLCJpZ25vcmVOb25TZWxlY3RlZCIsImN1cnJTZWxlY3RlZCIsImNvbEluZGV4IiwiZWRpdCIsImFmdGVyU2F2ZUNlbGwiLCJhZGRBdEJlZ2luIiwiX2hhbmRsZUFmdGVyQWRkaW5nUm93IiwiYmVmb3JlUHJvbWlzZSIsImJlZm9yZUluc2VydFJvdyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImFkZCIsImpzb24iLCJyb3dLZXlzIiwidGhhdCIsImRyb3BSb3dLZXlzIiwiaGFuZGxlQ29uZmlybURlbGV0ZVJvdyIsImRlbGV0ZVJvdyIsImNvbmZpcm0iLCJyZW1vdmUiLCJjdXJyTGFzdFBhZ2UiLCJnZXREYXRhTnVtIiwiYWZ0ZXJEZWxldGVSb3ciLCJhZnRlckNvbHVtbkZpbHRlciIsImdldERhdGFJZ25vcmluZ1BhZ2luYXRpb24iLCJjc3ZGaWxlTmFtZSIsImFmdGVyU2VhcmNoIiwiZGF0YVNpemUiLCJmZXRjaEluZm8iLCJkYXRhVG90YWxTaXplIiwiY2hhbmdlUGFnZSIsImhhbmRsZVBhZ2luYXRpb25EYXRhIiwic2l6ZVBlclBhZ2VMaXN0IiwicGFnaW5hdGlvblNpemUiLCJvblNpemVQZXJQYWdlTGlzdCIsInByZVBhZ2UiLCJuZXh0UGFnZSIsImZpcnN0UGFnZSIsImxhc3RQYWdlIiwiZW5hYmxlU2hvd09ubHlTZWxlY3RlZCIsImluc2VydFJvdyIsImV4cG9ydENTViIsImZpZWxkIiwiYXV0b1ZhbHVlIiwiaGlkZGVuSW5Qb3B1cCIsImNsZWFyU2VhcmNoIiwiZW5hYmxlSW5zZXJ0IiwiZW5hYmxlRGVsZXRlIiwiZW5hYmxlU2VhcmNoIiwiZW5hYmxlRXhwb3J0Q1NWIiwic2VhcmNoUGxhY2Vob2xkZXIiLCJvbkFkZFJvdyIsImhhbmRsZUFkZFJvdyIsIm9uQWRkUm93QmVnaW4iLCJoYW5kbGVBZGRSb3dCZWdpbiIsIm9uRHJvcFJvdyIsImhhbmRsZURyb3BSb3ciLCJvblNlYXJjaCIsImhhbmRsZVNlYXJjaCIsIm9uRXhwb3J0Q1NWIiwiaGFuZGxlRXhwb3J0Q1NWIiwib25TaG93T25seVNlbGVjdGVkIiwiaGFuZGxlU2hvd09ubHlTZWxlY3RlZCIsImNvbHVtbkZpbHRlciIsIm9uRmlsdGVyIiwiYWZ0ZXJJbnNlcnRSb3ciLCJzaGFwZSIsIm9uZU9mIiwiYmdDb2xvciIsImNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbCIsImJsdXJUb1NhdmUiLCJkZWZhdWx0UHJvcHMiLCJmaWx0ZXJUeXBlIiwiaGFzVmFsdWUiLCJwcm9wIiwiU2VsZWN0Um93SGVhZGVyQ29sdW1uIiwidGhTdHlsZSIsInBhcnNlSW50IiwiX3V0aWwiLCJfdXRpbDIiLCJfVGFibGVSb3ciLCJfVGFibGVSb3cyIiwiX1RhYmxlQ29sdW1uIiwiX1RhYmxlQ29sdW1uMiIsIl9UYWJsZUVkaXRDb2x1bW4iLCJfVGFibGVFZGl0Q29sdW1uMiIsImlzRnVuIiwiVGFibGVCb2R5IiwiY3VyckVkaXRDZWxsIiwiZWRpdGluZyIsImFkanVzdEJvZHkiLCJjb250YWluZXJDbGFzc2VzIiwidGFibGVDbGFzc2VzIiwidGFibGUtc3RyaXBlZCIsInRhYmxlLWJvcmRlcmVkIiwidGFibGUtaG92ZXIiLCJ0YWJsZS1jb25kZW5zZWQiLCJpc1NlbGVjdFJvd0RlZmluZWQiLCJfaXNTZWxlY3RSb3dEZWZpbmVkIiwidGFibGVIZWFkZXIiLCJyZW5kZXJUYWJsZUhlYWRlciIsInRhYmxlUm93cyIsInIiLCJ0YWJsZUNvbHVtbnMiLCJmaWVsZFZhbHVlIiwicmlkIiwiY2lkIiwiY29tcGxldGVFZGl0IiwiaGFuZGxlQ29tcGxldGVFZGl0Q2VsbCIsInRkQ2xhc3NOYW1lIiwiZm9ybWF0dGVkVmFsdWUiLCJpc1ZhbGlkRWxlbWVudCIsIm9uRWRpdCIsInNlbGVjdFJvd0NvbHVtbiIsInJlbmRlclNlbGVjdFJvd0NvbHVtbiIsImVuYWJsZUNlbGxFZGl0IiwiY29sU3BhbiIsImNhbGN1bGF0ZUNvbnRhaW5lckhlaWdodCIsInNlbGVjdFJvd0hlYWRlciIsInRoZWFkZXIiLCJtYXhXaWR0aCIsInNvcnRDYWVydCIsInRhcmdldFJvdyIsInNlbGVjdGVkUm93IiwicGFyZW50RWxlbWVudCIsImNvbHVtbkluZGV4Iiwic3RhdGVPYmoiLCJoYW5kbGVTZWxlY3RSb3dDb2x1bUNoYW5nZSIsImhlYWRlcnMiLCJoZWFkZXJEb21Qcm9wcyIsImhhcmRGaXhIZWFkZXJXaWR0aCIsIm1hcmdpblRvcCIsIlRhYmxlQ29sdW1uIiwic2hvdWxkVXBkYXRlZCIsInNlbGVjdGlvbiIsImVtcHR5IiwiZ2V0U2VsZWN0aW9uIiwic2VsIiwicmVtb3ZlQWxsUmFuZ2VzIiwiY2VsbEluZGV4IiwidGRTdHlsZSIsInRleHRBbGlnbiIsImNsYXNzbmFtZSIsIm9wdHMiLCJoYW5kbGVDZWxsRWRpdCIsIm9uRG91YmxlQ2xpY2siLCJfRWRpdG9yIiwiX0VkaXRvcjIiLCJfTm90aWZpY2F0aW9uSnMiLCJfTm90aWZpY2F0aW9uSnMyIiwiVGFibGVFZGl0Q29sdW1uIiwidGltZW91dGVDbGVhciIsInNoYWtlRWRpdG9yIiwiX2dldENoZWNrQm94VmFsdWUiLCJ2YWxpZGF0b3IiLCJ0cyIsIm5vdGlmaWVyIiwibm90aWNlIiwiaW5wdXRSZWYiLCJfY2xlYXJUaW1lb3V0IiwiaGFuZGxlS2V5UHJlc3MiLCJoYW5kbGVCbHVyIiwiYW5pbWF0ZWQiLCJzaGFrZSIsIlRhYmxlRmlsdGVyIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJmaWx0ZXJGaWVsZCIsInNpemUiLCJvbktleVVwIiwiaGFuZGxlS2V5VXAiLCJib3JkZXJCb3R0b21TdHlsZSIsIl9TZWxlY3RSb3dIZWFkZXJDb2x1bW4iLCJfU2VsZWN0Um93SGVhZGVyQ29sdW1uMiIsIkNoZWNrYm94IiwidXBkYXRlIiwiaW5kZXRlcm1pbmF0ZSIsIlRhYmxlSGVhZGVyIiwiX1JlYWN0JENvbXBvbmVudDIiLCJzZWxlY3RSb3dDb2x1bW5XaWR0aCIsInNlbGVjdFJvd0hlYWRlckNvbCIsInJlbmRlclNlbGVjdFJvd0hlYWRlciIsIl9hdHRhY2hDbGVhclNvcnRDYXJldEZ1bmMiLCJjbG9uZUVsZW1lbnQiLCJpc1ZlcnRpY2FsU2Nyb2xsQmFyIiwic3RhcnRQb3NpdGlvbiIsImZvcmNlVXBkYXRlIiwibWFyZ2luUmlnaHQiLCJfZmlsdGVyc0RhdGUiLCJfZmlsdGVyc0RhdGUyIiwiX2ZpbHRlcnNUZXh0IiwiX2ZpbHRlcnNUZXh0MiIsIl9maWx0ZXJzU2VsZWN0IiwiX2ZpbHRlcnNTZWxlY3QyIiwiX2ZpbHRlcnNOdW1iZXIiLCJfZmlsdGVyc051bWJlcjIiLCJoYW5kbGVGaWx0ZXIiLCJjb2x1bW5OYW1lIiwiZmlsdGVySGFuZGxlciIsImdldEVsZW1lbnQiLCJjdXN0b21GaWx0ZXJQYXJhbWV0ZXJzIiwiaW5uZXJEaXYiLCJzZXRBdHRyaWJ1dGUiLCJkZWZhdWx0Q2FyZXQiLCJjb2xvciIsInNvcnRDYXJldCIsImhhbmRsZUNvbHVtbkNsaWNrIiwiZ2V0RmlsdGVycyIsImZpbHRlclR5cGVBcnJheSIsImRlbGF5IiwiYXJyYXlPZiIsIm51bWJlckNvbXBhcmF0b3JzIiwiVGFibGVSb3ciLCJjbGlja051bSIsInRhZ05hbWUiLCJ0ckNzcyIsImJhY2tncm91bmRDb2xvciIsIm9uTW91c2VPdmVyIiwicm93TW91c2VPdmVyIiwib25Nb3VzZU91dCIsInJvd01vdXNlT3V0Iiwicm93Q2xpY2siLCJkYXRhU3RyaW5nIiwiY29sIiwiY2VsbCIsImZpbGVzYXZlciIsInNhdmVBcyIsImZpbGVuYW1lIiwiQmxvYiIsInZpZXciLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwiZG9jIiwiZ2V0X1VSTCIsIlVSTCIsIndlYmtpdFVSTCIsInNhdmVfbGluayIsImNyZWF0ZUVsZW1lbnROUyIsImNhbl91c2Vfc2F2ZV9saW5rIiwiY2xpY2siLCJNb3VzZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImlzX3NhZmFyaSIsIndlYmtpdF9yZXFfZnMiLCJ3ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbSIsInJlcV9mcyIsInJlcXVlc3RGaWxlU3lzdGVtIiwibW96UmVxdWVzdEZpbGVTeXN0ZW0iLCJ0aHJvd19vdXRzaWRlIiwiZXgiLCJzZXRJbW1lZGlhdGUiLCJmb3JjZV9zYXZlYWJsZV90eXBlIiwiZnNfbWluX3NpemUiLCJhcmJpdHJhcnlfcmV2b2tlX3RpbWVvdXQiLCJyZXZva2UiLCJmaWxlIiwicmV2b2tlciIsInJldm9rZU9iamVjdFVSTCIsImNocm9tZSIsImRpc3BhdGNoIiwiZXZlbnRfdHlwZXMiLCJhdXRvX2JvbSIsImJsb2IiLCJGaWxlU2F2ZXIiLCJub19hdXRvX2JvbSIsIm9iamVjdF91cmwiLCJ0YXJnZXRfdmlldyIsImJsb2JfY2hhbmdlZCIsImRpc3BhdGNoX2FsbCIsImZzX2Vycm9yIiwiRmlsZVJlYWRlciIsInJlYWRlciIsIm9ubG9hZGVuZCIsImJhc2U2NERhdGEiLCJsb2NhdGlvbiIsImhyZWYiLCJyZWFkeVN0YXRlIiwiRE9ORSIsInJlYWRBc0RhdGFVUkwiLCJJTklUIiwiY3JlYXRlT2JqZWN0VVJMIiwibmV3X3RhYiIsIm9wZW4iLCJhYm9ydGFibGUiLCJjcmVhdGVfaWZfbm90X2ZvdW5kIiwiZXhjbHVzaXZlIiwiZG93bmxvYWQiLCJ3ZWJraXRTbGljZSIsIlRFTVBPUkFSWSIsImZzIiwiZ2V0RGlyZWN0b3J5Iiwic2F2ZSIsImdldEZpbGUiLCJjcmVhdGVXcml0ZXIiLCJ3cml0ZXIiLCJvbndyaXRlZW5kIiwidG9VUkwiLCJvbmVycm9yIiwiY29kZSIsIkFCT1JUX0VSUiIsIndyaXRlIiwiYWJvcnQiLCJXUklUSU5HIiwiTk9UX0ZPVU5EX0VSUiIsIkZTX3Byb3RvIiwibXNTYXZlT3JPcGVuQmxvYiIsIm9ud3JpdGVzdGFydCIsIm9ucHJvZ3Jlc3MiLCJvbndyaXRlIiwib25hYm9ydCIsImNvbnRlbnQiLCJEYXRlRmlsdGVyIiwiZGVmYXVsdERhdGUiLCJEYXRlIiwiZGF0ZVZhbHVlIiwiaW5wdXREYXRlIiwic2V0RGVmYXVsdERhdGUiLCJpc1JlcXVpcmVkIiwibGVnYWxDb21wYXJhdG9ycyIsIk51bWJlckZpbHRlciIsImlzUGxhY2Vob2xkZXJTZWxlY3RlZCIsIm9uQ2hhbmdlTnVtYmVyIiwib25DaGFuZ2VOdW1iZXJTZXQiLCJvbkNoYW5nZUNvbXBhcmF0b3IiLCJudW1iZXJGaWx0ZXJDb21wYXJhdG9yIiwibnVtYmVyRmlsdGVyIiwib3B0aW9uVGFncyIsInNlbGVjdENsYXNzIiwicGxhY2Vob2xkZXItc2VsZWN0ZWQiLCJnZXRDb21wYXJhdG9yT3B0aW9ucyIsImdldE51bWJlck9wdGlvbnMiLCJwcm9wTmFtZSIsImNvbXBhcmF0b3JJc1ZhbGlkIiwiU2VsZWN0RmlsdGVyIiwic2VsZWN0SW5wdXQiLCJnZXRPcHRpb25zIiwiVGV4dEZpbHRlciIsImlucHV0VGV4dCIsIlBhZ2VCdXR0b24iLCJhY3RpdmUiLCJkaXNhYmxlIiwicGFnZUJ0bkNsaWNrIiwiX1BhZ2VCdXR0b25KcyIsIl9QYWdlQnV0dG9uSnMyIiwiUGFnaW5hdGlvbkxpc3QiLCJ0b3RhbFBhZ2VzIiwic2VsZWN0U2l6ZSIsInBhZ2VCdG5zIiwibWFrZVBhZ2UiLCJwYWdlTGlzdFN0eWxlIiwiZmxvYXQiLCJjaGFuZ2VTaXplUGVyUGFnZSIsImRhdGEtdG9nZ2xlIiwiYXJpYS1leHBhbmRlZCIsImFyaWEtbGFiZWxsZWRieSIsInBhZ2VzIiwiZ2V0UGFnZXMiLCJpc0FjdGl2ZSIsInN0YXJ0UGFnZSIsImVuZFBhZ2UiLCJtYXgiLCJmbG9vciIsIlRvb2xCYXIiLCJoYW5kbGVTaG93T25seVRvZ2dsZSIsInNob3dTZWxlY3RlZCIsImhhbmRsZUNsZWFyQnRuQ2xpY2siLCJzZWFjaElucHV0IiwiaXNJbnNlcnRSb3dUcmlnZ2VyIiwidmFsaWRhdGVTdGF0ZSIsInRlbXBWYWx1ZSIsInRlbXBNc2ciLCJpc1ZhbGlkIiwiZ2V0VGltZSIsImRvbSIsImNoZWNrQW5kUGFyc2VGb3JtIiwiZXJyb3JzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJyZXNldCIsIm1vZGFsQ2xhc3NOYW1lIiwiaW5zZXJ0QnRuIiwiZGF0YS10YXJnZXQiLCJkZWxldGVCdG4iLCJkYXRhLXBsYWNlbWVudCIsImhhbmRsZURyb3BSb3dCdG5DbGljayIsInNlYXJjaFRleHRJbnB1dCIsInJlbmRlclNlYXJjaFBhbmVsIiwic2hvd1NlbGVjdGVkT25seUJ0biIsImFyaWEtcHJlc3NlZCIsIm1vZGFsIiwicmVuZGVySW5zZXJ0Um93TW9kYWwiLCJjbGVhckJ0biIsImlucHV0RmllbGQiLCJtb2RhbENsYXNzIiwiaW4iLCJkaWFsb2dDbGFzcyIsImRhdGEtZGlzbWlzcyIsImhhbmRsZVNhdmVCdG5DbGljayIsIml0ZW0iLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIlJlYWN0IiwiU3dpdGNoIiwicHJlZml4Q2xzIiwiY2hlY2tlZENoaWxkcmVuIiwidW5DaGVja2VkQ2hpbGRyZW4iLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwidG9nZ2xlIiwiX2NsYXNzTmFtZXMiLCJzd2l0Y2hDbGFzc05hbWUiLCJpbml0Q2FjaGUiLCJjYWNoZSIsInVwZGF0ZUNhY2hlIiwiZ2V0RnJvbUNhY2hlIiwiY2FjaGVLZXkiLCJjb21wbGV0ZSIsInRoZW5Qcm9taXNlIiwicHJvbWlzZSIsImVyciIsIl9TZWxlY3QiLCJfU2VsZWN0MiIsInJlcXVlc3RJZCIsImxvYWRPcHRpb25zIiwibG9hZGluZ1BsYWNlaG9sZGVyIiwibWluaW11bUlucHV0Iiwic2VhcmNoUHJvbXB0VGV4dCIsInNlYXJjaGluZ1RleHQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfbGFzdElucHV0Iiwic2VsZWN0IiwicmVzZXRTdGF0ZSIsIl9jdXJyZW50UmVxdWVzdElkIiwiZ2V0UmVzcG9uc2VIYW5kbGVyIiwiX3JlcXVlc3RJZCIsImlzTW91bnRlZCIsImNhY2hlUmVzdWx0IiwicmVzcG9uc2VIYW5kbGVyIiwiX3N0YXRlIiwib25VbmZvY3VzIiwiYmxvY2tFdmVudCIsImhhbmRsZU1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiVmFsdWUiLCJoYW5kbGVUb3VjaEVuZFJlbW92ZSIsInJlbmRlclJlbW92ZUljb24iLCJzaXplclN0eWxlIiwid2hpdGVTcGFjZSIsIm5leHRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkF1dG9zaXplSW5wdXQiLCJpbnB1dFN0eWxlIiwiaW5wdXRDbGFzc05hbWUiLCJpbnB1dFdpZHRoIiwiY29weUlucHV0U3R5bGVzIiwidXBkYXRlSW5wdXRXaWR0aCIsInF1ZXVlVXBkYXRlSW5wdXRXaWR0aCIsImdldENvbXB1dGVkU3R5bGUiLCJ3aWR0aE5vZGUiLCJzaXplciIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJmb250U3R5bGUiLCJsZXR0ZXJTcGFjaW5nIiwicGxhY2Vob2xkZXJOb2RlIiwicGxhY2Vob2xkZXJTaXplciIsInNjcm9sbFdpZHRoIiwibmV3SW5wdXRXaWR0aCIsImdldElucHV0IiwiZXNjYXBlZFZhbHVlIiwiYm94U2l6aW5nIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9Ub2FzdE1lc3NhZ2UiLCJfVG9hc3RNZXNzYWdlMiIsIl9Db21wb25lbnQiLCJfT2JqZWN0JGdldFByb3RvdHlwZU8iLCJfdGVtcCIsIl9sZW4iLCJfa2V5IiwidG9hc3RzIiwicHJldmlvdXNNZXNzYWdlIiwib3B0aW9uc092ZXJyaWRlIiwiX25vdGlmeSIsInRvYXN0VHlwZSIsInByZXZlbnREdXBsaWNhdGVzIiwibmV3VG9hc3QiLCIkbWVyZ2UiLCJfaGFuZGxlX3RvYXN0X29uX2NsaWNrIiwiX2hhbmRsZV90b2FzdF9yZW1vdmUiLCJ0b2FzdE9wZXJhdGlvbiIsIm5ld2VzdE9uVG9wIiwiZGVmYXVsdFByZXZlbnRlZCIsIm9wZXJhdGlvbk5hbWUiLCJmb3VuZCIsInRvYXN0IiwiJHNwbGljZSIsImFyaWEtbGl2ZSIsIl9SZWFjdFRyYW5zaXRpb25FdmVudHMiLCJfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMiIsIl9lbGVtZW50Q2xhc3MiLCJfZWxlbWVudENsYXNzMiIsIlRJQ0siLCJ0cmFuc2l0aW9uIiwiY2xhc3NOYW1lUXVldWUiLCJpc0hpZGluZyIsImludGVydmFsSWQiLCJfaXNfbW91bnRlZCIsIl9zaG93Iiwib25IaWRlQ29tcGxldGUiLCJfc2V0X2lzX2hpZGluZyIsInJlbW92ZUVuZEV2ZW50TGlzdGVuZXIiLCJhZGRFbmRFdmVudExpc3RlbmVyIiwiX3NldF9pbnRlcnZhbF9pZCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiX3NldF90cmFuc2l0aW9uIiwiaGlkZSIsImFuaW1hdGlvblR5cGUiLCJhY3RpdmVDbGFzc05hbWUiLCJlbmRMaXN0ZW5lciIsImNsYXNzTGlzdCIsIl9xdWV1ZV9jbGFzcyIsIl9jbGVhcl90cmFuc2l0aW9uIiwiX3NldF9hbmltYXRpb24iLCJhbmltYXRpb25zIiwiX2dldF9hbmltYXRpb25fY2xhc3NlcyIsImFuaW0iLCJfY2xlYXJfYW5pbWF0aW9uIiwiX2ZsdXNoX2NsYXNzX25hbWVfcXVldWUiLCJvdmVycmlkZSIsImNhbGxfc2hvd19tZXRob2QiLCIkbm9kZSIsInNob3dNZXRob2QiLCJkdXJhdGlvbiIsInNob3dEdXJhdGlvbiIsImVhc2luZyIsInNob3dFYXNpbmciLCJoaWRlTWV0aG9kIiwiaGlkZUR1cmF0aW9uIiwiaGlkZUVhc2luZyIsIl9nZXRfJF9ub2RlIiwic3RvcCIsIl9Ub2FzdENvbnRhaW5lciIsIl9Ub2FzdENvbnRhaW5lcjIiLCJFbGVtZW50Q2xhc3MiLCJub2RlVHlwZSIsImVsIiwicXVlcnlTZWxlY3RvciIsImlkeCIsImhhcyIsInNvdXJjZXMiLCJ0byIsIm5leHRJbmRleCIsIm5leHRTb3VyY2UiLCJmcm9tIiwiZGV0ZWN0RXZlbnRzIiwidGVzdEVsIiwiRVZFTlRfTkFNRV9NQVAiLCJhbmltYXRpb25lbmQiLCJ0cmFuc2l0aW9uZW5kIiwiYmFzZUV2ZW50TmFtZSIsImJhc2VFdmVudHMiLCJzdHlsZU5hbWUiLCJlbmRFdmVudHMiLCJldmVudE5hbWUiLCJldmVudExpc3RlbmVyIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiT0FuaW1hdGlvbiIsIm1zQW5pbWF0aW9uIiwiY2FuVXNlRE9NIiwiUmVhY3RUcmFuc2l0aW9uRXZlbnRzIiwiZW5kRXZlbnQiLCJzaGFsbG93Q29weSIsImludmFyaWFudEFycmF5Q2FzZSIsInNwZWMiLCJjb21tYW5kIiwiTk9ERV9FTlYiLCJpbnZhcmlhbnQiLCJzcGVjVmFsdWUiLCJBTExfQ09NTUFORFNfTElTVCIsIkNPTU1BTkRfU0VUIiwibmV4dFZhbHVlIiwiQ09NTUFORF9NRVJHRSIsIm1lcmdlT2JqIiwiQ09NTUFORF9QVVNIIiwiQ09NTUFORF9VTlNISUZUIiwiQ09NTUFORF9TUExJQ0UiLCJDT01NQU5EX0FQUExZIiwiayIsIkFMTF9DT01NQU5EU19TRVQiLCJrZXlPZiIsIiRwdXNoIiwiJHVuc2hpZnQiLCIkYXBwbHkiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImNvbmRpdGlvbiIsImYiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwib25lS2V5T2JqIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInN0eWxlc0luRG9tIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlRWxlbWVudCIsImhlYWQiLCJnZXRIZWFkRWxlbWVudCIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwic3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVMaW5rRWxlbWVudCIsImxpbmtFbGVtZW50IiwicmVsIiwic2luZ2xldG9uIiwic3R5bGVJbmRleCIsInNpbmdsZXRvbkNvdW50ZXIiLCJzaW5nbGV0b25FbGVtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJ0b2EiLCJ1cGRhdGVMaW5rIiwiYXBwbHlUb1RhZyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwicmVwbGFjZVRleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm9sZFNyYyIsIm1lbW9pemUiLCJmbiIsIm1lbW8iLCJpc09sZElFIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwibG9jYWxzIiwiX193ZWJwYWNrX2FtZF9vcHRpb25zX18iXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsZ0JBQUFDLFVBQUEsZ0JBQUFDLFFBQ0FBLE9BQUFELFFBQUFELEVBQUFHLFFBQUEsU0FBQUEsUUFBQSxjQUNBLGtCQUFBQyxnQkFBQUMsSUFDQUQsUUFBQSxxQkFBQUosR0FDQSxnQkFBQUMsU0FDQUEsUUFBQSxvQkFBQUQsRUFBQUcsUUFBQSxTQUFBQSxRQUFBLGNBRUFKLEVBQUEsb0JBQUFDLEVBQUFELEVBQUEsTUFBQUEsRUFBQSxXQUNDTyxLQUFBLFNBQUFDLEVBQUFDLEdBQ0QsTUNBZ0IsVUFBVUMsR0NOMUIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFWLE9BR0EsSUFBQUMsR0FBQVUsRUFBQUQsSUFDQVYsV0FDQVksR0FBQUYsRUFDQUcsUUFBQSxFQVVBLE9BTkFMLEdBQUFFLEdBQUFJLEtBQUFiLEVBQUFELFFBQUFDLElBQUFELFFBQUFTLEdBR0FSLEVBQUFZLFFBQUEsRUFHQVosRUFBQUQsUUF2QkEsR0FBQVcsS0FxQ0EsT0FUQUYsR0FBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQUwsRUFHQUYsRUFBQVEsRUFBQSxHQUdBUixFQUFBLEtEZ0JNLFNBQVNSLEVBQVFELEVBQVNTLEdBRS9CLFlBTUEsU0FBU1MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsVUFBV0YsR0FKekZHLE9BQU9DLGVBQWV2QixFQUFTLGNBQzdCd0IsT0FBTyxHQUtULElBQUlDLEdBQWtCaEIsRUVoRUksSUZrRXRCaUIsRUFBbUJSLEVBQXVCTyxHQUUxQ0UsRUFBcUJsQixFRW5FSSxJRnFFekJtQixFQUFzQlYsRUFBdUJTLEdBRTdDRSxFQUF1QnBCLEVFdEVELEVBRU4sb0JBQVhxQixVQUNSQSxPQUFPQyxl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eUMsRUFBQTV5QyxPQUFzQkYsSUFBQSxDQUN0QyxHQUFBOHZDLEdBQUFnRCxFQUFBOXlDLEVBQ0EsUUFBQTh2QyxFQUFBMW5DLEtBQUEsQ0FDQSxPQUFBMkYsR0FBQSxFQUFrQkEsRUFBQStoQyxFQUFBRSxNQUFBOXZDLE9BQTJCNk4sSUFDN0MraEMsRUFBQUUsTUFBQWppQyxXQUNBZ2lDLEdBQUFELEVBQUFsekMsT0FpSUEsSUFBQXMxQyxHQUFBLFdBQ0EsR0FBQWEsS0FFQSxpQkFBQWx0QixFQUFBbXRCLEdBRUEsTUFEQUQsR0FBQWx0QixHQUFBbXRCLEVBQ0FELEVBQUFyb0MsT0FBQXVvQyxTQUFBdHlDLEtBQUEsV3ZEczlQTSxTQUFTMUUsRUFBUUQsRUFBU1MsR3dEaHBRaEMsR0FBQWtnQyxHQUFBbGdDLEVBQUEsR0FDQSxpQkFBQWtnQyxTQUFBMWdDLEVBQUFXLEdBQUErL0IsRUFBQSxLQUVBbGdDLEdBQUEsSUFBQWtnQyxLQUNBQSxHQUFBdVcsU0FBQWozQyxFQUFBRCxRQUFBMmdDLEVBQUF1VyxTeERzcVFNLFNBQVNqM0MsRUFBUUQsR3lEN3FRdkJDLEVBQUFELFFBQUEsV0FBNkIsU0FBQWtqQixPQUFBLG9DekRvclF2QixTQUFTampCLEVBQVFELEkwRHByUXZCLFNBQUFtM0MsR0FBQWwzQyxFQUFBRCxRQUFBbTNDLEkxRHdyUThCcjJDLEtBQUtkIiwiZmlsZSI6InJlYWN0LWJvb3RzdHJhcC10YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlJlYWN0Qm9vdHN0cmFwVGFibGVcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSwgcmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiUmVhY3RCb290c3RyYXBUYWJsZVwiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdLCByb290W1wiUmVhY3RET01cIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fKSB7XG5yZXR1cm4gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uXG4gKiovIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicmVhY3RcIiwgXCJyZWFjdC1kb21cIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiUmVhY3RCb290c3RyYXBUYWJsZVwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJSZWFjdEJvb3RzdHJhcFRhYmxlXCJdID0gZmFjdG9yeShyb290W1wiUmVhY3RcIl0sIHJvb3RbXCJSZWFjdERPTVwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV80X18pIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdHZhciBfQm9vdHN0cmFwVGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0XG5cdHZhciBfQm9vdHN0cmFwVGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQm9vdHN0cmFwVGFibGUpO1xuXHRcblx0dmFyIF9UYWJsZUhlYWRlckNvbHVtbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXHRcblx0dmFyIF9UYWJsZUhlYWRlckNvbHVtbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWJsZUhlYWRlckNvbHVtbik7XG5cdFxuXHR2YXIgX3N0b3JlVGFibGVEYXRhU3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgd2luZG93LkJvb3RzdHJhcFRhYmxlID0gX0Jvb3RzdHJhcFRhYmxlMlsnZGVmYXVsdCddO1xuXHQgIHdpbmRvdy5UYWJsZUhlYWRlckNvbHVtbiA9IF9UYWJsZUhlYWRlckNvbHVtbjJbJ2RlZmF1bHQnXTtcblx0ICB3aW5kb3cuVGFibGVEYXRhU2V0ID0gX3N0b3JlVGFibGVEYXRhU3RvcmUuVGFibGVEYXRhU2V0O1xuXHR9XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcblx0ICBCb290c3RyYXBUYWJsZTogX0Jvb3RzdHJhcFRhYmxlMlsnZGVmYXVsdCddLFxuXHQgIFRhYmxlSGVhZGVyQ29sdW1uOiBfVGFibGVIZWFkZXJDb2x1bW4yWydkZWZhdWx0J10sXG5cdCAgVGFibGVEYXRhU2V0OiBfc3RvcmVUYWJsZURhdGFTdG9yZS5UYWJsZURhdGFTZXRcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fO1xuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG5cdCAgU09SVF9ERVNDOiBcImRlc2NcIixcblx0ICBTT1JUX0FTQzogXCJhc2NcIixcblx0ICBTSVpFX1BFUl9QQUdFOiAxMCxcblx0ICBORVhUX1BBR0U6IFwiPlwiLFxuXHQgIExBU1RfUEFHRTogXCI+PlwiLFxuXHQgIFBSRV9QQUdFOiBcIjxcIixcblx0ICBGSVJTVF9QQUdFOiBcIjw8XCIsXG5cdCAgUk9XX1NFTEVDVF9CR19DT0xPUjogXCJcIixcblx0ICBST1dfU0VMRUNUX05PTkU6IFwibm9uZVwiLFxuXHQgIFJPV19TRUxFQ1RfU0lOR0xFOiBcInJhZGlvXCIsXG5cdCAgUk9XX1NFTEVDVF9NVUxUSTogXCJjaGVja2JveFwiLFxuXHQgIENFTExfRURJVF9OT05FOiBcIm5vbmVcIixcblx0ICBDRUxMX0VESVRfQ0xJQ0s6IFwiY2xpY2tcIixcblx0ICBDRUxMX0VESVRfREJDTElDSzogXCJkYmNsaWNrXCIsXG5cdCAgU0laRV9QRVJfUEFHRV9MSVNUOiBbMTAsIDI1LCAzMCwgNTBdLFxuXHQgIFBBR0lOQVRJT05fU0laRTogNSxcblx0ICBOT19EQVRBX1RFWFQ6IFwiVGhlcmUgaXMgbm8gZGF0YSB0byBkaXNwbGF5XCIsXG5cdCAgU0hPV19PTkxZX1NFTEVDVDogXCJTaG93IFNlbGVjdGVkIE9ubHlcIixcblx0ICBTSE9XX0FMTDogXCJTaG93IEFsbFwiLFxuXHQgIEZJTFRFUl9ERUxBWTogNTAwLFxuXHQgIEZJTFRFUl9UWVBFOiB7XG5cdCAgICBURVhUOiBcIlRleHRGaWx0ZXJcIixcblx0ICAgIFNFTEVDVDogXCJTZWxlY3RGaWx0ZXJcIixcblx0ICAgIE5VTUJFUjogXCJOdW1iZXJGaWx0ZXJcIixcblx0ICAgIERBVEU6IFwiRGF0ZUZpbHRlclwiLFxuXHQgICAgQ1VTVE9NOiBcIkN1c3RvbUZpbHRlclwiXG5cdCAgfVxuXHR9O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qIVxuXHQgIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuXHQgIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG5cdCAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuXHQqL1xuXHQvKiBnbG9iYWwgZGVmaW5lICovXG5cdFxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHRcblx0XHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHRcdHZhciBjbGFzc2VzID0gW107XG5cdFxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXHRcblx0XHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXHRcblx0XHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0XHR9XG5cdFxuXHRcdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHRcdH0gZWxzZSBpZiAodHJ1ZSkge1xuXHRcdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHRcdH0uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHRcdH1cblx0fSgpKTtcblxuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzRfXztcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX0NvbnN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQ29uc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uc3QpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcblx0XG5cdCAgcmVuZGVyU29ydENhcmV0OiBmdW5jdGlvbiByZW5kZXJTb3J0Q2FyZXQob3JkZXIpIHtcblx0ICAgIHZhciB3cmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdCAgICB3cmFwLmNsYXNzTmFtZSA9IFwib3JkZXJcIjtcblx0ICAgIGlmIChvcmRlciA9PSBfQ29uc3QyWydkZWZhdWx0J10uU09SVF9BU0MpIHdyYXAuY2xhc3NOYW1lICs9IFwiIGRyb3B1cFwiO1xuXHQgICAgdmFyIGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdCAgICBpbm5lci5jbGFzc05hbWUgPSBcImNhcmV0XCI7XG5cdCAgICBpbm5lci5zdHlsZS5tYXJnaW4gPSBcIjEwcHggNXB4XCI7XG5cdCAgICB3cmFwLmFwcGVuZENoaWxkKGlubmVyKTtcblx0ICAgIHJldHVybiB3cmFwO1xuXHQgIH0sXG5cdFxuXHQgIHJlbmRlclJlYWN0U29ydENhcmV0OiBmdW5jdGlvbiByZW5kZXJSZWFjdFNvcnRDYXJldChvcmRlcikge1xuXHQgICAgdmFyIG9yZGVyQ2xhc3MgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKFwib3JkZXJcIiwge1xuXHQgICAgICAnZHJvcHVwJzogb3JkZXIgPT0gX0NvbnN0MlsnZGVmYXVsdCddLlNPUlRfQVNDXG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgJ3NwYW4nLFxuXHQgICAgICB7IGNsYXNzTmFtZTogb3JkZXJDbGFzcyB9LFxuXHQgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnY2FyZXQnLCBzdHlsZTogeyBtYXJnaW46ICcxMHB4IDVweCcgfSB9KVxuXHQgICAgKTtcblx0ICB9LFxuXHRcblx0ICBnZXRTY3JvbGxCYXJXaWR0aDogZnVuY3Rpb24gZ2V0U2Nyb2xsQmFyV2lkdGgoKSB7XG5cdCAgICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cdCAgICBpbm5lci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHQgICAgaW5uZXIuc3R5bGUuaGVpZ2h0ID0gXCIyMDBweFwiO1xuXHRcblx0ICAgIHZhciBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgb3V0ZXIuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdCAgICBvdXRlci5zdHlsZS50b3AgPSBcIjBweFwiO1xuXHQgICAgb3V0ZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG5cdCAgICBvdXRlci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblx0ICAgIG91dGVyLnN0eWxlLndpZHRoID0gXCIyMDBweFwiO1xuXHQgICAgb3V0ZXIuc3R5bGUuaGVpZ2h0ID0gXCIxNTBweFwiO1xuXHQgICAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHQgICAgb3V0ZXIuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuXHRcblx0ICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuXHQgICAgdmFyIHcxID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cdCAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuXHQgICAgdmFyIHcyID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cdCAgICBpZiAodzEgPT0gdzIpIHcyID0gb3V0ZXIuY2xpZW50V2lkdGg7XG5cdFxuXHQgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdXRlcik7XG5cdFxuXHQgICAgcmV0dXJuIHcxIC0gdzI7XG5cdCAgfVxuXHRcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yY1N3aXRjaCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX3JjU3dpdGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JjU3dpdGNoKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTQpO1xuXHRcblx0dmFyIF9yZWFjdFNlbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9yZWFjdFNlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFNlbGVjdCk7XG5cdFxuXHR2YXIgRWRpdG9yID0gZnVuY3Rpb24gRWRpdG9yKGVkaXRhYmxlLCBhdHRyLCBmb3JtYXQsIGVkaXRvckNsYXNzLCBkZWZhdWx0VmFsdWUpIHtcblx0XG5cdCAgICBpZiAoZWRpdGFibGUgPT09IHRydWUgfHwgdHlwZW9mIGVkaXRhYmxlID09PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgLy9zaW1wbGUgZGVjbGFyZVxuXHQgICAgICAgIHZhciB0eXBlID0gZWRpdGFibGUgPT09IHRydWUgPyAndGV4dCcgOiBlZGl0YWJsZTtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIGF0dHIsIHsgdHlwZTogdHlwZSwgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG5cdCAgICAgICAgICAgIGNsYXNzTmFtZTogKGVkaXRvckNsYXNzIHx8IFwiXCIpICsgXCIgZm9ybS1jb250cm9sIGVkaXRvciBlZGl0LXRleHRcIiB9KSk7XG5cdCAgICB9IGVsc2UgaWYgKCFlZGl0YWJsZSkge1xuXHQgICAgICAgIHZhciB0eXBlID0gZWRpdGFibGUgPT09IHRydWUgPyAndGV4dCcgOiBlZGl0YWJsZTtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIGF0dHIsIHsgdHlwZTogdHlwZSwgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsIGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuXHQgICAgICAgICAgICBjbGFzc05hbWU6IChlZGl0b3JDbGFzcyB8fCBcIlwiKSArIFwiIGZvcm0tY29udHJvbCBlZGl0b3IgZWRpdC10ZXh0XCIgfSkpO1xuXHQgICAgfSBlbHNlIGlmIChlZGl0YWJsZS50eXBlKSB7XG5cdCAgICAgICAgLy9zdGFuZGFyZCBkZWNsYXJlXG5cdCAgICAgICAgLy9wdXQgc3R5bGUgaWYgZXhpc3Rcblx0ICAgICAgICBlZGl0YWJsZS5zdHlsZSAmJiAoYXR0ci5zdHlsZSA9IGVkaXRhYmxlLnN0eWxlKTtcblx0XG5cdCAgICAgICAgLy9wdXQgY2xhc3MgaWYgZXhpc3Rcblx0ICAgICAgICBhdHRyLmNsYXNzTmFtZSA9IChlZGl0b3JDbGFzcyB8fCBcIlwiKSArIFwiIGZvcm0tY29udHJvbCBlZGl0b3IgZWRpdC1cIiArIGVkaXRhYmxlLnR5cGUgKyAoZWRpdGFibGUuY2xhc3NOYW1lID8gXCIgXCIgKyBlZGl0YWJsZS5jbGFzc05hbWUgOiBcIlwiKTtcblx0XG5cdCAgICAgICAgaWYgKGVkaXRhYmxlLnR5cGUgPT09ICdzZWxlY3QnKSB7XG5cdCAgICAgICAgICAgIC8vcHJvY2VzcyBzZWxlY3QgaW5wdXRcblx0ICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBbXSxcblx0ICAgICAgICAgICAgICAgIHZhbHVlcyA9IGVkaXRhYmxlLm9wdGlvbnMudmFsdWVzO1xuXHQgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG5cdCAgICAgICAgICAgICAgICAvL29ubHkgY2FuIHVzZSBhcnJyYXkgZGF0YSBmb3Igb3B0aW9uc1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvd1ZhbHVlO1xuXHQgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByb3dWYWx1ZSA9IGZvcm1hdCA/IGZvcm1hdChkKSA6IGQ7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnb3B0aW9uJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICdvcHRpb24nICsgaSwgdmFsdWU6IGQgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm93VmFsdWVcblx0ICAgICAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ3NlbGVjdCcsXG5cdCAgICAgICAgICAgICAgICBfZXh0ZW5kcyh7fSwgYXR0ciwgeyBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSB9KSxcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnNcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGVkaXRhYmxlLnR5cGUgPT09ICd0ZXh0YXJlYScpIHtcblx0ICAgICAgICAgICAgLy9wcm9jZXNzIHRleHRhcmVhIGlucHV0XG5cdCAgICAgICAgICAgIC8vcHV0ICBvdGhlciBpZiBleGlzdFxuXHQgICAgICAgICAgICBlZGl0YWJsZS5jb2xzICYmIChhdHRyLmNvbHMgPSBlZGl0YWJsZS5jb2xzKTtcblx0ICAgICAgICAgICAgZWRpdGFibGUucm93cyAmJiAoYXR0ci5yb3dzID0gZWRpdGFibGUucm93cyk7XG5cdCAgICAgICAgICAgIHZhciBrZXlVcEhhbmRsZXIgPSBhdHRyLm9uS2V5RG93bixcblx0ICAgICAgICAgICAgICAgIHNhdmVCdG4gPSBudWxsO1xuXHQgICAgICAgICAgICBpZiAoa2V5VXBIYW5kbGVyKSB7XG5cdCAgICAgICAgICAgICAgICBhdHRyLm9uS2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSAhPSAxMykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL25vdCBQcmVzc2VkIEVOVEVSXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGtleVVwSGFuZGxlcihlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgc2F2ZUJ0biA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdidXR0bycsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdidG4gYnRuLWluZm8gYnRuLXhzIHRleHRhcmVhLXNhdmUtYnRuJywgb25DbGljazoga2V5VXBIYW5kbGVyIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgJ3NhdmUnXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnLCBfZXh0ZW5kcyh7fSwgYXR0ciwgeyBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSB9KSksXG5cdCAgICAgICAgICAgICAgICBzYXZlQnRuXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChlZGl0YWJsZS50eXBlID09PSAnY2hlY2tib3gnKSB7XG5cdCAgICAgICAgICAgIHZhciBfdmFsdWVzID0gJ3RydWU6ZmFsc2UnO1xuXHQgICAgICAgICAgICBpZiAoZWRpdGFibGUub3B0aW9ucyAmJiBlZGl0YWJsZS5vcHRpb25zLnZhbHVlcykge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFsdWVzID0gZWRpdGFibGUub3B0aW9ucy52YWx1ZXMuc3BsaXQoJzonKTtcblx0ICAgICAgICAgICAgICAgIF92YWx1ZXMgPSBlZGl0YWJsZS5vcHRpb25zLnZhbHVlcztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBhdHRyLmNsYXNzTmFtZSA9IGF0dHIuY2xhc3NOYW1lLnJlcGxhY2UoJ2Zvcm0tY29udHJvbCcsICcnKTtcblx0ICAgICAgICAgICAgYXR0ci5jbGFzc05hbWUgKz0gJyBjaGVja2JveCBwdWxsLXJpZ2h0Jztcblx0XG5cdCAgICAgICAgICAgIHZhciBjaGVja2VkID0gZGVmYXVsdFZhbHVlICYmIGRlZmF1bHRWYWx1ZS50b1N0cmluZygpID09IF92YWx1ZXMuc3BsaXQoJzonKVswXSA/IHRydWUgOiBmYWxzZTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgYXR0ciwgeyB0eXBlOiAnY2hlY2tib3gnLCB2YWx1ZTogX3ZhbHVlcywgZGVmYXVsdENoZWNrZWQ6IGNoZWNrZWQgfSkpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZWRpdGFibGUudHlwZSA9PT0gJ3N3aXRjaCcpIHtcblx0ICAgICAgICAgICAgdmFyIF92YWx1ZXMyID0gJ3RydWU6ZmFsc2UnO1xuXHQgICAgICAgICAgICBhdHRyLmNsYXNzTmFtZSA9IGF0dHIuY2xhc3NOYW1lLnJlcGxhY2UoJ2Zvcm0tY29udHJvbCcsICcnKTtcblx0ICAgICAgICAgICAgYXR0ci5jbGFzc05hbWUgKz0gJyBjaGVja2JveCBwdWxsLXJpZ2h0Jztcblx0ICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSBkZWZhdWx0VmFsdWUgJiYgZGVmYXVsdFZhbHVlLnRvU3RyaW5nKCkgPT0gX3ZhbHVlczIuc3BsaXQoJzonKVswXSA/IHRydWUgOiBmYWxzZTtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9yY1N3aXRjaDJbJ2RlZmF1bHQnXSwgeyBjbGFzc05hbWU6IGF0dHIuY2xhc3NOYW1lLCBkZWZhdWx0Q2hlY2tlZDogY2hlY2tlZCB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGVkaXRhYmxlLnR5cGUgPT09ICdyZWFjdC1zZWxlY3QnKSB7XG5cdCAgICAgICAgICAgIHZhciBtdWx0aU9wdCA9IHR5cGVvZiBlZGl0YWJsZS5vcHRpb25zLm11bHRpICE9PSAndW5kZWZpbmVkJyA/IGVkaXRhYmxlLm9wdGlvbnMubXVsdGkgOiBmYWxzZTtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9yZWFjdFNlbGVjdDJbJ2RlZmF1bHQnXSwgeyBjbGFzc05hbWU6ICdwdWxsLXJpZ2h0Jywgb3B0aW9uczogZWRpdGFibGUub3B0aW9ucy52YWx1ZXMsIG11bHRpOiBtdWx0aU9wdCwgc2ltcGxlVmFsdWU6IHRydWUgfSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy9wcm9jZXNzIG90aGVyIGlucHV0IHR5cGUuIGFzIHBhc3N3b3JkLHVybCxlbWFpbC4uLlxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIGF0dHIsIHsgdHlwZTogdHlwZSwgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUgfSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8vZGVmYXVsdCByZXR1cm4gZm9yIG90aGVyIGNhc2Ugb2YgZWRpdGFibGVcblx0ICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgYXR0ciwgeyB0eXBlOiAndGV4dCcsIGNsYXNzTmFtZTogKGVkaXRvckNsYXNzIHx8IFwiXCIpICsgXCIgZm9ybS1jb250cm9sIGVkaXRvciBlZGl0LXRleHRcIiB9KSk7XG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBFZGl0b3I7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX0NvbnN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQ29uc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uc3QpO1xuXHRcblx0dmFyIF9yZWFjdFRvYXN0ciA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXHRcblx0dmFyIFRvYXN0ck1lc3NhZ2VGYWN0b3J5ID0gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUZhY3RvcnkoX3JlYWN0VG9hc3RyLlRvYXN0TWVzc2FnZS5hbmltYXRpb24pO1xuXHRcblx0dmFyIE5vdGlmaWNhdGlvbiA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhOb3RpZmljYXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICBmdW5jdGlvbiBOb3RpZmljYXRpb24oKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aWZpY2F0aW9uKTtcblx0XG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihOb3RpZmljYXRpb24ucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhOb3RpZmljYXRpb24sIFt7XG5cdCAgICBrZXk6ICdub3RpY2UnLFxuXHRcblx0ICAgIC8vIGFsbG93IHR5cGUgaXMgc3VjY2VzcyxpbmZvLHdhcm5pbmcsZXJyb3Jcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBub3RpY2UodHlwZSwgbXNnLCB0aXRsZSkge1xuXHQgICAgICB0aGlzLnJlZnMudG9hc3RyW3R5cGVdKG1zZywgdGl0bGUsIHtcblx0ICAgICAgICBtb2RlOiAnc2luZ2xlJyxcblx0ICAgICAgICB0aW1lT3V0OiA1MDAwLFxuXHQgICAgICAgIGV4dGVuZGVkVGltZU91dDogMTAwMCxcblx0ICAgICAgICBzaG93QW5pbWF0aW9uOiBcImFuaW1hdGVkICBib3VuY2VJblwiLFxuXHQgICAgICAgIGhpZGVBbmltYXRpb246IFwiYW5pbWF0ZWQgYm91bmNlT3V0XCJcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVuZGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfcmVhY3RUb2FzdHIuVG9hc3RDb250YWluZXIsIHsgcmVmOiAndG9hc3RyJywgdG9hc3RNZXNzYWdlRmFjdG9yeTogVG9hc3RyTWVzc2FnZUZhY3RvcnksXG5cdCAgICAgICAgaWQ6ICd0b2FzdC1jb250YWluZXInLCBjbGFzc05hbWU6ICd0b2FzdC10b3AtcmlnaHQnIH0pO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBOb3RpZmljYXRpb247XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfQ29uc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9Db25zdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdCk7XG5cdFxuXHR2YXIgRXZlbnRFbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCkuRXZlbnRFbWl0dGVyO1xuXHRcblx0ZnVuY3Rpb24gX3NvcnQoYXJyLCBzb3J0RmllbGQsIG9yZGVyLCBzb3J0RnVuYykge1xuXHQgIG9yZGVyID0gb3JkZXIudG9Mb3dlckNhc2UoKTtcblx0ICBhcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xuXHQgICAgaWYgKHNvcnRGdW5jKSB7XG5cdCAgICAgIHJldHVybiBzb3J0RnVuYyhhLCBiLCBvcmRlciwgc29ydEZpZWxkKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChvcmRlciA9PSBfQ29uc3QyWydkZWZhdWx0J10uU09SVF9ERVNDKSB7XG5cdCAgICAgICAgcmV0dXJuIGFbc29ydEZpZWxkXSA+IGJbc29ydEZpZWxkXSA/IC0xIDogYVtzb3J0RmllbGRdIDwgYltzb3J0RmllbGRdID8gMSA6IDA7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIGFbc29ydEZpZWxkXSA8IGJbc29ydEZpZWxkXSA/IC0xIDogYVtzb3J0RmllbGRdID4gYltzb3J0RmllbGRdID8gMSA6IDA7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIGFycjtcblx0fVxuXHRcblx0dmFyIFRhYmxlRGF0YVNldCA9IChmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuXHQgIF9pbmhlcml0cyhUYWJsZURhdGFTZXQsIF9FdmVudEVtaXR0ZXIpO1xuXHRcblx0ICBmdW5jdGlvbiBUYWJsZURhdGFTZXQoZGF0YSkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYmxlRGF0YVNldCk7XG5cdFxuXHQgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVEYXRhU2V0LnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgZGF0YSk7XG5cdCAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFRhYmxlRGF0YVNldCwgW3tcblx0ICAgIGtleTogJ3NldERhdGEnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERhdGEoZGF0YSkge1xuXHQgICAgICB0aGlzLmVtaXQoJ2NoYW5nZScsIGRhdGEpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NsZWFyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcblx0ICAgICAgdGhpcy5kYXRhID0gbnVsbDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXREYXRhJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFRhYmxlRGF0YVNldDtcblx0fSkoRXZlbnRFbWl0dGVyKTtcblx0XG5cdGV4cG9ydHMuVGFibGVEYXRhU2V0ID0gVGFibGVEYXRhU2V0O1xuXHRcblx0dmFyIFRhYmxlRGF0YVN0b3JlID0gKGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiBUYWJsZURhdGFTdG9yZShkYXRhKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVEYXRhU3RvcmUpO1xuXHRcblx0ICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cdCAgICB0aGlzLmNvbEluZm9zID0gbnVsbDtcblx0ICAgIHRoaXMuZmlsdGVyZWREYXRhID0gbnVsbDtcblx0ICAgIHRoaXMuaXNPbkZpbHRlciA9IGZhbHNlO1xuXHQgICAgdGhpcy5maWx0ZXJPYmogPSBudWxsO1xuXHQgICAgdGhpcy5zZWFyY2hUZXh0ID0gbnVsbDtcblx0ICAgIHRoaXMuc29ydE9iaiA9IG51bGw7XG5cdCAgICB0aGlzLnBhZ2VPYmogPSB7fTtcblx0ICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTtcblx0ICAgIHRoaXMubXVsdGlDb2x1bW5TZWFyY2ggPSBmYWxzZTtcblx0ICAgIHRoaXMuc2hvd09ubHlTZWxlY3RlZCA9IGZhbHNlO1xuXHQgICAgdGhpcy5yZW1vdGUgPSBmYWxzZTsgLy8gcmVtb3RlIGRhdGFcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhUYWJsZURhdGFTdG9yZSwgW3tcblx0ICAgIGtleTogJ3NldFByb3BzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQcm9wcyhwcm9wcykge1xuXHQgICAgICB0aGlzLmtleUZpZWxkID0gcHJvcHMua2V5RmllbGQ7XG5cdCAgICAgIHRoaXMuZW5hYmxlUGFnaW5hdGlvbiA9IHByb3BzLmlzUGFnaW5hdGlvbjtcblx0ICAgICAgdGhpcy5jb2xJbmZvcyA9IHByb3BzLmNvbEluZm9zO1xuXHQgICAgICB0aGlzLnJlbW90ZSA9IHByb3BzLnJlbW90ZTtcblx0ICAgICAgdGhpcy5tdWx0aUNvbHVtblNlYXJjaCA9IHByb3BzLm11bHRpQ29sdW1uU2VhcmNoO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldERhdGEnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERhdGEoZGF0YSkge1xuXHQgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXHQgICAgICBpZiAodGhpcy5pc09uRmlsdGVyKSB7XG5cdCAgICAgICAgaWYgKG51bGwgIT09IHRoaXMuZmlsdGVyT2JqKSB0aGlzLmZpbHRlcih0aGlzLmZpbHRlck9iaik7XG5cdCAgICAgICAgaWYgKG51bGwgIT09IHRoaXMuc2VhcmNoVGV4dCkgdGhpcy5zZWFyY2godGhpcy5zZWFyY2hUZXh0KTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5zb3J0T2JqKSB7XG5cdCAgICAgICAgdGhpcy5zb3J0KHRoaXMuc29ydE9iai5vcmRlciwgdGhpcy5zb3J0T2JqLnNvcnRGaWVsZCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRTb3J0SW5mbycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U29ydEluZm8oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNvcnRPYmo7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0U2VsZWN0ZWRSb3dLZXknLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNlbGVjdGVkUm93S2V5KHNlbGVjdGVkUm93S2V5cykge1xuXHQgICAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWRSb3dLZXlzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFNlbGVjdGVkUm93S2V5cycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0ZWRSb3dLZXlzKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRDdXJyZW50RGlzcGxheURhdGEnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnREaXNwbGF5RGF0YSgpIHtcblx0ICAgICAgaWYgKHRoaXMuaXNPbkZpbHRlcikgcmV0dXJuIHRoaXMuZmlsdGVyZWREYXRhO2Vsc2UgcmV0dXJuIHRoaXMuZGF0YTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpZ25vcmVOb25TZWxlY3RlZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaWdub3JlTm9uU2VsZWN0ZWQoKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICB0aGlzLnNob3dPbmx5U2VsZWN0ZWQgPSAhdGhpcy5zaG93T25seVNlbGVjdGVkO1xuXHQgICAgICBpZiAodGhpcy5zaG93T25seVNlbGVjdGVkKSB7XG5cdCAgICAgICAgdGhpcy5pc09uRmlsdGVyID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuXHQgICAgICAgICAgdmFyIHJlc3VsdCA9IF90aGlzLnNlbGVjdGVkLmZpbmQoZnVuY3Rpb24gKHgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHJvd1tfdGhpcy5rZXlGaWVsZF0gPT09IHg7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIHJldHVybiB0eXBlb2YgcmVzdWx0ICE9PSAndW5kZWZpbmVkJyA/IHRydWUgOiBmYWxzZTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLmlzT25GaWx0ZXIgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NvcnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnQob3JkZXIsIHNvcnRGaWVsZCkge1xuXHQgICAgICB0aGlzLnNvcnRPYmogPSB7XG5cdCAgICAgICAgb3JkZXI6IG9yZGVyLFxuXHQgICAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkXG5cdCAgICAgIH07XG5cdFxuXHQgICAgICB2YXIgY3VycmVudERpc3BsYXlEYXRhID0gdGhpcy5nZXRDdXJyZW50RGlzcGxheURhdGEoKTtcblx0ICAgICAgaWYgKCF0aGlzLmNvbEluZm9zW3NvcnRGaWVsZF0pIHJldHVybiB0aGlzO1xuXHRcblx0ICAgICAgdmFyIHNvcnRGdW5jID0gdGhpcy5jb2xJbmZvc1tzb3J0RmllbGRdLnNvcnRGdW5jO1xuXHRcblx0ICAgICAgY3VycmVudERpc3BsYXlEYXRhID0gX3NvcnQoY3VycmVudERpc3BsYXlEYXRhLCBzb3J0RmllbGQsIG9yZGVyLCBzb3J0RnVuYyk7XG5cdFxuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdwYWdlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBwYWdlKF9wYWdlLCBzaXplUGVyUGFnZSkge1xuXHQgICAgICB0aGlzLnBhZ2VPYmouZW5kID0gX3BhZ2UgKiBzaXplUGVyUGFnZSAtIDE7XG5cdCAgICAgIHRoaXMucGFnZU9iai5zdGFydCA9IHRoaXMucGFnZU9iai5lbmQgLSAoc2l6ZVBlclBhZ2UgLSAxKTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZWRpdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZWRpdChuZXdWYWwsIHJvd0luZGV4LCBmaWVsZE5hbWUpIHtcblx0ICAgICAgdmFyIGN1cnJlbnREaXNwbGF5RGF0YSA9IHRoaXMuZ2V0Q3VycmVudERpc3BsYXlEYXRhKCk7XG5cdCAgICAgIHZhciByb3dLZXlDYWNoZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgaWYgKCF0aGlzLmVuYWJsZVBhZ2luYXRpb24pIHtcblx0ICAgICAgICBjdXJyZW50RGlzcGxheURhdGFbcm93SW5kZXhdW2ZpZWxkTmFtZV0gPSBuZXdWYWw7XG5cdCAgICAgICAgcm93S2V5Q2FjaGUgPSBjdXJyZW50RGlzcGxheURhdGFbcm93SW5kZXhdW3RoaXMua2V5RmllbGRdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGN1cnJlbnREaXNwbGF5RGF0YVt0aGlzLnBhZ2VPYmouc3RhcnQgKyByb3dJbmRleF1bZmllbGROYW1lXSA9IG5ld1ZhbDtcblx0ICAgICAgICByb3dLZXlDYWNoZSA9IGN1cnJlbnREaXNwbGF5RGF0YVt0aGlzLnBhZ2VPYmouc3RhcnQgKyByb3dJbmRleF1bdGhpcy5rZXlGaWVsZF07XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuaXNPbkZpbHRlcikge1xuXHQgICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcblx0ICAgICAgICAgIGlmIChyb3dbdGhpcy5rZXlGaWVsZF0gPT09IHJvd0tleUNhY2hlKSB7XG5cdCAgICAgICAgICAgIHJvd1tmaWVsZE5hbWVdID0gbmV3VmFsO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0sIHRoaXMpO1xuXHQgICAgICAgIGlmIChudWxsICE9PSB0aGlzLmZpbHRlck9iaikgdGhpcy5maWx0ZXIodGhpcy5maWx0ZXJPYmopO1xuXHQgICAgICAgIGlmIChudWxsICE9PSB0aGlzLnNlYXJjaFRleHQpIHRoaXMuc2VhcmNoKHRoaXMuc2VhcmNoVGV4dCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnYWRkQXRCZWdpbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQXRCZWdpbihuZXdPYmopIHtcblx0ICAgICAgaWYgKCFuZXdPYmpbdGhpcy5rZXlGaWVsZF0gfHwgbmV3T2JqW3RoaXMua2V5RmllbGRdLnRvU3RyaW5nKCkgPT09ICcnKSB7XG5cdCAgICAgICAgdGhyb3cgdGhpcy5rZXlGaWVsZCArIFwiIGNhbid0IGJlIGVtcHR5IHZhbHVlLlwiO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBjdXJyZW50RGlzcGxheURhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xuXHQgICAgICBjdXJyZW50RGlzcGxheURhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG5cdCAgICAgICAgaWYgKHJvd1t0aGlzLmtleUZpZWxkXS50b1N0cmluZygpID09PSBuZXdPYmpbdGhpcy5rZXlGaWVsZF0udG9TdHJpbmcoKSkge1xuXHQgICAgICAgICAgdGhyb3cgdGhpcy5rZXlGaWVsZCArIFwiIFwiICsgbmV3T2JqW3RoaXMua2V5RmllbGRdICsgXCIgYWxyZWFkeSBleGlzdHNcIjtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIHRoaXMpO1xuXHQgICAgICBjb25zb2xlLmxvZygnQEAnKTtcblx0ICAgICAgY3VycmVudERpc3BsYXlEYXRhLnVuc2hpZnQobmV3T2JqKTtcblx0ICAgICAgaWYgKHRoaXMuaXNPbkZpbHRlcikge1xuXHQgICAgICAgIHRoaXMuZGF0YS51bnNoaWZ0KG5ld09iaik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdhZGQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChuZXdPYmopIHtcblx0ICAgICAgaWYgKCFuZXdPYmpbdGhpcy5rZXlGaWVsZF0gfHwgbmV3T2JqW3RoaXMua2V5RmllbGRdLnRvU3RyaW5nKCkgPT09ICcnKSB7XG5cdCAgICAgICAgdGhyb3cgdGhpcy5rZXlGaWVsZCArIFwiIGNhbid0IGJlIGVtcHR5IHZhbHVlLlwiO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBjdXJyZW50RGlzcGxheURhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xuXHQgICAgICBjdXJyZW50RGlzcGxheURhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG5cdCAgICAgICAgaWYgKHJvd1t0aGlzLmtleUZpZWxkXS50b1N0cmluZygpID09PSBuZXdPYmpbdGhpcy5rZXlGaWVsZF0udG9TdHJpbmcoKSkge1xuXHQgICAgICAgICAgdGhyb3cgdGhpcy5rZXlGaWVsZCArIFwiIFwiICsgbmV3T2JqW3RoaXMua2V5RmllbGRdICsgXCIgYWxyZWFkeSBleGlzdHNcIjtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIHRoaXMpO1xuXHRcblx0ICAgICAgY3VycmVudERpc3BsYXlEYXRhLnB1c2gobmV3T2JqKTtcblx0ICAgICAgaWYgKHRoaXMuaXNPbkZpbHRlcikge1xuXHQgICAgICAgIHRoaXMuZGF0YS5wdXNoKG5ld09iaik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW1vdmUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShyb3dLZXkpIHtcblx0ICAgICAgdmFyIGN1cnJlbnREaXNwbGF5RGF0YSA9IHRoaXMuZ2V0Q3VycmVudERpc3BsYXlEYXRhKCk7XG5cdCAgICAgIHZhciByZXN1bHQgPSBjdXJyZW50RGlzcGxheURhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcblx0ICAgICAgICByZXR1cm4gcm93S2V5LmluZGV4T2Yocm93W3RoaXMua2V5RmllbGRdKSA9PSAtMTtcblx0ICAgICAgfSwgdGhpcyk7XG5cdFxuXHQgICAgICBpZiAodGhpcy5pc09uRmlsdGVyKSB7XG5cdCAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG5cdCAgICAgICAgICByZXR1cm4gcm93S2V5LmluZGV4T2Yocm93W3RoaXMua2V5RmllbGRdKSA9PSAtMTtcblx0ICAgICAgICB9LCB0aGlzKTtcblx0ICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHJlc3VsdDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLmRhdGEgPSByZXN1bHQ7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdmaWx0ZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlcihmaWx0ZXJPYmopIHtcblx0ICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICBpZiAoT2JqZWN0LmtleXMoZmlsdGVyT2JqKS5sZW5ndGggPT0gMCkge1xuXHQgICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmlzT25GaWx0ZXIgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmZpbHRlck9iaiA9IG51bGw7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5maWx0ZXJPYmogPSBmaWx0ZXJPYmo7XG5cdCAgICAgICAgdGhpcy5maWx0ZXJlZERhdGEgPSB0aGlzLmRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcblx0ICAgICAgICAgIHZhciB2YWxpZCA9IHRydWU7XG5cdCAgICAgICAgICB2YXIgZmlsdGVyVmFsID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgZm9yICh2YXIga2V5IGluIGZpbHRlck9iaikge1xuXHQgICAgICAgICAgICB2YXIgdGFyZ2V0VmFsID0gcm93W2tleV07XG5cdFxuXHQgICAgICAgICAgICBzd2l0Y2ggKGZpbHRlck9ialtrZXldLnR5cGUpIHtcblx0ICAgICAgICAgICAgICBjYXNlIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5OVU1CRVI6XG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIGZpbHRlclZhbCA9IGZpbHRlck9ialtrZXldLnZhbHVlLm51bWJlcjtcblx0ICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgY2FzZSBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuQ1VTVE9NOlxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICBmaWx0ZXJWYWwgPSB0eXBlb2YgZmlsdGVyT2JqW2tleV0udmFsdWUgPT09IFwib2JqZWN0XCIgPyB1bmRlZmluZWQgOiB0eXBlb2YgZmlsdGVyT2JqW2tleV0udmFsdWUgPT09IFwic3RyaW5nXCIgPyBmaWx0ZXJPYmpba2V5XS52YWx1ZS50b0xvd2VyQ2FzZSgpIDogZmlsdGVyT2JqW2tleV0udmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIGZpbHRlclZhbCA9IHR5cGVvZiBmaWx0ZXJPYmpba2V5XS52YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IGZpbHRlck9ialtrZXldLnZhbHVlLnRvTG93ZXJDYXNlKCkgOiBmaWx0ZXJPYmpba2V5XS52YWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlclZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBvbGQgZmlsdGVyXG5cdCAgICAgICAgICAgICAgICAgICAgZmlsdGVyVmFsID0gZmlsdGVyT2JqW2tleV0udG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgaWYgKF90aGlzMi5jb2xJbmZvc1trZXldKSB7XG5cdCAgICAgICAgICAgICAgdmFyIF9jb2xJbmZvcyRrZXkgPSBfdGhpczIuY29sSW5mb3Nba2V5XTtcblx0ICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gX2NvbEluZm9zJGtleS5mb3JtYXQ7XG5cdCAgICAgICAgICAgICAgdmFyIGZpbHRlckZvcm1hdHRlZCA9IF9jb2xJbmZvcyRrZXkuZmlsdGVyRm9ybWF0dGVkO1xuXHQgICAgICAgICAgICAgIHZhciBmb3JtYXRFeHRyYURhdGEgPSBfY29sSW5mb3Mka2V5LmZvcm1hdEV4dHJhRGF0YTtcblx0XG5cdCAgICAgICAgICAgICAgaWYgKGZpbHRlckZvcm1hdHRlZCAmJiBmb3JtYXQpIHtcblx0ICAgICAgICAgICAgICAgIHRhcmdldFZhbCA9IGZvcm1hdChyb3dba2V5XSwgcm93LCBmb3JtYXRFeHRyYURhdGEpO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgc3dpdGNoIChmaWx0ZXJPYmpba2V5XS50eXBlKSB7XG5cdCAgICAgICAgICAgICAgY2FzZSBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuTlVNQkVSOlxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICB2YWxpZCA9IF90aGlzMi5maWx0ZXJOdW1iZXIodGFyZ2V0VmFsLCBmaWx0ZXJWYWwsIGZpbHRlck9ialtrZXldLnZhbHVlLmNvbXBhcmF0b3IpO1xuXHQgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBjYXNlIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5EQVRFOlxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICB2YWxpZCA9IF90aGlzMi5maWx0ZXJEYXRlKHRhcmdldFZhbCwgZmlsdGVyVmFsKTtcblx0ICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgY2FzZSBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuQ1VTVE9NOlxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICB2YWxpZCA9IF90aGlzMi5maWx0ZXJDdXN0b20odGFyZ2V0VmFsLCBmaWx0ZXJWYWwsIGZpbHRlck9ialtrZXldLnZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgdmFsaWQgPSBfdGhpczIuZmlsdGVyVGV4dCh0YXJnZXRWYWwsIGZpbHRlclZhbCk7XG5cdCAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghdmFsaWQpIHtcblx0ICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgcmV0dXJuIHZhbGlkO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuaXNPbkZpbHRlciA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdmaWx0ZXJOdW1iZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlck51bWJlcih0YXJnZXRWYWwsIGZpbHRlclZhbCwgY29tcGFyYXRvcikge1xuXHQgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xuXHQgICAgICBzd2l0Y2ggKGNvbXBhcmF0b3IpIHtcblx0ICAgICAgICBjYXNlIFwiPVwiOlxuXHQgICAgICAgICAge1xuXHQgICAgICAgICAgICBpZiAodGFyZ2V0VmFsICE9IGZpbHRlclZhbCkge1xuXHQgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgY2FzZSBcIj5cIjpcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgaWYgKHRhcmdldFZhbCA8PSBmaWx0ZXJWYWwpIHtcblx0ICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIGNhc2UgXCI+PVwiOlxuXHQgICAgICAgICAge1xuXHQgICAgICAgICAgICBpZiAodGFyZ2V0VmFsIDwgZmlsdGVyVmFsKSB7XG5cdCAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICBjYXNlIFwiPFwiOlxuXHQgICAgICAgICAge1xuXHQgICAgICAgICAgICBpZiAodGFyZ2V0VmFsID49IGZpbHRlclZhbCkge1xuXHQgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgY2FzZSBcIjw9XCI6XG5cdCAgICAgICAgICB7XG5cdCAgICAgICAgICAgIGlmICh0YXJnZXRWYWwgPiBmaWx0ZXJWYWwpIHtcblx0ICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIGNhc2UgXCIhPVwiOlxuXHQgICAgICAgICAge1xuXHQgICAgICAgICAgICBpZiAodGFyZ2V0VmFsID09IGZpbHRlclZhbCkge1xuXHQgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk51bWJlciBjb21wYXJhdG9yIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB2YWxpZDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdmaWx0ZXJEYXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJEYXRlKHRhcmdldFZhbCwgZmlsdGVyVmFsKSB7XG5cdCAgICAgIHJldHVybiB0YXJnZXRWYWwuZ2V0RGF0ZSgpID09IGZpbHRlclZhbC5nZXREYXRlKCkgJiYgdGFyZ2V0VmFsLmdldE1vbnRoKCkgPT0gZmlsdGVyVmFsLmdldE1vbnRoKCkgJiYgdGFyZ2V0VmFsLmdldEZ1bGxZZWFyKCkgPT0gZmlsdGVyVmFsLmdldEZ1bGxZZWFyKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZmlsdGVyQ3VzdG9tJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJDdXN0b20odGFyZ2V0VmFsLCBmaWx0ZXJWYWwsIGNhbGxiYWNrSW5mbykge1xuXHQgICAgICBpZiAoY2FsbGJhY2tJbmZvICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrSW5mbyA9PT0gXCJvYmplY3RcIikge1xuXHQgICAgICAgIHJldHVybiBjYWxsYmFja0luZm8uY2FsbGJhY2sodGFyZ2V0VmFsLCBjYWxsYmFja0luZm8uY2FsbGJhY2tQYXJhbWV0ZXJzKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIGZpbHRlclRleHQodGFyZ2V0VmFsLCBmaWx0ZXJWYWwpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2ZpbHRlclRleHQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlclRleHQodGFyZ2V0VmFsLCBmaWx0ZXJWYWwpIHtcblx0ICAgICAgaWYgKHRhcmdldFZhbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJWYWwpID09IC0xKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0XG5cdCAgICAvKiBHZW5lcmFsIHNlYXJjaCBmdW5jdGlvblxyXG5cdCAgICAgKiBJdCB3aWxsIHNlYXJjaCBmb3IgdGhlIHRleHQgaWYgdGhlIGlucHV0IGluY2x1ZGVzIHRoYXQgdGV4dDtcclxuXHQgICAgICogSXQgd2lsbCBzZWFyY2ggZm9yIGV4YWN0IG51bWJlciBpZiB0aGUgaW5wdXQgaXMgdGhhdCBudW1iZXJcclxuXHQgICAgICovXG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2VhcmNoJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2goc2VhcmNoVGV4dCkge1xuXHQgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICAgIGlmIChzZWFyY2hUZXh0LnRyaW0oKSA9PT0gXCJcIikge1xuXHQgICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmlzT25GaWx0ZXIgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnNlYXJjaFRleHQgPSBudWxsO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBfdGhpczMuc2VhcmNoVGV4dCA9IHNlYXJjaFRleHQ7XG5cdCAgICAgICAgICB2YXIgc2VhcmNoVGV4dEFycmF5ID0gW107XG5cdFxuXHQgICAgICAgICAgaWYgKF90aGlzMy5tdWx0aUNvbHVtblNlYXJjaCkge1xuXHQgICAgICAgICAgICBzZWFyY2hUZXh0QXJyYXkgPSBzZWFyY2hUZXh0LnNwbGl0KCcgJyk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzZWFyY2hUZXh0QXJyYXkucHVzaChzZWFyY2hUZXh0KTtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICBfdGhpczMuZmlsdGVyZWREYXRhID0gX3RoaXMzLmRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcblx0ICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyb3cpO1xuXHQgICAgICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgLy8gZm9yIGxvb3BzIGFyZSB1Z2x5LCBidXQgcGVyZm9ybWFuY2UgbWF0dGVycyBoZXJlLlxuXHQgICAgICAgICAgICAvLyBBbmQgeW91IGNhbnQgYnJlYWsgZnJvbSBhIGZvckVhY2guXG5cdCAgICAgICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci12cy1mb3JlYWNoLzY2XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBrZXlzTGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBrZXlzTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblx0ICAgICAgICAgICAgICBpZiAoX3RoaXMzLmNvbEluZm9zW2tleV0gJiYgcm93W2tleV0pIHtcblx0ICAgICAgICAgICAgICAgIHZhciBfY29sSW5mb3Mka2V5MiA9IF90aGlzMy5jb2xJbmZvc1trZXldO1xuXHQgICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IF9jb2xJbmZvcyRrZXkyLmZvcm1hdDtcblx0ICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJGb3JtYXR0ZWQgPSBfY29sSW5mb3Mka2V5Mi5maWx0ZXJGb3JtYXR0ZWQ7XG5cdCAgICAgICAgICAgICAgICB2YXIgZm9ybWF0RXh0cmFEYXRhID0gX2NvbEluZm9zJGtleTIuZm9ybWF0RXh0cmFEYXRhO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNlYXJjaGFibGUgPSBfY29sSW5mb3Mka2V5Mi5zZWFyY2hhYmxlO1xuXHQgICAgICAgICAgICAgICAgdmFyIGhpZGRlbiA9IF9jb2xJbmZvcyRrZXkyLmhpZGRlbjtcblx0XG5cdCAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VmFsID0gcm93W2tleV07XG5cdCAgICAgICAgICAgICAgICBpZiAoc2VhcmNoYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyRm9ybWF0dGVkICYmIGZvcm1hdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldFZhbCA9IGZvcm1hdCh0YXJnZXRWYWwsIHJvdywgZm9ybWF0RXh0cmFEYXRhKTtcblx0ICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgdGV4dExlbmd0aCA9IHNlYXJjaFRleHRBcnJheS5sZW5ndGg7IGogPCB0ZXh0TGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyVmFsID0gc2VhcmNoVGV4dEFycmF5W2pdLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFZhbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJWYWwpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB2YWxpZDtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgX3RoaXMzLmlzT25GaWx0ZXIgPSB0cnVlO1xuXHQgICAgICAgIH0pKCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXREYXRhSWdub3JpbmdQYWdpbmF0aW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhSWdub3JpbmdQYWdpbmF0aW9uKCkge1xuXHQgICAgICB2YXIgX2RhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xuXHQgICAgICByZXR1cm4gX2RhdGE7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHZhciBfZGF0YSA9IHRoaXMuZ2V0Q3VycmVudERpc3BsYXlEYXRhKCk7XG5cdFxuXHQgICAgICBpZiAoX2RhdGEubGVuZ3RoID09IDApIHJldHVybiBfZGF0YTtcblx0XG5cdCAgICAgIGlmICh0aGlzLnJlbW90ZSB8fCAhdGhpcy5lbmFibGVQYWdpbmF0aW9uKSB7XG5cdCAgICAgICAgcmV0dXJuIF9kYXRhO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciByZXN1bHQgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5wYWdlT2JqLnN0YXJ0OyBpIDw9IHRoaXMucGFnZU9iai5lbmQ7IGkrKykge1xuXHQgICAgICAgICAgcmVzdWx0LnB1c2goX2RhdGFbaV0pO1xuXHQgICAgICAgICAgaWYgKGkgKyAxID09IF9kYXRhLmxlbmd0aCkgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRLZXlGaWVsZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0S2V5RmllbGQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmtleUZpZWxkO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldERhdGFOdW0nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFOdW0oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpLmxlbmd0aDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpc0NoYW5nZWRQYWdlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NoYW5nZWRQYWdlKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5wYWdlT2JqLnN0YXJ0ICYmIHRoaXMucGFnZU9iai5lbmQgPyB0cnVlIDogZmFsc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0QWxsUm93a2V5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGxSb3drZXkoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmRhdGEubWFwKGZ1bmN0aW9uIChyb3cpIHtcblx0ICAgICAgICByZXR1cm4gcm93W3RoaXMua2V5RmllbGRdO1xuXHQgICAgICB9LCB0aGlzKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBUYWJsZURhdGFTdG9yZTtcblx0fSkoKTtcblx0XG5cdGV4cG9ydHMuVGFibGVEYXRhU3RvcmUgPSBUYWJsZURhdGFTdG9yZTtcblx0XG5cdDtcblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cbi8qKiovIH0sXG4vKiAxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXHRcblx0dmFyIF9yZWFjdElucHV0QXV0b3NpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0XG5cdHZhciBfcmVhY3RJbnB1dEF1dG9zaXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0SW5wdXRBdXRvc2l6ZSk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXHRcblx0dmFyIF91dGlsc1N0cmlwRGlhY3JpdGljcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF91dGlsc1N0cmlwRGlhY3JpdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc1N0cmlwRGlhY3JpdGljcyk7XG5cdFxuXHR2YXIgX0FzeW5jID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdFxuXHR2YXIgX0FzeW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FzeW5jKTtcblx0XG5cdHZhciBfT3B0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdFxuXHR2YXIgX09wdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PcHRpb24pO1xuXHRcblx0dmFyIF9WYWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHRcblx0dmFyIF9WYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WYWx1ZSk7XG5cdFxuXHRmdW5jdGlvbiBzdHJpbmdpZnlWYWx1ZSh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHR9XG5cdFxuXHR2YXIgc3RyaW5nT3JOb2RlID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vbmVPZlR5cGUoW19yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm5vZGVdKTtcblx0XG5cdHZhciBTZWxlY3QgPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlQ2xhc3Moe1xuXHRcblx0XHRkaXNwbGF5TmFtZTogJ1NlbGVjdCcsXG5cdFxuXHRcdHByb3BUeXBlczoge1xuXHRcdFx0YWRkTGFiZWxUZXh0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gcGxhY2Vob2xkZXIgZGlzcGxheWVkIHdoZW4geW91IHdhbnQgdG8gYWRkIGEgbGFiZWwgb24gYSBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdFx0YWxsb3dDcmVhdGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBhbGxvdyBjcmVhdGlvbiBvZiBuZXcgZW50cmllc1xuXHRcdFx0YXV0b0JsdXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0XHRcdGF1dG9mb2N1czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyBhdXRvZm9jdXMgdGhlIGNvbXBvbmVudCBvbiBtb3VudFxuXHRcdFx0YmFja3NwYWNlUmVtb3ZlczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIGJhY2tzcGFjZSByZW1vdmVzIGFuIGl0ZW0gaWYgdGhlcmUgaXMgbm8gdGV4dCBpbnB1dFxuXHRcdFx0Y2xhc3NOYW1lOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRcdFx0Y2xlYXJBbGxUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHRpdGxlIGZvciB0aGUgXCJjbGVhclwiIGNvbnRyb2wgd2hlbiBtdWx0aTogdHJ1ZVxuXHRcdFx0Y2xlYXJWYWx1ZVRleHQ6IHN0cmluZ09yTm9kZSwgLy8gdGl0bGUgZm9yIHRoZSBcImNsZWFyXCIgY29udHJvbFxuXHRcdFx0Y2xlYXJhYmxlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHNob3VsZCBpdCBiZSBwb3NzaWJsZSB0byByZXNldCB2YWx1ZVxuXHRcdFx0ZGVsaW1pdGVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gZGVsaW1pdGVyIHRvIHVzZSB0byBqb2luIG11bHRpcGxlIHZhbHVlcyBmb3IgdGhlIGhpZGRlbiBmaWVsZCB2YWx1ZVxuXHRcdFx0ZGlzYWJsZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0aGUgU2VsZWN0IGlzIGRpc2FibGVkIG9yIG5vdFxuXHRcdFx0ZXNjYXBlQ2xlYXJzVmFsdWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciBlc2NhcGUgY2xlYXJzIHRoZSB2YWx1ZSB3aGVuIHRoZSBtZW51IGlzIGNsb3NlZFxuXHRcdFx0ZmlsdGVyT3B0aW9uOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBmaWx0ZXIgYSBzaW5nbGUgb3B0aW9uIChvcHRpb24sIGZpbHRlclN0cmluZylcblx0XHRcdGZpbHRlck9wdGlvbnM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYW55LCAvLyBib29sZWFuIHRvIGVuYWJsZSBkZWZhdWx0IGZpbHRlcmluZyBvciBmdW5jdGlvbiB0byBmaWx0ZXIgdGhlIG9wdGlvbnMgYXJyYXkgKFtvcHRpb25zXSwgZmlsdGVyU3RyaW5nLCBbdmFsdWVzXSlcblx0XHRcdGlnbm9yZUFjY2VudHM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBzdHJpcCBkaWFjcml0aWNzIHdoZW4gZmlsdGVyaW5nXG5cdFx0XHRpZ25vcmVDYXNlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdG8gcGVyZm9ybSBjYXNlLWluc2Vuc2l0aXZlIGZpbHRlcmluZ1xuXHRcdFx0aW5wdXRQcm9wczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QsIC8vIGN1c3RvbSBhdHRyaWJ1dGVzIGZvciB0aGUgSW5wdXRcblx0XHRcdGlzTG9hZGluZzogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRoZSBTZWxlY3QgaXMgbG9hZGluZyBleHRlcm5hbGx5IG9yIG5vdCAoc3VjaCBhcyBvcHRpb25zIGJlaW5nIGxvYWRlZClcblx0XHRcdGxhYmVsS2V5OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gcGF0aCBvZiB0aGUgbGFiZWwgdmFsdWUgaW4gb3B0aW9uIG9iamVjdHNcblx0XHRcdG1hdGNoUG9zOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gKGFueXxzdGFydCkgbWF0Y2ggdGhlIHN0YXJ0IG9yIGVudGlyZSBzdHJpbmcgd2hlbiBmaWx0ZXJpbmdcblx0XHRcdG1hdGNoUHJvcDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIC8vIChhbnl8bGFiZWx8dmFsdWUpIHdoaWNoIG9wdGlvbiBwcm9wZXJ0eSB0byBmaWx0ZXIgb25cblx0XHRcdG1lbnVCdWZmZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLCAvLyBvcHRpb25hbCBidWZmZXIgKGluIHB4KSBiZXR3ZWVuIHRoZSBib3R0b20gb2YgdGhlIHZpZXdwb3J0IGFuZCB0aGUgYm90dG9tIG9mIHRoZSBtZW51XG5cdFx0XHRtZW51Q29udGFpbmVyU3R5bGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub2JqZWN0LCAvLyBvcHRpb25hbCBzdHlsZSB0byBhcHBseSB0byB0aGUgbWVudSBjb250YWluZXJcblx0XHRcdG1lbnVTdHlsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QsIC8vIG9wdGlvbmFsIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBtZW51XG5cdFx0XHRtdWx0aTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdFx0bmFtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIC8vIGdlbmVyYXRlcyBhIGhpZGRlbiA8aW5wdXQgLz4gdGFnIHdpdGggdGhpcyBmaWVsZCBuYW1lIGZvciBodG1sIGZvcm1zXG5cdFx0XHRuZXdPcHRpb25DcmVhdG9yOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIGZhY3RvcnkgdG8gY3JlYXRlIG5ldyBvcHRpb25zIHdoZW4gYWxsb3dDcmVhdGUgc2V0XG5cdFx0XHRub1Jlc3VsdHNUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBzZWFyY2ggcmVzdWx0c1xuXHRcdFx0b25CbHVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQmx1ciBoYW5kbGVyOiBmdW5jdGlvbiAoZXZlbnQpIHt9XG5cdFx0XHRvbkJsdXJSZXNldHNJbnB1dDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIGlucHV0IGlzIGNsZWFyZWQgb24gYmx1clxuXHRcdFx0b25DaGFuZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7fVxuXHRcdFx0b25DbG9zZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyBmaXJlcyB3aGVuIHRoZSBtZW51IGlzIGNsb3NlZFxuXHRcdFx0b25Gb2N1czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyBvbkZvY3VzIGhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge31cblx0XHRcdG9uSW5wdXRDaGFuZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb25JbnB1dENoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge31cblx0XHRcdG9uTWVudVNjcm9sbFRvQm90dG9tOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIGZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgc2Nyb2xsZWQgdG8gdGhlIGJvdHRvbTsgY2FuIGJlIHVzZWQgdG8gcGFnaW5hdGUgb3B0aW9uc1xuXHRcdFx0b25PcGVuOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIGZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgb3BlbmVkXG5cdFx0XHRvblZhbHVlQ2xpY2s6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb25DbGljayBoYW5kbGVyIGZvciB2YWx1ZSBsYWJlbHM6IGZ1bmN0aW9uICh2YWx1ZSwgZXZlbnQpIHt9XG5cdFx0XHRvcHRpb25Db21wb25lbnQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb3B0aW9uIGNvbXBvbmVudCB0byByZW5kZXIgaW4gZHJvcGRvd25cblx0XHRcdG9wdGlvblJlbmRlcmVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG9wdGlvblJlbmRlcmVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHRcdFx0b3B0aW9uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSwgLy8gYXJyYXkgb2Ygb3B0aW9uc1xuXHRcdFx0cGxhY2Vob2xkZXI6IHN0cmluZ09yTm9kZSwgLy8gZmllbGQgcGxhY2Vob2xkZXIsIGRpc3BsYXllZCB3aGVuIHRoZXJlJ3Mgbm8gdmFsdWVcblx0XHRcdHJlcXVpcmVkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIGFwcGxpZXMgSFRNTDUgcmVxdWlyZWQgYXR0cmlidXRlIHdoZW4gbmVlZGVkXG5cdFx0XHRzY3JvbGxNZW51SW50b1ZpZXc6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gYm9vbGVhbiB0byBlbmFibGUgdGhlIHZpZXdwb3J0IHRvIHNoaWZ0IHNvIHRoYXQgdGhlIGZ1bGwgbWVudSBmdWxseSB2aXNpYmxlIHdoZW4gZW5nYWdlZFxuXHRcdFx0c2VhcmNoYWJsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRvIGVuYWJsZSBzZWFyY2hpbmcgZmVhdHVyZSBvciBub3Rcblx0XHRcdHNpbXBsZVZhbHVlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHBhc3MgdGhlIHZhbHVlIHRvIG9uQ2hhbmdlIGFzIGEgc2ltcGxlIHZhbHVlIChsZWdhY3kgcHJlIDEuMCBtb2RlKSwgZGVmYXVsdHMgdG8gZmFsc2Vcblx0XHRcdHN0eWxlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdCwgLy8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIGNvbnRyb2xcblx0XHRcdHRhYkluZGV4OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gb3B0aW9uYWwgdGFiIGluZGV4IG9mIHRoZSBjb250cm9sXG5cdFx0XHR2YWx1ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hbnksIC8vIGluaXRpYWwgZmllbGQgdmFsdWVcblx0XHRcdHZhbHVlQ29tcG9uZW50OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIHZhbHVlIGNvbXBvbmVudCB0byByZW5kZXJcblx0XHRcdHZhbHVlS2V5OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gcGF0aCBvZiB0aGUgbGFiZWwgdmFsdWUgaW4gb3B0aW9uIG9iamVjdHNcblx0XHRcdHZhbHVlUmVuZGVyZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gdmFsdWVSZW5kZXJlcjogZnVuY3Rpb24gKG9wdGlvbikge31cblx0XHRcdHdyYXBwZXJTdHlsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QgfSxcblx0XG5cdFx0Ly8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIGNvbXBvbmVudCB3cmFwcGVyXG5cdFx0c3RhdGljczogeyBBc3luYzogX0FzeW5jMlsnZGVmYXVsdCddIH0sXG5cdFxuXHRcdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0YWRkTGFiZWxUZXh0OiAnQWRkIFwie2xhYmVsfVwiPycsXG5cdFx0XHRcdGFsbG93Q3JlYXRlOiBmYWxzZSxcblx0XHRcdFx0YmFja3NwYWNlUmVtb3ZlczogdHJ1ZSxcblx0XHRcdFx0Y2xlYXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRjbGVhckFsbFRleHQ6ICdDbGVhciBhbGwnLFxuXHRcdFx0XHRjbGVhclZhbHVlVGV4dDogJ0NsZWFyIHZhbHVlJyxcblx0XHRcdFx0ZGVsaW1pdGVyOiAnLCcsXG5cdFx0XHRcdGRpc2FibGVkOiBmYWxzZSxcblx0XHRcdFx0ZXNjYXBlQ2xlYXJzVmFsdWU6IHRydWUsXG5cdFx0XHRcdGZpbHRlck9wdGlvbnM6IHRydWUsXG5cdFx0XHRcdGlnbm9yZUFjY2VudHM6IHRydWUsXG5cdFx0XHRcdGlnbm9yZUNhc2U6IHRydWUsXG5cdFx0XHRcdGlucHV0UHJvcHM6IHt9LFxuXHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRsYWJlbEtleTogJ2xhYmVsJyxcblx0XHRcdFx0bWF0Y2hQb3M6ICdhbnknLFxuXHRcdFx0XHRtYXRjaFByb3A6ICdhbnknLFxuXHRcdFx0XHRtZW51QnVmZmVyOiAwLFxuXHRcdFx0XHRtdWx0aTogZmFsc2UsXG5cdFx0XHRcdG5vUmVzdWx0c1RleHQ6ICdObyByZXN1bHRzIGZvdW5kJyxcblx0XHRcdFx0b25CbHVyUmVzZXRzSW5wdXQ6IHRydWUsXG5cdFx0XHRcdG9wdGlvbkNvbXBvbmVudDogX09wdGlvbjJbJ2RlZmF1bHQnXSxcblx0XHRcdFx0cGxhY2Vob2xkZXI6ICdTZWxlY3QuLi4nLFxuXHRcdFx0XHRyZXF1aXJlZDogZmFsc2UsXG5cdFx0XHRcdHNjcm9sbE1lbnVJbnRvVmlldzogdHJ1ZSxcblx0XHRcdFx0c2VhcmNoYWJsZTogdHJ1ZSxcblx0XHRcdFx0c2ltcGxlVmFsdWU6IGZhbHNlLFxuXHRcdFx0XHR2YWx1ZUNvbXBvbmVudDogX1ZhbHVlMlsnZGVmYXVsdCddLFxuXHRcdFx0XHR2YWx1ZUtleTogJ3ZhbHVlJ1xuXHRcdFx0fTtcblx0XHR9LFxuXHRcblx0XHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0XHRpc0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0XHRyZXF1aXJlZDogdGhpcy5wcm9wcy5yZXF1aXJlZCAmJiB0aGlzLmhhbmRsZVJlcXVpcmVkKHRoaXMucHJvcHMudmFsdWUsIHRoaXMucHJvcHMubXVsdGkpXG5cdFx0XHR9O1xuXHRcdH0sXG5cdFxuXHRcdGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRcdGlmICh0aGlzLnByb3BzLmF1dG9mb2N1cykge1xuXHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Y29tcG9uZW50V2lsbFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuXHRcdFx0aWYgKG5leHRTdGF0ZS5pc09wZW4gIT09IHRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRcdHZhciBoYW5kbGVyID0gbmV4dFN0YXRlLmlzT3BlbiA/IG5leHRQcm9wcy5vbk9wZW4gOiBuZXh0UHJvcHMub25DbG9zZTtcblx0XHRcdFx0aGFuZGxlciAmJiBoYW5kbGVyKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Y29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcblx0XHRcdC8vIGZvY3VzIHRvIHRoZSBzZWxlY3RlZCBvcHRpb25cblx0XHRcdGlmICh0aGlzLnJlZnMubWVudSAmJiB0aGlzLnJlZnMuZm9jdXNlZCAmJiB0aGlzLnN0YXRlLmlzT3BlbiAmJiAhdGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uKSB7XG5cdFx0XHRcdHZhciBmb2N1c2VkT3B0aW9uTm9kZSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLnJlZnMuZm9jdXNlZCk7XG5cdFx0XHRcdHZhciBtZW51Tm9kZSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLnJlZnMubWVudSk7XG5cdFx0XHRcdG1lbnVOb2RlLnNjcm9sbFRvcCA9IGZvY3VzZWRPcHRpb25Ob2RlLm9mZnNldFRvcDtcblx0XHRcdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRcdHRoaXMuaGFzU2Nyb2xsZWRUb09wdGlvbiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChwcmV2U3RhdGUuaW5wdXRWYWx1ZSAhPT0gdGhpcy5zdGF0ZS5pbnB1dFZhbHVlICYmIHRoaXMucHJvcHMub25JbnB1dENoYW5nZSkge1xuXHRcdFx0XHR0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UodGhpcy5zdGF0ZS5pbnB1dFZhbHVlKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSAmJiB0aGlzLnJlZnMuZm9jdXNlZCAmJiB0aGlzLnJlZnMubWVudSkge1xuXHRcdFx0XHR0aGlzLl9zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0XHR2YXIgZm9jdXNlZERPTSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLnJlZnMuZm9jdXNlZCk7XG5cdFx0XHRcdHZhciBtZW51RE9NID0gX3JlYWN0RG9tMlsnZGVmYXVsdCddLmZpbmRET01Ob2RlKHRoaXMucmVmcy5tZW51KTtcblx0XHRcdFx0dmFyIGZvY3VzZWRSZWN0ID0gZm9jdXNlZERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0dmFyIG1lbnVSZWN0ID0gbWVudURPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0aWYgKGZvY3VzZWRSZWN0LmJvdHRvbSA+IG1lbnVSZWN0LmJvdHRvbSB8fCBmb2N1c2VkUmVjdC50b3AgPCBtZW51UmVjdC50b3ApIHtcblx0XHRcdFx0XHRtZW51RE9NLnNjcm9sbFRvcCA9IGZvY3VzZWRET00ub2Zmc2V0VG9wICsgZm9jdXNlZERPTS5jbGllbnRIZWlnaHQgLSBtZW51RE9NLm9mZnNldEhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMucHJvcHMuc2Nyb2xsTWVudUludG9WaWV3ICYmIHRoaXMucmVmcy5tZW51Q29udGFpbmVyKSB7XG5cdFx0XHRcdHZhciBtZW51Q29udGFpbmVyUmVjdCA9IHRoaXMucmVmcy5tZW51Q29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRpZiAod2luZG93LmlubmVySGVpZ2h0IDwgbWVudUNvbnRhaW5lclJlY3QuYm90dG9tICsgdGhpcy5wcm9wcy5tZW51QnVmZmVyKSB7XG5cdFx0XHRcdFx0d2luZG93LnNjcm9sbFRvKDAsIHdpbmRvdy5zY3JvbGxZICsgbWVudUNvbnRhaW5lclJlY3QuYm90dG9tICsgdGhpcy5wcm9wcy5tZW51QnVmZmVyIC0gd2luZG93LmlubmVySGVpZ2h0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHByZXZQcm9wcy5kaXNhYmxlZCAhPT0gdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHsgaXNGb2N1c2VkOiBmYWxzZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHRcdGlmICghdGhpcy5yZWZzLmlucHV0KSByZXR1cm47XG5cdFx0XHR0aGlzLnJlZnMuaW5wdXQuZm9jdXMoKTtcblx0XHR9LFxuXHRcblx0XHRibHVySW5wdXQ6IGZ1bmN0aW9uIGJsdXJJbnB1dCgpIHtcblx0XHRcdGlmICghdGhpcy5yZWZzLmlucHV0KSByZXR1cm47XG5cdFx0XHR0aGlzLnJlZnMuaW5wdXQuYmx1cigpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZFxuXHRcdFx0dGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldmVudCkge1xuXHRcdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIG5vdCBiZWluZyBkcmFnZ2VkXG5cdFx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkLCBJbiB0aGlzIGNhc2Vcblx0XHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXHRcblx0XHRcdC8vIEZpcmUgdGhlIG1vdXNlIGV2ZW50c1xuXHRcdFx0dGhpcy5oYW5kbGVNb3VzZURvd24oZXZlbnQpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmRDbGVhclZhbHVlKGV2ZW50KSB7XG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkLCBJbiB0aGlzIGNhc2Vcblx0XHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXHRcblx0XHRcdC8vIENsZWFyIHRoZSB2YWx1ZVxuXHRcdFx0dGhpcy5jbGVhclZhbHVlKGV2ZW50KTtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVNb3VzZURvd246IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuXHRcdFx0Ly8gaWYgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgYSBtb3VzZWRvd24gYW5kIG5vdCB0aGUgcHJpbWFyeVxuXHRcdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIHByZXZlbnQgZGVmYXVsdCBldmVudCBoYW5kbGVyc1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcblx0XHRcdC8vIGZvciB0aGUgbm9uLXNlYXJjaGFibGUgc2VsZWN0LCB0b2dnbGUgdGhlIG1lbnVcblx0XHRcdGlmICghdGhpcy5wcm9wcy5zZWFyY2hhYmxlKSB7XG5cdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGlzT3BlbjogIXRoaXMuc3RhdGUuaXNPcGVuXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICh0aGlzLnN0YXRlLmlzRm9jdXNlZCkge1xuXHRcdFx0XHQvLyBpZiB0aGUgaW5wdXQgaXMgZm9jdXNlZCwgZW5zdXJlIHRoZSBtZW51IGlzIG9wZW5cblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBvdGhlcndpc2UsIGZvY3VzIHRoZSBpbnB1dCBhbmQgb3BlbiB0aGUgbWVudVxuXHRcdFx0XHR0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IHRydWU7XG5cdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRoYW5kbGVNb3VzZURvd25PbkFycm93OiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25PbkFycm93KGV2ZW50KSB7XG5cdFx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0XHQvLyBidXR0b24sIG9yIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGlnbm9yZSBpdC5cblx0XHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8IGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQvLyBJZiB0aGUgbWVudSBpc24ndCBvcGVuLCBsZXQgdGhlIGV2ZW50IGJ1YmJsZSB0byB0aGUgbWFpbiBoYW5kbGVNb3VzZURvd25cblx0XHRcdGlmICghdGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Ly8gcHJldmVudCBkZWZhdWx0IGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQvLyBjbG9zZSB0aGUgbWVudVxuXHRcdFx0dGhpcy5jbG9zZU1lbnUoKTtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVNb3VzZURvd25Pbk1lbnU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bk9uTWVudShldmVudCkge1xuXHRcdFx0Ly8gaWYgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgYSBtb3VzZWRvd24gYW5kIG5vdCB0aGUgcHJpbWFyeVxuXHRcdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcblx0XHRcdHRoaXMuX29wZW5BZnRlckZvY3VzID0gdHJ1ZTtcblx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHR9LFxuXHRcblx0XHRjbG9zZU1lbnU6IGZ1bmN0aW9uIGNsb3NlTWVudSgpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IHRoaXMuc3RhdGUuaXNGb2N1c2VkICYmICF0aGlzLnByb3BzLm11bHRpLFxuXHRcdFx0XHRpbnB1dFZhbHVlOiAnJ1xuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLmhhc1Njcm9sbGVkVG9PcHRpb24gPSBmYWxzZTtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVJbnB1dEZvY3VzOiBmdW5jdGlvbiBoYW5kbGVJbnB1dEZvY3VzKGV2ZW50KSB7XG5cdFx0XHR2YXIgaXNPcGVuID0gdGhpcy5zdGF0ZS5pc09wZW4gfHwgdGhpcy5fb3BlbkFmdGVyRm9jdXM7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB7XG5cdFx0XHRcdHRoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNGb2N1c2VkOiB0cnVlLFxuXHRcdFx0XHRpc09wZW46IGlzT3BlblxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IGZhbHNlO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZUlucHV0Qmx1cjogZnVuY3Rpb24gaGFuZGxlSW5wdXRCbHVyKGV2ZW50KSB7XG5cdFx0XHRpZiAodGhpcy5yZWZzLm1lbnUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5pc0VxdWFsTm9kZSh0aGlzLnJlZnMubWVudSkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICh0aGlzLnByb3BzLm9uQmx1cikge1xuXHRcdFx0XHR0aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgb25CbHVycmVkU3RhdGUgPSB7XG5cdFx0XHRcdGlzRm9jdXNlZDogZmFsc2UsXG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogZmFsc2Vcblx0XHRcdH07XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5vbkJsdXJSZXNldHNJbnB1dCkge1xuXHRcdFx0XHRvbkJsdXJyZWRTdGF0ZS5pbnB1dFZhbHVlID0gJyc7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNldFN0YXRlKG9uQmx1cnJlZFN0YXRlKTtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVJbnB1dENoYW5nZTogZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UoZXZlbnQpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogZmFsc2UsXG5cdFx0XHRcdGlucHV0VmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlS2V5RG93bjogZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuXHRcdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVybjtcblx0XHRcdHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuXHRcdFx0XHRjYXNlIDg6XG5cdFx0XHRcdFx0Ly8gYmFja3NwYWNlXG5cdFx0XHRcdFx0aWYgKCF0aGlzLnN0YXRlLmlucHV0VmFsdWUgJiYgdGhpcy5wcm9wcy5iYWNrc3BhY2VSZW1vdmVzKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0dGhpcy5wb3BWYWx1ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdGNhc2UgOTpcblx0XHRcdFx0XHQvLyB0YWJcblx0XHRcdFx0XHRpZiAoZXZlbnQuc2hpZnRLZXkgfHwgIXRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuc2VsZWN0Rm9jdXNlZE9wdGlvbigpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0XHQvLyBlbnRlclxuXHRcdFx0XHRcdGlmICghdGhpcy5zdGF0ZS5pc09wZW4pIHJldHVybjtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0XHQvLyBlc2NhcGVcblx0XHRcdFx0XHRpZiAodGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuY2xvc2VNZW51KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLmNsZWFyYWJsZSAmJiB0aGlzLnByb3BzLmVzY2FwZUNsZWFyc1ZhbHVlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsZWFyVmFsdWUoZXZlbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHQvLyB1cFxuXHRcdFx0XHRcdHRoaXMuZm9jdXNQcmV2aW91c09wdGlvbigpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRcdC8vIGRvd25cblx0XHRcdFx0XHR0aGlzLmZvY3VzTmV4dE9wdGlvbigpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBjYXNlIDE4ODogLy8gLFxuXHRcdFx0XHQvLyBcdGlmICh0aGlzLnByb3BzLmFsbG93Q3JlYXRlICYmIHRoaXMucHJvcHMubXVsdGkpIHtcblx0XHRcdFx0Ly8gXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdC8vIFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0Ly8gXHRcdHRoaXMuc2VsZWN0Rm9jdXNlZE9wdGlvbigpO1xuXHRcdFx0XHQvLyBcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFx0XHRyZXR1cm47XG5cdFx0XHRcdC8vIFx0fVxuXHRcdFx0XHQvLyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVZhbHVlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZVZhbHVlQ2xpY2sob3B0aW9uLCBldmVudCkge1xuXHRcdFx0aWYgKCF0aGlzLnByb3BzLm9uVmFsdWVDbGljaykgcmV0dXJuO1xuXHRcdFx0dGhpcy5wcm9wcy5vblZhbHVlQ2xpY2sob3B0aW9uLCBldmVudCk7XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlTWVudVNjcm9sbDogZnVuY3Rpb24gaGFuZGxlTWVudVNjcm9sbChldmVudCkge1xuXHRcdFx0aWYgKCF0aGlzLnByb3BzLm9uTWVudVNjcm9sbFRvQm90dG9tKSByZXR1cm47XG5cdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcblx0XHRcdGlmICh0YXJnZXQuc2Nyb2xsSGVpZ2h0ID4gdGFyZ2V0Lm9mZnNldEhlaWdodCAmJiAhKHRhcmdldC5zY3JvbGxIZWlnaHQgLSB0YXJnZXQub2Zmc2V0SGVpZ2h0IC0gdGFyZ2V0LnNjcm9sbFRvcCkpIHtcblx0XHRcdFx0dGhpcy5wcm9wcy5vbk1lbnVTY3JvbGxUb0JvdHRvbSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVJlcXVpcmVkOiBmdW5jdGlvbiBoYW5kbGVSZXF1aXJlZCh2YWx1ZSwgbXVsdGkpIHtcblx0XHRcdGlmICghdmFsdWUpIHJldHVybiB0cnVlO1xuXHRcdFx0cmV0dXJuIG11bHRpID8gdmFsdWUubGVuZ3RoID09PSAwIDogT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcblx0XHR9LFxuXHRcblx0XHRnZXRPcHRpb25MYWJlbDogZnVuY3Rpb24gZ2V0T3B0aW9uTGFiZWwob3ApIHtcblx0XHRcdHJldHVybiBvcFt0aGlzLnByb3BzLmxhYmVsS2V5XTtcblx0XHR9LFxuXHRcblx0XHRnZXRWYWx1ZUFycmF5OiBmdW5jdGlvbiBnZXRWYWx1ZUFycmF5KCkge1xuXHRcdFx0dmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcblx0XHRcdGlmICh0aGlzLnByb3BzLm11bHRpKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB2YWx1ZSA9IHZhbHVlLnNwbGl0KHRoaXMucHJvcHMuZGVsaW1pdGVyKTtcblx0XHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW107XG5cdFx0XHRcdFx0dmFsdWUgPSBbdmFsdWVdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZS5tYXAodGhpcy5leHBhbmRWYWx1ZSkuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGV4cGFuZGVkVmFsdWUgPSB0aGlzLmV4cGFuZFZhbHVlKHZhbHVlKTtcblx0XHRcdHJldHVybiBleHBhbmRlZFZhbHVlID8gW2V4cGFuZGVkVmFsdWVdIDogW107XG5cdFx0fSxcblx0XG5cdFx0ZXhwYW5kVmFsdWU6IGZ1bmN0aW9uIGV4cGFuZFZhbHVlKHZhbHVlKSB7XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSByZXR1cm4gdmFsdWU7XG5cdFx0XHR2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0XHRcdHZhciBvcHRpb25zID0gX3Byb3BzLm9wdGlvbnM7XG5cdFx0XHR2YXIgdmFsdWVLZXkgPSBfcHJvcHMudmFsdWVLZXk7XG5cdFxuXHRcdFx0aWYgKCFvcHRpb25zKSByZXR1cm47XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKG9wdGlvbnNbaV1bdmFsdWVLZXldID09PSB2YWx1ZSkgcmV0dXJuIG9wdGlvbnNbaV07XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0c2V0VmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0XHRcdGlmICh0aGlzLnByb3BzLmF1dG9CbHVyKSB7XG5cdFx0XHRcdHRoaXMuYmx1cklucHV0KCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMucHJvcHMub25DaGFuZ2UpIHJldHVybjtcblx0XHRcdGlmICh0aGlzLnByb3BzLnJlcXVpcmVkKSB7XG5cdFx0XHRcdHZhciByZXF1aXJlZCA9IHRoaXMuaGFuZGxlUmVxdWlyZWQodmFsdWUsIHRoaXMucHJvcHMubXVsdGkpO1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHsgcmVxdWlyZWQ6IHJlcXVpcmVkIH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMucHJvcHMuc2ltcGxlVmFsdWUgJiYgdmFsdWUpIHtcblx0XHRcdFx0dmFsdWUgPSB0aGlzLnByb3BzLm11bHRpID8gdmFsdWUubWFwKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGlbX3RoaXMucHJvcHMudmFsdWVLZXldO1xuXHRcdFx0XHR9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKSA6IHZhbHVlW3RoaXMucHJvcHMudmFsdWVLZXldO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5wcm9wcy5vbkNoYW5nZSh2YWx1ZSk7XG5cdFx0fSxcblx0XG5cdFx0c2VsZWN0VmFsdWU6IGZ1bmN0aW9uIHNlbGVjdFZhbHVlKHZhbHVlKSB7XG5cdFx0XHR0aGlzLmhhc1Njcm9sbGVkVG9PcHRpb24gPSBmYWxzZTtcblx0XHRcdGlmICh0aGlzLnByb3BzLm11bHRpKSB7XG5cdFx0XHRcdHRoaXMuYWRkVmFsdWUodmFsdWUpO1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpbnB1dFZhbHVlOiAnJ1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogdGhpcy5zdGF0ZS5pc0ZvY3VzZWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0YWRkVmFsdWU6IGZ1bmN0aW9uIGFkZFZhbHVlKHZhbHVlKSB7XG5cdFx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSgpO1xuXHRcdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LmNvbmNhdCh2YWx1ZSkpO1xuXHRcdH0sXG5cdFxuXHRcdHBvcFZhbHVlOiBmdW5jdGlvbiBwb3BWYWx1ZSgpIHtcblx0XHRcdHZhciB2YWx1ZUFycmF5ID0gdGhpcy5nZXRWYWx1ZUFycmF5KCk7XG5cdFx0XHRpZiAoIXZhbHVlQXJyYXkubGVuZ3RoKSByZXR1cm47XG5cdFx0XHRpZiAodmFsdWVBcnJheVt2YWx1ZUFycmF5Lmxlbmd0aCAtIDFdLmNsZWFyYWJsZVZhbHVlID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LnNsaWNlKDAsIHZhbHVlQXJyYXkubGVuZ3RoIC0gMSkpO1xuXHRcdH0sXG5cdFxuXHRcdHJlbW92ZVZhbHVlOiBmdW5jdGlvbiByZW1vdmVWYWx1ZSh2YWx1ZSkge1xuXHRcdFx0dmFyIHZhbHVlQXJyYXkgPSB0aGlzLmdldFZhbHVlQXJyYXkoKTtcblx0XHRcdHRoaXMuc2V0VmFsdWUodmFsdWVBcnJheS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0cmV0dXJuIGkgIT09IHZhbHVlO1xuXHRcdFx0fSkpO1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdH0sXG5cdFxuXHRcdGNsZWFyVmFsdWU6IGZ1bmN0aW9uIGNsZWFyVmFsdWUoZXZlbnQpIHtcblx0XHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHRcdC8vIGJ1dHRvbiwgaWdub3JlIGl0LlxuXHRcdFx0aWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLnNldFZhbHVlKG51bGwpO1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnXG5cdFx0XHR9LCB0aGlzLmZvY3VzKTtcblx0XHR9LFxuXHRcblx0XHRmb2N1c09wdGlvbjogZnVuY3Rpb24gZm9jdXNPcHRpb24ob3B0aW9uKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbjogb3B0aW9uXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcblx0XHRmb2N1c05leHRPcHRpb246IGZ1bmN0aW9uIGZvY3VzTmV4dE9wdGlvbigpIHtcblx0XHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbignbmV4dCcpO1xuXHRcdH0sXG5cdFxuXHRcdGZvY3VzUHJldmlvdXNPcHRpb246IGZ1bmN0aW9uIGZvY3VzUHJldmlvdXNPcHRpb24oKSB7XG5cdFx0XHR0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oJ3ByZXZpb3VzJyk7XG5cdFx0fSxcblx0XG5cdFx0Zm9jdXNBZGphY2VudE9wdGlvbjogZnVuY3Rpb24gZm9jdXNBZGphY2VudE9wdGlvbihkaXIpIHtcblx0XHRcdHZhciBvcHRpb25zID0gdGhpcy5fdmlzaWJsZU9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdHJldHVybiAhaS5kaXNhYmxlZDtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5fc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSB0cnVlO1xuXHRcdFx0aWYgKCF0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRcdFx0aW5wdXRWYWx1ZTogJycsXG5cdFx0XHRcdFx0Zm9jdXNlZE9wdGlvbjogdGhpcy5fZm9jdXNlZE9wdGlvbiB8fCBvcHRpb25zW2RpciA9PT0gJ25leHQnID8gMCA6IG9wdGlvbnMubGVuZ3RoIC0gMV1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybjtcblx0XHRcdHZhciBmb2N1c2VkSW5kZXggPSAtMTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAodGhpcy5fZm9jdXNlZE9wdGlvbiA9PT0gb3B0aW9uc1tpXSkge1xuXHRcdFx0XHRcdGZvY3VzZWRJbmRleCA9IGk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhciBmb2N1c2VkT3B0aW9uID0gb3B0aW9uc1swXTtcblx0XHRcdGlmIChkaXIgPT09ICduZXh0JyAmJiBmb2N1c2VkSW5kZXggPiAtMSAmJiBmb2N1c2VkSW5kZXggPCBvcHRpb25zLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbiA9IG9wdGlvbnNbZm9jdXNlZEluZGV4ICsgMV07XG5cdFx0XHR9IGVsc2UgaWYgKGRpciA9PT0gJ3ByZXZpb3VzJykge1xuXHRcdFx0XHRpZiAoZm9jdXNlZEluZGV4ID4gMCkge1xuXHRcdFx0XHRcdGZvY3VzZWRPcHRpb24gPSBvcHRpb25zW2ZvY3VzZWRJbmRleCAtIDFdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvY3VzZWRPcHRpb24gPSBvcHRpb25zW29wdGlvbnMubGVuZ3RoIC0gMV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcblx0XHRzZWxlY3RGb2N1c2VkT3B0aW9uOiBmdW5jdGlvbiBzZWxlY3RGb2N1c2VkT3B0aW9uKCkge1xuXHRcdFx0Ly8gaWYgKHRoaXMucHJvcHMuYWxsb3dDcmVhdGUgJiYgIXRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbikge1xuXHRcdFx0Ly8gXHRyZXR1cm4gdGhpcy5zZWxlY3RWYWx1ZSh0aGlzLnN0YXRlLmlucHV0VmFsdWUpO1xuXHRcdFx0Ly8gfVxuXHRcdFx0aWYgKHRoaXMuX2ZvY3VzZWRPcHRpb24pIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2VsZWN0VmFsdWUodGhpcy5fZm9jdXNlZE9wdGlvbik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0cmVuZGVyTG9hZGluZzogZnVuY3Rpb24gcmVuZGVyTG9hZGluZygpIHtcblx0XHRcdGlmICghdGhpcy5wcm9wcy5pc0xvYWRpbmcpIHJldHVybjtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J3NwYW4nLFxuXHRcdFx0XHR7IGNsYXNzTmFtZTogJ1NlbGVjdC1sb2FkaW5nLXpvbmUnLCAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSxcblx0XHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1sb2FkaW5nJyB9KVxuXHRcdFx0KTtcblx0XHR9LFxuXHRcblx0XHRyZW5kZXJWYWx1ZTogZnVuY3Rpb24gcmVuZGVyVmFsdWUodmFsdWVBcnJheSwgaXNPcGVuKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdFx0XHR2YXIgcmVuZGVyTGFiZWwgPSB0aGlzLnByb3BzLnZhbHVlUmVuZGVyZXIgfHwgdGhpcy5nZXRPcHRpb25MYWJlbDtcblx0XHRcdHZhciBWYWx1ZUNvbXBvbmVudCA9IHRoaXMucHJvcHMudmFsdWVDb21wb25lbnQ7XG5cdFx0XHRpZiAoIXZhbHVlQXJyYXkubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiAhdGhpcy5zdGF0ZS5pbnB1dFZhbHVlID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtcGxhY2Vob2xkZXInIH0sXG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlclxuXHRcdFx0XHQpIDogbnVsbDtcblx0XHRcdH1cblx0XHRcdHZhciBvbkNsaWNrID0gdGhpcy5wcm9wcy5vblZhbHVlQ2xpY2sgPyB0aGlzLmhhbmRsZVZhbHVlQ2xpY2sgOiBudWxsO1xuXHRcdFx0aWYgKHRoaXMucHJvcHMubXVsdGkpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlQXJyYXkubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuXHRcdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdFZhbHVlQ29tcG9uZW50LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRkaXNhYmxlZDogX3RoaXMyLnByb3BzLmRpc2FibGVkIHx8IHZhbHVlLmNsZWFyYWJsZVZhbHVlID09PSBmYWxzZSxcblx0XHRcdFx0XHRcdFx0a2V5OiAndmFsdWUtJyArIGkgKyAnLScgKyB2YWx1ZVtfdGhpczIucHJvcHMudmFsdWVLZXldLFxuXHRcdFx0XHRcdFx0XHRvbkNsaWNrOiBvbkNsaWNrLFxuXHRcdFx0XHRcdFx0XHRvblJlbW92ZTogX3RoaXMyLnJlbW92ZVZhbHVlLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRyZW5kZXJMYWJlbCh2YWx1ZSlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSkge1xuXHRcdFx0XHRpZiAoaXNPcGVuKSBvbkNsaWNrID0gbnVsbDtcblx0XHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFZhbHVlQ29tcG9uZW50LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0XHRcdFx0b25DbGljazogb25DbGljayxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZUFycmF5WzBdXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZW5kZXJMYWJlbCh2YWx1ZUFycmF5WzBdKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdHJlbmRlcklucHV0OiBmdW5jdGlvbiByZW5kZXJJbnB1dCh2YWx1ZUFycmF5KSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnU2VsZWN0LWlucHV0JywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSk7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCAhdGhpcy5wcm9wcy5zZWFyY2hhYmxlKSB7XG5cdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRQcm9wcywge1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXHRcdFx0XHRcdHRhYkluZGV4OiB0aGlzLnByb3BzLnRhYkluZGV4IHx8IDAsXG5cdFx0XHRcdFx0b25CbHVyOiB0aGlzLmhhbmRsZUlucHV0Qmx1cixcblx0XHRcdFx0XHRvbkZvY3VzOiB0aGlzLmhhbmRsZUlucHV0Rm9jdXMsXG5cdFx0XHRcdFx0cmVmOiAnaW5wdXQnLFxuXHRcdFx0XHRcdHN0eWxlOiB7IGJvcmRlcjogMCwgd2lkdGg6IDEsIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snIH0gfSkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9yZWFjdElucHV0QXV0b3NpemUyWydkZWZhdWx0J10sIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLmlucHV0UHJvcHMsIHtcblx0XHRcdFx0Y2xhc3NOYW1lOiBjbGFzc05hbWUsXG5cdFx0XHRcdHRhYkluZGV4OiB0aGlzLnByb3BzLnRhYkluZGV4LFxuXHRcdFx0XHRvbkJsdXI6IHRoaXMuaGFuZGxlSW5wdXRCbHVyLFxuXHRcdFx0XHRvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcblx0XHRcdFx0b25Gb2N1czogdGhpcy5oYW5kbGVJbnB1dEZvY3VzLFxuXHRcdFx0XHRtaW5XaWR0aDogJzUnLFxuXHRcdFx0XHRyZWY6ICdpbnB1dCcsXG5cdFx0XHRcdHJlcXVpcmVkOiB0aGlzLnN0YXRlLnJlcXVpcmVkLFxuXHRcdFx0XHR2YWx1ZTogdGhpcy5zdGF0ZS5pbnB1dFZhbHVlXG5cdFx0XHR9KSk7XG5cdFx0fSxcblx0XG5cdFx0cmVuZGVyQ2xlYXI6IGZ1bmN0aW9uIHJlbmRlckNsZWFyKCkge1xuXHRcdFx0aWYgKCF0aGlzLnByb3BzLmNsZWFyYWJsZSB8fCAhdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLnByb3BzLm11bHRpICYmICF0aGlzLnByb3BzLnZhbHVlLmxlbmd0aCB8fCB0aGlzLnByb3BzLmRpc2FibGVkIHx8IHRoaXMucHJvcHMuaXNMb2FkaW5nKSByZXR1cm47XG5cdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdzcGFuJyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtY2xlYXItem9uZScsIHRpdGxlOiB0aGlzLnByb3BzLm11bHRpID8gdGhpcy5wcm9wcy5jbGVhckFsbFRleHQgOiB0aGlzLnByb3BzLmNsZWFyVmFsdWVUZXh0LFxuXHRcdFx0XHRcdCdhcmlhLWxhYmVsJzogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCxcblx0XHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5jbGVhclZhbHVlLFxuXHRcdFx0XHRcdG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuXHRcdFx0XHRcdG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcblx0XHRcdFx0XHRvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZSB9LFxuXHRcdFx0XHRfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyJywgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiAnJnRpbWVzOycgfSB9KVxuXHRcdFx0KTtcblx0XHR9LFxuXHRcblx0XHRyZW5kZXJBcnJvdzogZnVuY3Rpb24gcmVuZGVyQXJyb3coKSB7XG5cdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdzcGFuJyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtYXJyb3ctem9uZScsIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bk9uQXJyb3cgfSxcblx0XHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1hcnJvdycsIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bk9uQXJyb3cgfSlcblx0XHRcdCk7XG5cdFx0fSxcblx0XG5cdFx0ZmlsdGVyT3B0aW9uczogZnVuY3Rpb24gZmlsdGVyT3B0aW9ucyhleGNsdWRlT3B0aW9ucykge1xuXHRcdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cdFxuXHRcdFx0dmFyIGZpbHRlclZhbHVlID0gdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB0aGlzLnByb3BzLm9wdGlvbnMgfHwgW107XG5cdFx0XHRpZiAodHlwZW9mIHRoaXMucHJvcHMuZmlsdGVyT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb25zLmNhbGwodGhpcywgb3B0aW9ucywgZmlsdGVyVmFsdWUsIGV4Y2x1ZGVPcHRpb25zKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5wcm9wcy5maWx0ZXJPcHRpb25zKSB7XG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLmlnbm9yZUFjY2VudHMpIHtcblx0XHRcdFx0XHRmaWx0ZXJWYWx1ZSA9ICgwLCBfdXRpbHNTdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKGZpbHRlclZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5wcm9wcy5pZ25vcmVDYXNlKSB7XG5cdFx0XHRcdFx0ZmlsdGVyVmFsdWUgPSBmaWx0ZXJWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChleGNsdWRlT3B0aW9ucykgZXhjbHVkZU9wdGlvbnMgPSBleGNsdWRlT3B0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0XHRyZXR1cm4gaVtfdGhpczMucHJvcHMudmFsdWVLZXldO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb24pIHtcblx0XHRcdFx0XHRpZiAoZXhjbHVkZU9wdGlvbnMgJiYgZXhjbHVkZU9wdGlvbnMuaW5kZXhPZihvcHRpb25bX3RoaXMzLnByb3BzLnZhbHVlS2V5XSkgPiAtMSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdGlmIChfdGhpczMucHJvcHMuZmlsdGVyT3B0aW9uKSByZXR1cm4gX3RoaXMzLnByb3BzLmZpbHRlck9wdGlvbi5jYWxsKF90aGlzMywgb3B0aW9uLCBmaWx0ZXJWYWx1ZSk7XG5cdFx0XHRcdFx0aWYgKCFmaWx0ZXJWYWx1ZSkgcmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0dmFyIHZhbHVlVGVzdCA9IFN0cmluZyhvcHRpb25bX3RoaXMzLnByb3BzLnZhbHVlS2V5XSk7XG5cdFx0XHRcdFx0dmFyIGxhYmVsVGVzdCA9IFN0cmluZyhvcHRpb25bX3RoaXMzLnByb3BzLmxhYmVsS2V5XSk7XG5cdFx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5pZ25vcmVBY2NlbnRzKSB7XG5cdFx0XHRcdFx0XHRpZiAoX3RoaXMzLnByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJykgdmFsdWVUZXN0ID0gKDAsIF91dGlsc1N0cmlwRGlhY3JpdGljczJbJ2RlZmF1bHQnXSkodmFsdWVUZXN0KTtcblx0XHRcdFx0XHRcdGlmIChfdGhpczMucHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnKSBsYWJlbFRlc3QgPSAoMCwgX3V0aWxzU3RyaXBEaWFjcml0aWNzMlsnZGVmYXVsdCddKShsYWJlbFRlc3QpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoX3RoaXMzLnByb3BzLmlnbm9yZUNhc2UpIHtcblx0XHRcdFx0XHRcdGlmIChfdGhpczMucHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnKSB2YWx1ZVRlc3QgPSB2YWx1ZVRlc3QudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdGlmIChfdGhpczMucHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnKSBsYWJlbFRlc3QgPSBsYWJlbFRlc3QudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIF90aGlzMy5wcm9wcy5tYXRjaFBvcyA9PT0gJ3N0YXJ0JyA/IF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcgJiYgdmFsdWVUZXN0LnN1YnN0cigwLCBmaWx0ZXJWYWx1ZS5sZW5ndGgpID09PSBmaWx0ZXJWYWx1ZSB8fCBfdGhpczMucHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnICYmIGxhYmVsVGVzdC5zdWJzdHIoMCwgZmlsdGVyVmFsdWUubGVuZ3RoKSA9PT0gZmlsdGVyVmFsdWUgOiBfdGhpczMucHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnICYmIHZhbHVlVGVzdC5pbmRleE9mKGZpbHRlclZhbHVlKSA+PSAwIHx8IF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScgJiYgbGFiZWxUZXN0LmluZGV4T2YoZmlsdGVyVmFsdWUpID49IDA7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIG9wdGlvbnM7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0cmVuZGVyTWVudTogZnVuY3Rpb24gcmVuZGVyTWVudShvcHRpb25zLCB2YWx1ZUFycmF5LCBmb2N1c2VkT3B0aW9uKSB7XG5cdFx0XHR2YXIgX3RoaXM0ID0gdGhpcztcblx0XG5cdFx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgX3JldCA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIE9wdGlvbiA9IF90aGlzNC5wcm9wcy5vcHRpb25Db21wb25lbnQ7XG5cdFx0XHRcdFx0dmFyIHJlbmRlckxhYmVsID0gX3RoaXM0LnByb3BzLm9wdGlvblJlbmRlcmVyIHx8IF90aGlzNC5nZXRPcHRpb25MYWJlbDtcblx0XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHY6IG9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24sIGkpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGlzU2VsZWN0ZWQgPSB2YWx1ZUFycmF5ICYmIHZhbHVlQXJyYXkuaW5kZXhPZihvcHRpb24pID4gLTE7XG5cdFx0XHRcdFx0XHRcdHZhciBpc0ZvY3VzZWQgPSBvcHRpb24gPT09IGZvY3VzZWRPcHRpb247XG5cdFx0XHRcdFx0XHRcdHZhciBvcHRpb25SZWYgPSBpc0ZvY3VzZWQgPyAnZm9jdXNlZCcgOiBudWxsO1xuXHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9uQ2xhc3MgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKHtcblx0XHRcdFx0XHRcdFx0XHQnU2VsZWN0LW9wdGlvbic6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0J2lzLXNlbGVjdGVkJzogaXNTZWxlY3RlZCxcblx0XHRcdFx0XHRcdFx0XHQnaXMtZm9jdXNlZCc6IGlzRm9jdXNlZCxcblx0XHRcdFx0XHRcdFx0XHQnaXMtZGlzYWJsZWQnOiBvcHRpb24uZGlzYWJsZWRcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHRcdFx0T3B0aW9uLFxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZTogb3B0aW9uQ2xhc3MsXG5cdFx0XHRcdFx0XHRcdFx0XHRpc0Rpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcblx0XHRcdFx0XHRcdFx0XHRcdGtleTogJ29wdGlvbi0nICsgaSArICctJyArIG9wdGlvbltfdGhpczQucHJvcHMudmFsdWVLZXldLFxuXHRcdFx0XHRcdFx0XHRcdFx0b25TZWxlY3Q6IF90aGlzNC5zZWxlY3RWYWx1ZSxcblx0XHRcdFx0XHRcdFx0XHRcdG9uRm9jdXM6IF90aGlzNC5mb2N1c09wdGlvbixcblx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbjogb3B0aW9uLFxuXHRcdFx0XHRcdFx0XHRcdFx0aXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcblx0XHRcdFx0XHRcdFx0XHRcdHJlZjogb3B0aW9uUmVmXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRyZW5kZXJMYWJlbChvcHRpb24pXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pKCk7XG5cdFxuXHRcdFx0XHRpZiAodHlwZW9mIF9yZXQgPT09ICdvYmplY3QnKSByZXR1cm4gX3JldC52O1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLm5vUmVzdWx0c1RleHQpIHtcblx0XHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LW5vcmVzdWx0cycgfSxcblx0XHRcdFx0XHR0aGlzLnByb3BzLm5vUmVzdWx0c1RleHRcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdHJlbmRlckhpZGRlbkZpZWxkOiBmdW5jdGlvbiByZW5kZXJIaWRkZW5GaWVsZCh2YWx1ZUFycmF5KSB7XG5cdFx0XHR2YXIgX3RoaXM1ID0gdGhpcztcblx0XG5cdFx0XHRpZiAoIXRoaXMucHJvcHMubmFtZSkgcmV0dXJuO1xuXHRcdFx0dmFyIHZhbHVlID0gdmFsdWVBcnJheS5tYXAoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0cmV0dXJuIHN0cmluZ2lmeVZhbHVlKGlbX3RoaXM1LnByb3BzLnZhbHVlS2V5XSk7XG5cdFx0XHR9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKTtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICdoaWRkZW4nLCByZWY6ICd2YWx1ZScsIG5hbWU6IHRoaXMucHJvcHMubmFtZSwgdmFsdWU6IHZhbHVlLCBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCB9KTtcblx0XHR9LFxuXHRcblx0XHRnZXRGb2N1c2FibGVPcHRpb246IGZ1bmN0aW9uIGdldEZvY3VzYWJsZU9wdGlvbihzZWxlY3RlZE9wdGlvbikge1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl92aXNpYmxlT3B0aW9ucztcblx0XHRcdGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybjtcblx0XHRcdHZhciBmb2N1c2VkT3B0aW9uID0gdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uIHx8IHNlbGVjdGVkT3B0aW9uO1xuXHRcdFx0aWYgKGZvY3VzZWRPcHRpb24gJiYgb3B0aW9ucy5pbmRleE9mKGZvY3VzZWRPcHRpb24pID4gLTEpIHJldHVybiBmb2N1c2VkT3B0aW9uO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmICghb3B0aW9uc1tpXS5kaXNhYmxlZCkgcmV0dXJuIG9wdGlvbnNbaV07XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSgpO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl92aXNpYmxlT3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyh0aGlzLnByb3BzLm11bHRpID8gdmFsdWVBcnJheSA6IG51bGwpO1xuXHRcdFx0dmFyIGlzT3BlbiA9IHRoaXMuc3RhdGUuaXNPcGVuO1xuXHRcdFx0aWYgKHRoaXMucHJvcHMubXVsdGkgJiYgIW9wdGlvbnMubGVuZ3RoICYmIHZhbHVlQXJyYXkubGVuZ3RoICYmICF0aGlzLnN0YXRlLmlucHV0VmFsdWUpIGlzT3BlbiA9IGZhbHNlO1xuXHRcdFx0dmFyIGZvY3VzZWRPcHRpb24gPSB0aGlzLl9mb2N1c2VkT3B0aW9uID0gdGhpcy5nZXRGb2N1c2FibGVPcHRpb24odmFsdWVBcnJheVswXSk7XG5cdFx0XHR2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnU2VsZWN0JywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcblx0XHRcdFx0J1NlbGVjdC0tbXVsdGknOiB0aGlzLnByb3BzLm11bHRpLFxuXHRcdFx0XHQnaXMtZGlzYWJsZWQnOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0XHQnaXMtZm9jdXNlZCc6IHRoaXMuc3RhdGUuaXNGb2N1c2VkLFxuXHRcdFx0XHQnaXMtbG9hZGluZyc6IHRoaXMucHJvcHMuaXNMb2FkaW5nLFxuXHRcdFx0XHQnaXMtb3Blbic6IGlzT3Blbixcblx0XHRcdFx0J2lzLXBzZXVkby1mb2N1c2VkJzogdGhpcy5zdGF0ZS5pc1BzZXVkb0ZvY3VzZWQsXG5cdFx0XHRcdCdpcy1zZWFyY2hhYmxlJzogdGhpcy5wcm9wcy5zZWFyY2hhYmxlLFxuXHRcdFx0XHQnaGFzLXZhbHVlJzogdmFsdWVBcnJheS5sZW5ndGhcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyByZWY6ICd3cmFwcGVyJywgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiB0aGlzLnByb3BzLndyYXBwZXJTdHlsZSB9LFxuXHRcdFx0XHR0aGlzLnJlbmRlckhpZGRlbkZpZWxkKHZhbHVlQXJyYXkpLFxuXHRcdFx0XHRfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0XHR7IHJlZjogJ2NvbnRyb2wnLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lOiAnU2VsZWN0LWNvbnRyb2wnLFxuXHRcdFx0XHRcdFx0c3R5bGU6IHRoaXMucHJvcHMuc3R5bGUsXG5cdFx0XHRcdFx0XHRvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcblx0XHRcdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcblx0XHRcdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG5cdFx0XHRcdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdFx0XHRcdG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSB9LFxuXHRcdFx0XHRcdHRoaXMucmVuZGVyVmFsdWUodmFsdWVBcnJheSwgaXNPcGVuKSxcblx0XHRcdFx0XHR0aGlzLnJlbmRlcklucHV0KHZhbHVlQXJyYXkpLFxuXHRcdFx0XHRcdHRoaXMucmVuZGVyTG9hZGluZygpLFxuXHRcdFx0XHRcdHRoaXMucmVuZGVyQ2xlYXIoKSxcblx0XHRcdFx0XHR0aGlzLnJlbmRlckFycm93KClcblx0XHRcdFx0KSxcblx0XHRcdFx0aXNPcGVuID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdFx0eyByZWY6ICdtZW51Q29udGFpbmVyJywgY2xhc3NOYW1lOiAnU2VsZWN0LW1lbnUtb3V0ZXInLCBzdHlsZTogdGhpcy5wcm9wcy5tZW51Q29udGFpbmVyU3R5bGUgfSxcblx0XHRcdFx0XHRfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdFx0eyByZWY6ICdtZW51JywgY2xhc3NOYW1lOiAnU2VsZWN0LW1lbnUnLFxuXHRcdFx0XHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy5tZW51U3R5bGUsXG5cdFx0XHRcdFx0XHRcdG9uU2Nyb2xsOiB0aGlzLmhhbmRsZU1lbnVTY3JvbGwsXG5cdFx0XHRcdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bk9uTWVudSB9LFxuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXJNZW51KG9wdGlvbnMsICF0aGlzLnByb3BzLm11bHRpID8gdmFsdWVBcnJheSA6IG51bGwsIGZvY3VzZWRPcHRpb24pXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpIDogbnVsbFxuXHRcdFx0KTtcblx0XHR9XG5cdFxuXHR9KTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNlbGVjdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIG1hcCA9IFt7ICdiYXNlJzogJ0EnLCAnbGV0dGVycyc6IC9bXFx1MDA0MVxcdTI0QjZcXHVGRjIxXFx1MDBDMFxcdTAwQzFcXHUwMEMyXFx1MUVBNlxcdTFFQTRcXHUxRUFBXFx1MUVBOFxcdTAwQzNcXHUwMTAwXFx1MDEwMlxcdTFFQjBcXHUxRUFFXFx1MUVCNFxcdTFFQjJcXHUwMjI2XFx1MDFFMFxcdTAwQzRcXHUwMURFXFx1MUVBMlxcdTAwQzVcXHUwMUZBXFx1MDFDRFxcdTAyMDBcXHUwMjAyXFx1MUVBMFxcdTFFQUNcXHUxRUI2XFx1MUUwMFxcdTAxMDRcXHUwMjNBXFx1MkM2Rl0vZyB9LCB7ICdiYXNlJzogJ0FBJywgJ2xldHRlcnMnOiAvW1xcdUE3MzJdL2cgfSwgeyAnYmFzZSc6ICdBRScsICdsZXR0ZXJzJzogL1tcXHUwMEM2XFx1MDFGQ1xcdTAxRTJdL2cgfSwgeyAnYmFzZSc6ICdBTycsICdsZXR0ZXJzJzogL1tcXHVBNzM0XS9nIH0sIHsgJ2Jhc2UnOiAnQVUnLCAnbGV0dGVycyc6IC9bXFx1QTczNl0vZyB9LCB7ICdiYXNlJzogJ0FWJywgJ2xldHRlcnMnOiAvW1xcdUE3MzhcXHVBNzNBXS9nIH0sIHsgJ2Jhc2UnOiAnQVknLCAnbGV0dGVycyc6IC9bXFx1QTczQ10vZyB9LCB7ICdiYXNlJzogJ0InLCAnbGV0dGVycyc6IC9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nIH0sIHsgJ2Jhc2UnOiAnQycsICdsZXR0ZXJzJzogL1tcXHUwMDQzXFx1MjRCOFxcdUZGMjNcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDBDN1xcdTFFMDhcXHUwMTg3XFx1MDIzQlxcdUE3M0VdL2cgfSwgeyAnYmFzZSc6ICdEJywgJ2xldHRlcnMnOiAvW1xcdTAwNDRcXHUyNEI5XFx1RkYyNFxcdTFFMEFcXHUwMTBFXFx1MUUwQ1xcdTFFMTBcXHUxRTEyXFx1MUUwRVxcdTAxMTBcXHUwMThCXFx1MDE4QVxcdTAxODlcXHVBNzc5XS9nIH0sIHsgJ2Jhc2UnOiAnRFonLCAnbGV0dGVycyc6IC9bXFx1MDFGMVxcdTAxQzRdL2cgfSwgeyAnYmFzZSc6ICdEeicsICdsZXR0ZXJzJzogL1tcXHUwMUYyXFx1MDFDNV0vZyB9LCB7ICdiYXNlJzogJ0UnLCAnbGV0dGVycyc6IC9bXFx1MDA0NVxcdTI0QkFcXHVGRjI1XFx1MDBDOFxcdTAwQzlcXHUwMENBXFx1MUVDMFxcdTFFQkVcXHUxRUM0XFx1MUVDMlxcdTFFQkNcXHUwMTEyXFx1MUUxNFxcdTFFMTZcXHUwMTE0XFx1MDExNlxcdTAwQ0JcXHUxRUJBXFx1MDExQVxcdTAyMDRcXHUwMjA2XFx1MUVCOFxcdTFFQzZcXHUwMjI4XFx1MUUxQ1xcdTAxMThcXHUxRTE4XFx1MUUxQVxcdTAxOTBcXHUwMThFXS9nIH0sIHsgJ2Jhc2UnOiAnRicsICdsZXR0ZXJzJzogL1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2cgfSwgeyAnYmFzZSc6ICdHJywgJ2xldHRlcnMnOiAvW1xcdTAwNDdcXHUyNEJDXFx1RkYyN1xcdTAxRjRcXHUwMTFDXFx1MUUyMFxcdTAxMUVcXHUwMTIwXFx1MDFFNlxcdTAxMjJcXHUwMUU0XFx1MDE5M1xcdUE3QTBcXHVBNzdEXFx1QTc3RV0vZyB9LCB7ICdiYXNlJzogJ0gnLCAnbGV0dGVycyc6IC9bXFx1MDA0OFxcdTI0QkRcXHVGRjI4XFx1MDEyNFxcdTFFMjJcXHUxRTI2XFx1MDIxRVxcdTFFMjRcXHUxRTI4XFx1MUUyQVxcdTAxMjZcXHUyQzY3XFx1MkM3NVxcdUE3OERdL2cgfSwgeyAnYmFzZSc6ICdJJywgJ2xldHRlcnMnOiAvW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nIH0sIHsgJ2Jhc2UnOiAnSicsICdsZXR0ZXJzJzogL1tcXHUwMDRBXFx1MjRCRlxcdUZGMkFcXHUwMTM0XFx1MDI0OF0vZyB9LCB7ICdiYXNlJzogJ0snLCAnbGV0dGVycyc6IC9bXFx1MDA0QlxcdTI0QzBcXHVGRjJCXFx1MUUzMFxcdTAxRThcXHUxRTMyXFx1MDEzNlxcdTFFMzRcXHUwMTk4XFx1MkM2OVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3QTJdL2cgfSwgeyAnYmFzZSc6ICdMJywgJ2xldHRlcnMnOiAvW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZyB9LCB7ICdiYXNlJzogJ0xKJywgJ2xldHRlcnMnOiAvW1xcdTAxQzddL2cgfSwgeyAnYmFzZSc6ICdMaicsICdsZXR0ZXJzJzogL1tcXHUwMUM4XS9nIH0sIHsgJ2Jhc2UnOiAnTScsICdsZXR0ZXJzJzogL1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZyB9LCB7ICdiYXNlJzogJ04nLCAnbGV0dGVycyc6IC9bXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNF0vZyB9LCB7ICdiYXNlJzogJ05KJywgJ2xldHRlcnMnOiAvW1xcdTAxQ0FdL2cgfSwgeyAnYmFzZSc6ICdOaicsICdsZXR0ZXJzJzogL1tcXHUwMUNCXS9nIH0sIHsgJ2Jhc2UnOiAnTycsICdsZXR0ZXJzJzogL1tcXHUwMDRGXFx1MjRDNFxcdUZGMkZcXHUwMEQyXFx1MDBEM1xcdTAwRDRcXHUxRUQyXFx1MUVEMFxcdTFFRDZcXHUxRUQ0XFx1MDBENVxcdTFFNENcXHUwMjJDXFx1MUU0RVxcdTAxNENcXHUxRTUwXFx1MUU1MlxcdTAxNEVcXHUwMjJFXFx1MDIzMFxcdTAwRDZcXHUwMjJBXFx1MUVDRVxcdTAxNTBcXHUwMUQxXFx1MDIwQ1xcdTAyMEVcXHUwMUEwXFx1MUVEQ1xcdTFFREFcXHUxRUUwXFx1MUVERVxcdTFFRTJcXHUxRUNDXFx1MUVEOFxcdTAxRUFcXHUwMUVDXFx1MDBEOFxcdTAxRkVcXHUwMTg2XFx1MDE5RlxcdUE3NEFcXHVBNzRDXS9nIH0sIHsgJ2Jhc2UnOiAnT0knLCAnbGV0dGVycyc6IC9bXFx1MDFBMl0vZyB9LCB7ICdiYXNlJzogJ09PJywgJ2xldHRlcnMnOiAvW1xcdUE3NEVdL2cgfSwgeyAnYmFzZSc6ICdPVScsICdsZXR0ZXJzJzogL1tcXHUwMjIyXS9nIH0sIHsgJ2Jhc2UnOiAnUCcsICdsZXR0ZXJzJzogL1tcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0XS9nIH0sIHsgJ2Jhc2UnOiAnUScsICdsZXR0ZXJzJzogL1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2cgfSwgeyAnYmFzZSc6ICdSJywgJ2xldHRlcnMnOiAvW1xcdTAwNTJcXHUyNEM3XFx1RkYzMlxcdTAxNTRcXHUxRTU4XFx1MDE1OFxcdTAyMTBcXHUwMjEyXFx1MUU1QVxcdTFFNUNcXHUwMTU2XFx1MUU1RVxcdTAyNENcXHUyQzY0XFx1QTc1QVxcdUE3QTZcXHVBNzgyXS9nIH0sIHsgJ2Jhc2UnOiAnUycsICdsZXR0ZXJzJzogL1tcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NF0vZyB9LCB7ICdiYXNlJzogJ1QnLCAnbGV0dGVycyc6IC9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nIH0sIHsgJ2Jhc2UnOiAnVFonLCAnbGV0dGVycyc6IC9bXFx1QTcyOF0vZyB9LCB7ICdiYXNlJzogJ1UnLCAnbGV0dGVycyc6IC9bXFx1MDA1NVxcdTI0Q0FcXHVGRjM1XFx1MDBEOVxcdTAwREFcXHUwMERCXFx1MDE2OFxcdTFFNzhcXHUwMTZBXFx1MUU3QVxcdTAxNkNcXHUwMERDXFx1MDFEQlxcdTAxRDdcXHUwMUQ1XFx1MDFEOVxcdTFFRTZcXHUwMTZFXFx1MDE3MFxcdTAxRDNcXHUwMjE0XFx1MDIxNlxcdTAxQUZcXHUxRUVBXFx1MUVFOFxcdTFFRUVcXHUxRUVDXFx1MUVGMFxcdTFFRTRcXHUxRTcyXFx1MDE3MlxcdTFFNzZcXHUxRTc0XFx1MDI0NF0vZyB9LCB7ICdiYXNlJzogJ1YnLCAnbGV0dGVycyc6IC9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2cgfSwgeyAnYmFzZSc6ICdWWScsICdsZXR0ZXJzJzogL1tcXHVBNzYwXS9nIH0sIHsgJ2Jhc2UnOiAnVycsICdsZXR0ZXJzJzogL1tcXHUwMDU3XFx1MjRDQ1xcdUZGMzdcXHUxRTgwXFx1MUU4MlxcdTAxNzRcXHUxRTg2XFx1MUU4NFxcdTFFODhcXHUyQzcyXS9nIH0sIHsgJ2Jhc2UnOiAnWCcsICdsZXR0ZXJzJzogL1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZyB9LCB7ICdiYXNlJzogJ1knLCAnbGV0dGVycyc6IC9bXFx1MDA1OVxcdTI0Q0VcXHVGRjM5XFx1MUVGMlxcdTAwRERcXHUwMTc2XFx1MUVGOFxcdTAyMzJcXHUxRThFXFx1MDE3OFxcdTFFRjZcXHUxRUY0XFx1MDFCM1xcdTAyNEVcXHUxRUZFXS9nIH0sIHsgJ2Jhc2UnOiAnWicsICdsZXR0ZXJzJzogL1tcXHUwMDVBXFx1MjRDRlxcdUZGM0FcXHUwMTc5XFx1MUU5MFxcdTAxN0JcXHUwMTdEXFx1MUU5MlxcdTFFOTRcXHUwMUI1XFx1MDIyNFxcdTJDN0ZcXHUyQzZCXFx1QTc2Ml0vZyB9LCB7ICdiYXNlJzogJ2EnLCAnbGV0dGVycyc6IC9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2cgfSwgeyAnYmFzZSc6ICdhYScsICdsZXR0ZXJzJzogL1tcXHVBNzMzXS9nIH0sIHsgJ2Jhc2UnOiAnYWUnLCAnbGV0dGVycyc6IC9bXFx1MDBFNlxcdTAxRkRcXHUwMUUzXS9nIH0sIHsgJ2Jhc2UnOiAnYW8nLCAnbGV0dGVycyc6IC9bXFx1QTczNV0vZyB9LCB7ICdiYXNlJzogJ2F1JywgJ2xldHRlcnMnOiAvW1xcdUE3MzddL2cgfSwgeyAnYmFzZSc6ICdhdicsICdsZXR0ZXJzJzogL1tcXHVBNzM5XFx1QTczQl0vZyB9LCB7ICdiYXNlJzogJ2F5JywgJ2xldHRlcnMnOiAvW1xcdUE3M0RdL2cgfSwgeyAnYmFzZSc6ICdiJywgJ2xldHRlcnMnOiAvW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZyB9LCB7ICdiYXNlJzogJ2MnLCAnbGV0dGVycyc6IC9bXFx1MDA2M1xcdTI0RDJcXHVGRjQzXFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAwRTdcXHUxRTA5XFx1MDE4OFxcdTAyM0NcXHVBNzNGXFx1MjE4NF0vZyB9LCB7ICdiYXNlJzogJ2QnLCAnbGV0dGVycyc6IC9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2cgfSwgeyAnYmFzZSc6ICdkeicsICdsZXR0ZXJzJzogL1tcXHUwMUYzXFx1MDFDNl0vZyB9LCB7ICdiYXNlJzogJ2UnLCAnbGV0dGVycyc6IC9bXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERF0vZyB9LCB7ICdiYXNlJzogJ2YnLCAnbGV0dGVycyc6IC9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nIH0sIHsgJ2Jhc2UnOiAnZycsICdsZXR0ZXJzJzogL1tcXHUwMDY3XFx1MjRENlxcdUZGNDdcXHUwMUY1XFx1MDExRFxcdTFFMjFcXHUwMTFGXFx1MDEyMVxcdTAxRTdcXHUwMTIzXFx1MDFFNVxcdTAyNjBcXHVBN0ExXFx1MUQ3OVxcdUE3N0ZdL2cgfSwgeyAnYmFzZSc6ICdoJywgJ2xldHRlcnMnOiAvW1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NV0vZyB9LCB7ICdiYXNlJzogJ2h2JywgJ2xldHRlcnMnOiAvW1xcdTAxOTVdL2cgfSwgeyAnYmFzZSc6ICdpJywgJ2xldHRlcnMnOiAvW1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxXS9nIH0sIHsgJ2Jhc2UnOiAnaicsICdsZXR0ZXJzJzogL1tcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDldL2cgfSwgeyAnYmFzZSc6ICdrJywgJ2xldHRlcnMnOiAvW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nIH0sIHsgJ2Jhc2UnOiAnbCcsICdsZXR0ZXJzJzogL1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nIH0sIHsgJ2Jhc2UnOiAnbGonLCAnbGV0dGVycyc6IC9bXFx1MDFDOV0vZyB9LCB7ICdiYXNlJzogJ20nLCAnbGV0dGVycyc6IC9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2cgfSwgeyAnYmFzZSc6ICduJywgJ2xldHRlcnMnOiAvW1xcdTAwNkVcXHUyNEREXFx1RkY0RVxcdTAxRjlcXHUwMTQ0XFx1MDBGMVxcdTFFNDVcXHUwMTQ4XFx1MUU0N1xcdTAxNDZcXHUxRTRCXFx1MUU0OVxcdTAxOUVcXHUwMjcyXFx1MDE0OVxcdUE3OTFcXHVBN0E1XS9nIH0sIHsgJ2Jhc2UnOiAnbmonLCAnbGV0dGVycyc6IC9bXFx1MDFDQ10vZyB9LCB7ICdiYXNlJzogJ28nLCAnbGV0dGVycyc6IC9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZyB9LCB7ICdiYXNlJzogJ29pJywgJ2xldHRlcnMnOiAvW1xcdTAxQTNdL2cgfSwgeyAnYmFzZSc6ICdvdScsICdsZXR0ZXJzJzogL1tcXHUwMjIzXS9nIH0sIHsgJ2Jhc2UnOiAnb28nLCAnbGV0dGVycyc6IC9bXFx1QTc0Rl0vZyB9LCB7ICdiYXNlJzogJ3AnLCAnbGV0dGVycyc6IC9bXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NV0vZyB9LCB7ICdiYXNlJzogJ3EnLCAnbGV0dGVycyc6IC9bXFx1MDA3MVxcdTI0RTBcXHVGRjUxXFx1MDI0QlxcdUE3NTdcXHVBNzU5XS9nIH0sIHsgJ2Jhc2UnOiAncicsICdsZXR0ZXJzJzogL1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZyB9LCB7ICdiYXNlJzogJ3MnLCAnbGV0dGVycyc6IC9bXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCXS9nIH0sIHsgJ2Jhc2UnOiAndCcsICdsZXR0ZXJzJzogL1tcXHUwMDc0XFx1MjRFM1xcdUZGNTRcXHUxRTZCXFx1MUU5N1xcdTAxNjVcXHUxRTZEXFx1MDIxQlxcdTAxNjNcXHUxRTcxXFx1MUU2RlxcdTAxNjdcXHUwMUFEXFx1MDI4OFxcdTJDNjZcXHVBNzg3XS9nIH0sIHsgJ2Jhc2UnOiAndHonLCAnbGV0dGVycyc6IC9bXFx1QTcyOV0vZyB9LCB7ICdiYXNlJzogJ3UnLCAnbGV0dGVycyc6IC9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZyB9LCB7ICdiYXNlJzogJ3YnLCAnbGV0dGVycyc6IC9bXFx1MDA3NlxcdTI0RTVcXHVGRjU2XFx1MUU3RFxcdTFFN0ZcXHUwMjhCXFx1QTc1RlxcdTAyOENdL2cgfSwgeyAnYmFzZSc6ICd2eScsICdsZXR0ZXJzJzogL1tcXHVBNzYxXS9nIH0sIHsgJ2Jhc2UnOiAndycsICdsZXR0ZXJzJzogL1tcXHUwMDc3XFx1MjRFNlxcdUZGNTdcXHUxRTgxXFx1MUU4M1xcdTAxNzVcXHUxRTg3XFx1MUU4NVxcdTFFOThcXHUxRTg5XFx1MkM3M10vZyB9LCB7ICdiYXNlJzogJ3gnLCAnbGV0dGVycyc6IC9bXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOERdL2cgfSwgeyAnYmFzZSc6ICd5JywgJ2xldHRlcnMnOiAvW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2cgfSwgeyAnYmFzZSc6ICd6JywgJ2xldHRlcnMnOiAvW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nIH1dO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3Moc3RyKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdHN0ciA9IHN0ci5yZXBsYWNlKG1hcFtpXS5sZXR0ZXJzLCBtYXBbaV0uYmFzZSk7XG5cdFx0fVxuXHRcdHJldHVybiBzdHI7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5qUXVlcnkgPSBleHBvcnRzLmFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0QWRkb25zVXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHR2YXIgX3JlYWN0QWRkb25zVXBkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0QWRkb25zVXBkYXRlKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHR2YXIgX2FuaW1hdGlvbk1peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdFxuXHR2YXIgX2FuaW1hdGlvbk1peGluMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FuaW1hdGlvbk1peGluKTtcblx0XG5cdHZhciBfalF1ZXJ5TWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0XG5cdHZhciBfalF1ZXJ5TWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfalF1ZXJ5TWl4aW4pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIG5vb3AoKSB7fVxuXHRcblx0dmFyIFRvYXN0TWVzc2FnZVNwZWMgPSB7XG5cdCAgZGlzcGxheU5hbWU6IFwiVG9hc3RNZXNzYWdlXCIsXG5cdFxuXHQgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHQgICAgdmFyIGljb25DbGFzc05hbWVzID0ge1xuXHQgICAgICBlcnJvcjogXCJ0b2FzdC1lcnJvclwiLFxuXHQgICAgICBpbmZvOiBcInRvYXN0LWluZm9cIixcblx0ICAgICAgc3VjY2VzczogXCJ0b2FzdC1zdWNjZXNzXCIsXG5cdCAgICAgIHdhcm5pbmc6IFwidG9hc3Qtd2FybmluZ1wiXG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGNsYXNzTmFtZTogXCJ0b2FzdFwiLFxuXHQgICAgICBpY29uQ2xhc3NOYW1lczogaWNvbkNsYXNzTmFtZXMsXG5cdCAgICAgIHRpdGxlQ2xhc3NOYW1lOiBcInRvYXN0LXRpdGxlXCIsXG5cdCAgICAgIG1lc3NhZ2VDbGFzc05hbWU6IFwidG9hc3QtbWVzc2FnZVwiLFxuXHQgICAgICB0YXBUb0Rpc21pc3M6IHRydWUsXG5cdCAgICAgIGNsb3NlQnV0dG9uOiBmYWxzZVxuXHQgICAgfTtcblx0ICB9LFxuXHQgIGhhbmRsZU9uQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZU9uQ2xpY2soZXZlbnQpIHtcblx0ICAgIHRoaXMucHJvcHMuaGFuZGxlT25DbGljayhldmVudCk7XG5cdCAgICBpZiAodGhpcy5wcm9wcy50YXBUb0Rpc21pc3MpIHtcblx0ICAgICAgdGhpcy5oaWRlVG9hc3QodHJ1ZSk7XG5cdCAgICB9XG5cdCAgfSxcblx0ICBfaGFuZGxlX2Nsb3NlX2J1dHRvbl9jbGljazogZnVuY3Rpb24gX2hhbmRsZV9jbG9zZV9idXR0b25fY2xpY2soZXZlbnQpIHtcblx0ICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgdGhpcy5oaWRlVG9hc3QodHJ1ZSk7XG5cdCAgfSxcblx0ICBfaGFuZGxlX3JlbW92ZTogZnVuY3Rpb24gX2hhbmRsZV9yZW1vdmUoKSB7XG5cdCAgICB0aGlzLnByb3BzLmhhbmRsZVJlbW92ZSh0aGlzLnByb3BzLnRvYXN0SWQpO1xuXHQgIH0sXG5cdCAgX3JlbmRlcl9jbG9zZV9idXR0b246IGZ1bmN0aW9uIF9yZW5kZXJfY2xvc2VfYnV0dG9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucHJvcHMuY2xvc2VCdXR0b24gPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG5cdCAgICAgIGNsYXNzTmFtZTogXCJ0b2FzdC1jbG9zZS1idXR0b25cIiwgcm9sZTogXCJidXR0b25cIixcblx0ICAgICAgb25DbGljazogdGhpcy5faGFuZGxlX2Nsb3NlX2J1dHRvbl9jbGljayxcblx0ICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBcIiZ0aW1lcztcIiB9XG5cdCAgICB9KSA6IGZhbHNlO1xuXHQgIH0sXG5cdCAgX3JlbmRlcl90aXRsZV9lbGVtZW50OiBmdW5jdGlvbiBfcmVuZGVyX3RpdGxlX2VsZW1lbnQoKSB7XG5cdCAgICByZXR1cm4gdGhpcy5wcm9wcy50aXRsZSA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICBcImRpdlwiLFxuXHQgICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy50aXRsZUNsYXNzTmFtZSB9LFxuXHQgICAgICB0aGlzLnByb3BzLnRpdGxlXG5cdCAgICApIDogZmFsc2U7XG5cdCAgfSxcblx0ICBfcmVuZGVyX21lc3NhZ2VfZWxlbWVudDogZnVuY3Rpb24gX3JlbmRlcl9tZXNzYWdlX2VsZW1lbnQoKSB7XG5cdCAgICByZXR1cm4gdGhpcy5wcm9wcy5tZXNzYWdlID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgIFwiZGl2XCIsXG5cdCAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLm1lc3NhZ2VDbGFzc05hbWUgfSxcblx0ICAgICAgdGhpcy5wcm9wcy5tZXNzYWdlXG5cdCAgICApIDogZmFsc2U7XG5cdCAgfSxcblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgIHZhciBpY29uQ2xhc3NOYW1lID0gdGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lIHx8IHRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZXNbdGhpcy5wcm9wcy50eXBlXTtcblx0XG5cdCAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgIFwiZGl2XCIsXG5cdCAgICAgIHtcblx0ICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkodGhpcy5wcm9wcy5jbGFzc05hbWUsIGljb25DbGFzc05hbWUpLFxuXHQgICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlLFxuXHQgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlT25DbGljayxcblx0ICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcblx0ICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZVxuXHQgICAgICB9LFxuXHQgICAgICB0aGlzLl9yZW5kZXJfY2xvc2VfYnV0dG9uKCksXG5cdCAgICAgIHRoaXMuX3JlbmRlcl90aXRsZV9lbGVtZW50KCksXG5cdCAgICAgIHRoaXMuX3JlbmRlcl9tZXNzYWdlX2VsZW1lbnQoKVxuXHQgICAgKTtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgYW5pbWF0aW9uID0gZXhwb3J0cy5hbmltYXRpb24gPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3MoKDAsIF9yZWFjdEFkZG9uc1VwZGF0ZTIuZGVmYXVsdCkoVG9hc3RNZXNzYWdlU3BlYywge1xuXHQgIGRpc3BsYXlOYW1lOiB7ICRzZXQ6IFwiVG9hc3RNZXNzYWdlLmFuaW1hdGlvblwiIH0sXG5cdCAgbWl4aW5zOiB7ICRzZXQ6IFtfYW5pbWF0aW9uTWl4aW4yLmRlZmF1bHRdIH1cblx0fSkpO1xuXHRcblx0dmFyIGpRdWVyeSA9IGV4cG9ydHMualF1ZXJ5ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKCgwLCBfcmVhY3RBZGRvbnNVcGRhdGUyLmRlZmF1bHQpKFRvYXN0TWVzc2FnZVNwZWMsIHtcblx0ICBkaXNwbGF5TmFtZTogeyAkc2V0OiBcIlRvYXN0TWVzc2FnZS5qUXVlcnlcIiB9LFxuXHQgIG1peGluczogeyAkc2V0OiBbX2pRdWVyeU1peGluMi5kZWZhdWx0XSB9XG5cdH0pKTtcblx0XG5cdC8qXG5cdCAqIGFzc2lnbiBkZWZhdWx0IG5vb3AgZnVuY3Rpb25zXG5cdCAqL1xuXHRUb2FzdE1lc3NhZ2VTcGVjLmhhbmRsZU1vdXNlRW50ZXIgPSBub29wO1xuXHRUb2FzdE1lc3NhZ2VTcGVjLmhhbmRsZU1vdXNlTGVhdmUgPSBub29wO1xuXHRUb2FzdE1lc3NhZ2VTcGVjLmhpZGVUb2FzdCA9IG5vb3A7XG5cdFxuXHR2YXIgVG9hc3RNZXNzYWdlID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKFRvYXN0TWVzc2FnZVNwZWMpO1xuXHRcblx0VG9hc3RNZXNzYWdlLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcblx0VG9hc3RNZXNzYWdlLmpRdWVyeSA9IGpRdWVyeTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFRvYXN0TWVzc2FnZTtcblxuLyoqKi8gfSxcbi8qIDEzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXG4vKioqLyB9LFxuLyogMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuXHQvL1xuXHQvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuXHQvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cdC8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuXHQvLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG5cdC8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcblx0Ly8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG5cdC8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHQvL1xuXHQvLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuXHQvLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0Ly9cblx0Ly8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuXHQvLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG5cdC8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cblx0Ly8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG5cdC8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuXHQvLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG5cdC8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cdFxuXHRmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG5cdCAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuXHQgIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG5cdH1cblx0bW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cdFxuXHQvLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcblx0RXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblx0XG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXHRcblx0Ly8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG5cdC8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5cdEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cdFxuXHQvLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncblx0Ly8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuXHQgIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG5cdCAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuXHQgIHRoaXMuX21heExpc3RlbmVycyA9IG47XG5cdCAgcmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG5cdCAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblx0XG5cdCAgaWYgKCF0aGlzLl9ldmVudHMpXG5cdCAgICB0aGlzLl9ldmVudHMgPSB7fTtcblx0XG5cdCAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuXHQgIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG5cdCAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuXHQgICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuXHQgICAgICBlciA9IGFyZ3VtZW50c1sxXTtcblx0ICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0ICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcblx0ICAgICAgfVxuXHQgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXHRcblx0ICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdFxuXHQgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG5cdCAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgLy8gZmFzdCBjYXNlc1xuXHQgICAgICBjYXNlIDE6XG5cdCAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIDI6XG5cdCAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgMzpcblx0ICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICAvLyBzbG93ZXJcblx0ICAgICAgZGVmYXVsdDpcblx0ICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0ICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcblx0ICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuXHQgICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcblx0ICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRydWU7XG5cdH07XG5cdFxuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcblx0ICB2YXIgbTtcblx0XG5cdCAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcblx0ICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFxuXHQgIGlmICghdGhpcy5fZXZlbnRzKVxuXHQgICAgdGhpcy5fZXZlbnRzID0ge307XG5cdFxuXHQgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG5cdCAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuXHQgIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG5cdCAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcblx0ICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cdFxuXHQgIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuXHQgICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG5cdCAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcblx0ICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuXHQgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuXHQgICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuXHQgIGVsc2Vcblx0ICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuXHQgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXHRcblx0ICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuXHQgIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG5cdCAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcblx0ICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcblx0ICAgIH1cblx0XG5cdCAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuXHQgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcblx0ICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG5cdCAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG5cdCAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG5cdCAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcblx0ICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cdFxuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuXHQgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG5cdCAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcblx0ICB2YXIgZmlyZWQgPSBmYWxzZTtcblx0XG5cdCAgZnVuY3Rpb24gZygpIHtcblx0ICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cdFxuXHQgICAgaWYgKCFmaXJlZCkge1xuXHQgICAgICBmaXJlZCA9IHRydWU7XG5cdCAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG5cdCAgdGhpcy5vbih0eXBlLCBnKTtcblx0XG5cdCAgcmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHQvLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcblx0ICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblx0XG5cdCAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcblx0ICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFxuXHQgIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG5cdCAgICByZXR1cm4gdGhpcztcblx0XG5cdCAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0ICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0ICBwb3NpdGlvbiA9IC0xO1xuXHRcblx0ICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcblx0ICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG5cdCAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXHQgICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcblx0ICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblx0XG5cdCAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuXHQgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuXHQgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcblx0ICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuXHQgICAgICAgIHBvc2l0aW9uID0gaTtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIGlmIChwb3NpdGlvbiA8IDApXG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHRcblx0ICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICBsaXN0Lmxlbmd0aCA9IDA7XG5cdCAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcblx0ICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG5cdCAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXHRcblx0ICBpZiAoIXRoaXMuX2V2ZW50cylcblx0ICAgIHJldHVybiB0aGlzO1xuXHRcblx0ICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG5cdCAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuXHQgICAgICB0aGlzLl9ldmVudHMgPSB7fTtcblx0ICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcblx0ICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH1cblx0XG5cdCAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG5cdCAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcblx0ICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuXHQgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcblx0ICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcblx0ICAgIH1cblx0ICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuXHQgICAgdGhpcy5fZXZlbnRzID0ge307XG5cdCAgICByZXR1cm4gdGhpcztcblx0ICB9XG5cdFxuXHQgIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0XG5cdCAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuXHQgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuXHQgIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG5cdCAgICAvLyBMSUZPIG9yZGVyXG5cdCAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcblx0ICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcblx0ICB9XG5cdCAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0XG5cdCAgcmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICB2YXIgcmV0O1xuXHQgIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG5cdCAgICByZXQgPSBbXTtcblx0ICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG5cdCAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcblx0ICBlbHNlXG5cdCAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcblx0ICByZXR1cm4gcmV0O1xuXHR9O1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuXHQgIGlmICh0aGlzLl9ldmVudHMpIHtcblx0ICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXHRcblx0ICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuXHQgICAgICByZXR1cm4gMTtcblx0ICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG5cdCAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcblx0ICB9XG5cdCAgcmV0dXJuIDA7XG5cdH07XG5cdFxuXHRFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcblx0ICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcblx0ICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXHRcblx0dmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXHR2YXIgcXVldWUgPSBbXTtcblx0dmFyIGRyYWluaW5nID0gZmFsc2U7XG5cdHZhciBjdXJyZW50UXVldWU7XG5cdHZhciBxdWV1ZUluZGV4ID0gLTE7XG5cdFxuXHRmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG5cdCAgICBkcmFpbmluZyA9IGZhbHNlO1xuXHQgICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcblx0ICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG5cdCAgICB9XG5cdCAgICBpZiAocXVldWUubGVuZ3RoKSB7XG5cdCAgICAgICAgZHJhaW5RdWV1ZSgpO1xuXHQgICAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuXHQgICAgaWYgKGRyYWluaW5nKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG5cdCAgICBkcmFpbmluZyA9IHRydWU7XG5cdFxuXHQgICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcblx0ICAgIHdoaWxlKGxlbikge1xuXHQgICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuXHQgICAgICAgIHF1ZXVlID0gW107XG5cdCAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuXHQgICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG5cdCAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuXHQgICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcblx0ICAgIH1cblx0ICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG5cdCAgICBkcmFpbmluZyA9IGZhbHNlO1xuXHQgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHR9XG5cdFxuXHRwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuXHQgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcblx0ICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG5cdCAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcblx0ICAgIH1cblx0fTtcblx0XG5cdC8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcblx0ZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG5cdCAgICB0aGlzLmZ1biA9IGZ1bjtcblx0ICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcblx0fVxuXHRJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcblx0fTtcblx0cHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcblx0cHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcblx0cHJvY2Vzcy5lbnYgPSB7fTtcblx0cHJvY2Vzcy5hcmd2ID0gW107XG5cdHByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xuXHRwcm9jZXNzLnZlcnNpb25zID0ge307XG5cdFxuXHRmdW5jdGlvbiBub29wKCkge31cblx0XG5cdHByb2Nlc3Mub24gPSBub29wO1xuXHRwcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcblx0cHJvY2Vzcy5vbmNlID0gbm9vcDtcblx0cHJvY2Vzcy5vZmYgPSBub29wO1xuXHRwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcblx0cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xuXHRwcm9jZXNzLmVtaXQgPSBub29wO1xuXHRcblx0cHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcblx0fTtcblx0XG5cdHByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5cdHByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuXHR9O1xuXHRwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cbi8qKiovIH0sXG4vKiAxNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBfVGFibGVIZWFkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0XG5cdHZhciBfVGFibGVIZWFkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGFibGVIZWFkZXIpO1xuXHRcblx0dmFyIF9UYWJsZUJvZHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdHZhciBfVGFibGVCb2R5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYmxlQm9keSk7XG5cdFxuXHR2YXIgX3BhZ2luYXRpb25QYWdpbmF0aW9uTGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0dmFyIF9wYWdpbmF0aW9uUGFnaW5hdGlvbkxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFnaW5hdGlvblBhZ2luYXRpb25MaXN0KTtcblx0XG5cdHZhciBfdG9vbGJhclRvb2xCYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0XG5cdHZhciBfdG9vbGJhclRvb2xCYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9vbGJhclRvb2xCYXIpO1xuXHRcblx0dmFyIF9UYWJsZUZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHRcblx0dmFyIF9UYWJsZUZpbHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWJsZUZpbHRlcik7XG5cdFxuXHR2YXIgX3N0b3JlVGFibGVEYXRhU3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0dmFyIF9jc3ZfZXhwb3J0X3V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0XG5cdHZhciBfY3N2X2V4cG9ydF91dGlsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nzdl9leHBvcnRfdXRpbCk7XG5cdFxuXHR2YXIgX0ZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRcblx0dmFyIEJvb3RzdHJhcFRhYmxlID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgX2luaGVyaXRzKEJvb3RzdHJhcFRhYmxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gQm9vdHN0cmFwVGFibGUocHJvcHMpIHtcblx0ICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvb3RzdHJhcFRhYmxlKTtcblx0XG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihCb290c3RyYXBUYWJsZS5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcblx0XG5cdCAgICB0aGlzLl9zY3JvbGxIZWFkZXIgPSBmdW5jdGlvbiAoZSkge1xuXHQgICAgICBfdGhpcy5yZWZzLmhlYWRlci5yZWZzLmNvbnRhaW5lci5zY3JvbGxMZWZ0ID0gZS5jdXJyZW50VGFyZ2V0LnNjcm9sbExlZnQ7XG5cdCAgICB9O1xuXHRcblx0ICAgIHRoaXMuX2FkanVzdEhlYWRlcldpZHRoID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgdGFibGVIZWFkZXJEb20gPSBfdGhpcy5yZWZzLmhlYWRlci5yZWZzLmNvbnRhaW5lci5jaGlsZE5vZGVzWzBdO1xuXHQgICAgICB2YXIgdGFibGVCb2R5RG9tID0gX3RoaXMucmVmcy5ib2R5LnJlZnMuY29udGFpbmVyLmNoaWxkTm9kZXNbMF07XG5cdCAgICAgIGlmICh0YWJsZUhlYWRlckRvbS5vZmZzZXRXaWR0aCAhPT0gdGFibGVCb2R5RG9tLm9mZnNldFdpZHRoKSB7XG5cdCAgICAgICAgdGFibGVIZWFkZXJEb20uc3R5bGUud2lkdGggPSB0YWJsZUJvZHlEb20ub2Zmc2V0V2lkdGggKyBcInB4XCI7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGhlYWRlclByb3BzID0gX3RoaXMucmVmcy5ib2R5LmdldEJvZHlIZWFkZXJEb21Qcm9wKCk7XG5cdCAgICAgIF90aGlzLnJlZnMuaGVhZGVyLmZpdEhlYWRlcihoZWFkZXJQcm9wcywgX3RoaXMucmVmcy5ib2R5LnJlZnMuY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IF90aGlzLnJlZnMuYm9keS5yZWZzLmNvbnRhaW5lci5jbGllbnRIZWlnaHQpO1xuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLl9hdHRhY2hDZWxsRWRpdEZ1bmMoKTtcblx0XG5cdCAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5kYXRhKSkge1xuXHQgICAgICB0aGlzLnN0b3JlID0gbmV3IF9zdG9yZVRhYmxlRGF0YVN0b3JlLlRhYmxlRGF0YVN0b3JlKHRoaXMucHJvcHMuZGF0YS5nZXREYXRhKCkpO1xuXHQgICAgICB0aGlzLnByb3BzLmRhdGEuY2xlYXIoKTtcblx0ICAgICAgdGhpcy5wcm9wcy5kYXRhLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIF90aGlzLnN0b3JlLnNldERhdGEoZGF0YSk7XG5cdCAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuXHQgICAgICAgICAgZGF0YTogX3RoaXMuZ2V0VGFibGVEYXRhKClcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgY29weSA9IHRoaXMucHJvcHMuZGF0YS5zbGljZSgpO1xuXHQgICAgICB0aGlzLnN0b3JlID0gbmV3IF9zdG9yZVRhYmxlRGF0YVN0b3JlLlRhYmxlRGF0YVN0b3JlKGNvcHkpO1xuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuaW5pdFRhYmxlKHRoaXMucHJvcHMpO1xuXHRcblx0ICAgIGlmICh0aGlzLmZpbHRlcikge1xuXHQgICAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzZWxmID0gX3RoaXM7XG5cdCAgICAgICAgX3RoaXMuZmlsdGVyLm9uKCdvbkZpbHRlckNoYW5nZScsIGZ1bmN0aW9uIChjdXJyZW50RmlsdGVyKSB7XG5cdCAgICAgICAgICBzZWxmLmhhbmRsZUZpbHRlckRhdGEoY3VycmVudEZpbHRlcik7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0Um93ICYmIHRoaXMucHJvcHMuc2VsZWN0Um93LnNlbGVjdGVkKSB7XG5cdCAgICAgIHZhciBjb3B5ID0gdGhpcy5wcm9wcy5zZWxlY3RSb3cuc2VsZWN0ZWQuc2xpY2UoKTtcblx0ICAgICAgdGhpcy5zdG9yZS5zZXRTZWxlY3RlZFJvd0tleShjb3B5KTtcblx0ICAgIH1cblx0XG5cdCAgICB0aGlzLnN0YXRlID0ge1xuXHQgICAgICBkYXRhOiB0aGlzLmdldFRhYmxlRGF0YSgpLFxuXHQgICAgICBjdXJyUGFnZTogdGhpcy5wcm9wcy5vcHRpb25zLnBhZ2UgfHwgMSxcblx0ICAgICAgc2l6ZVBlclBhZ2U6IHRoaXMucHJvcHMub3B0aW9ucy5zaXplUGVyUGFnZSB8fCBfQ29uc3QyWydkZWZhdWx0J10uU0laRV9QRVJfUEFHRV9MSVNUWzBdLFxuXHQgICAgICBzZWxlY3RlZFJvd0tleXM6IHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRSb3dLZXlzKClcblx0ICAgIH07XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoQm9vdHN0cmFwVGFibGUsIFt7XG5cdCAgICBrZXk6ICdpbml0VGFibGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRUYWJsZShwcm9wcykge1xuXHQgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgIHZhciBrZXlGaWVsZCA9IHByb3BzLmtleUZpZWxkO1xuXHRcblx0ICAgICAgdmFyIGlzS2V5RmllbGREZWZpbmVkID0gdHlwZW9mIGtleUZpZWxkID09PSAnc3RyaW5nJyAmJiBrZXlGaWVsZC5sZW5ndGg7XG5cdCAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5DaGlsZHJlbi5mb3JFYWNoKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY29sdW1uKSB7XG5cdCAgICAgICAgaWYgKGNvbHVtbi5wcm9wcy5pc0tleSkge1xuXHQgICAgICAgICAgaWYgKGtleUZpZWxkKSB7XG5cdCAgICAgICAgICAgIHRocm93IFwiRXJyb3IuIE11bHRpcGxlIGtleSBjb2x1bW4gYmUgZGV0ZWN0ZWQgaW4gVGFibGVIZWFkZXJDb2x1bW4uXCI7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBrZXlGaWVsZCA9IGNvbHVtbi5wcm9wcy5kYXRhRmllbGQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjb2x1bW4ucHJvcHMuZmlsdGVyKSB7XG5cdCAgICAgICAgICAvLyBhIGNvbHVtbiBjb250YWlucyBhIGZpbHRlclxuXHQgICAgICAgICAgaWYgKCFfdGhpczIuZmlsdGVyKSB7XG5cdCAgICAgICAgICAgIC8vIGZpcnN0IHRpbWUgY3JlYXRlIHRoZSBmaWx0ZXIgb24gdGhlIEJvb3RzdHJhcFRhYmxlXG5cdCAgICAgICAgICAgIF90aGlzMi5maWx0ZXIgPSBuZXcgX0ZpbHRlci5GaWx0ZXIoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIC8vIHBhc3MgdGhlIGZpbHRlciB0byBjb2x1bW4gd2l0aCBmaWx0ZXJcblx0ICAgICAgICAgIGNvbHVtbi5wcm9wcy5maWx0ZXIuZW1pdHRlciA9IF90aGlzMi5maWx0ZXI7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LCB0aGlzKTtcblx0XG5cdCAgICAgIHZhciBjb2xJbmZvcyA9IHRoaXMuZ2V0Q29sdW1uc0Rlc2NyaXB0aW9uKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnIpIHtcblx0ICAgICAgICBwcmV2W2N1cnIubmFtZV0gPSBjdXJyO1xuXHQgICAgICAgIHJldHVybiBwcmV2O1xuXHQgICAgICB9LCB7fSk7XG5cdFxuXHQgICAgICBpZiAoIWlzS2V5RmllbGREZWZpbmVkICYmICFrZXlGaWVsZCkgdGhyb3cgJ0Vycm9yLiBObyBhbnkga2V5IGNvbHVtbiBkZWZpbmVkIGluIFRhYmxlSGVhZGVyQ29sdW1uLlxcbiAgICAgICAgICAgIFVzZSBcXCdpc0tleT17dHJ1ZX1cXCcgdG8gc3BlY2lmeSBhIHVuaXF1ZSBjb2x1bW4gYWZ0ZXIgdmVyc2lvbiAwLjUuNC4nO1xuXHRcblx0ICAgICAgdGhpcy5zdG9yZS5zZXRQcm9wcyh7XG5cdCAgICAgICAgaXNQYWdpbmF0aW9uOiBwcm9wcy5wYWdpbmF0aW9uLFxuXHQgICAgICAgIGtleUZpZWxkOiBrZXlGaWVsZCxcblx0ICAgICAgICBjb2xJbmZvczogY29sSW5mb3MsXG5cdCAgICAgICAgbXVsdGlDb2x1bW5TZWFyY2g6IHByb3BzLm11bHRpQ29sdW1uU2VhcmNoLFxuXHQgICAgICAgIHJlbW90ZTogdGhpcy5pc1JlbW90ZURhdGFTb3VyY2UoKVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRUYWJsZURhdGEnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhYmxlRGF0YSgpIHtcblx0ICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXHRcblx0ICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5zb3J0TmFtZSAmJiB0aGlzLnByb3BzLm9wdGlvbnMuc29ydE9yZGVyKSB0aGlzLnN0b3JlLnNvcnQodGhpcy5wcm9wcy5vcHRpb25zLnNvcnRPcmRlciwgdGhpcy5wcm9wcy5vcHRpb25zLnNvcnROYW1lKTtcblx0XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcblx0ICAgICAgICB2YXIgcGFnZSA9IHVuZGVmaW5lZCxcblx0ICAgICAgICAgICAgc2l6ZVBlclBhZ2UgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgaWYgKHRoaXMuc3RvcmUuaXNDaGFuZ2VkUGFnZSgpKSB7XG5cdCAgICAgICAgICBzaXplUGVyUGFnZSA9IHRoaXMuc3RhdGUuc2l6ZVBlclBhZ2U7XG5cdCAgICAgICAgICBwYWdlID0gdGhpcy5zdGF0ZS5jdXJyUGFnZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc2l6ZVBlclBhZ2UgPSB0aGlzLnByb3BzLm9wdGlvbnMuc2l6ZVBlclBhZ2UgfHwgX0NvbnN0MlsnZGVmYXVsdCddLlNJWkVfUEVSX1BBR0VfTElTVFswXTtcblx0ICAgICAgICAgIHBhZ2UgPSB0aGlzLnByb3BzLm9wdGlvbnMucGFnZSB8fCAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UocGFnZSwgc2l6ZVBlclBhZ2UpLmdldCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRDb2x1bW5zRGVzY3JpcHRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbHVtbnNEZXNjcmlwdGlvbihfcmVmKSB7XG5cdCAgICAgIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG5cdFxuXHQgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNvbHVtbiwgaSkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICBuYW1lOiBjb2x1bW4ucHJvcHMuZGF0YUZpZWxkLFxuXHQgICAgICAgICAgYWxpZ246IGNvbHVtbi5wcm9wcy5kYXRhQWxpZ24sXG5cdCAgICAgICAgICBzb3J0OiBjb2x1bW4ucHJvcHMuZGF0YVNvcnQsXG5cdCAgICAgICAgICBmb3JtYXQ6IGNvbHVtbi5wcm9wcy5kYXRhRm9ybWF0LFxuXHQgICAgICAgICAgZm9ybWF0RXh0cmFEYXRhOiBjb2x1bW4ucHJvcHMuZm9ybWF0RXh0cmFEYXRhLFxuXHQgICAgICAgICAgZmlsdGVyRm9ybWF0dGVkOiBjb2x1bW4ucHJvcHMuZmlsdGVyRm9ybWF0dGVkLFxuXHQgICAgICAgICAgZWRpdGFibGU6IGNvbHVtbi5wcm9wcy5lZGl0YWJsZSxcblx0ICAgICAgICAgIGhpZGRlbjogY29sdW1uLnByb3BzLmhpZGRlbixcblx0ICAgICAgICAgIHNlYXJjaGFibGU6IGNvbHVtbi5wcm9wcy5zZWFyY2hhYmxlLFxuXHQgICAgICAgICAgY2xhc3NOYW1lOiBjb2x1bW4ucHJvcHMuY29sdW1uQ2xhc3NOYW1lLFxuXHQgICAgICAgICAgd2lkdGg6IGNvbHVtbi5wcm9wcy53aWR0aCxcblx0ICAgICAgICAgIHRleHQ6IGNvbHVtbi5wcm9wcy5jaGlsZHJlbixcblx0ICAgICAgICAgIHNvcnRGdW5jOiBjb2x1bW4ucHJvcHMuc29ydEZ1bmMsXG5cdCAgICAgICAgICBpbmRleDogaVxuXHQgICAgICAgIH07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG5cdCAgICAgIHRoaXMuaW5pdFRhYmxlKG5leHRQcm9wcyk7XG5cdCAgICAgIGlmIChBcnJheS5pc0FycmF5KG5leHRQcm9wcy5kYXRhKSkge1xuXHQgICAgICAgIHRoaXMuc3RvcmUuc2V0RGF0YShuZXh0UHJvcHMuZGF0YS5zbGljZSgpKTtcblx0ICAgICAgICB2YXIgcGFnaW5hdGlvbkRvbSA9IHRoaXMucmVmcy5wYWdpbmF0aW9uO1xuXHQgICAgICAgIHZhciBwYWdlID0gcGFnaW5hdGlvbkRvbSAmJiBwYWdpbmF0aW9uRG9tLmdldEN1cnJlbnRQYWdlKCkgfHwgbmV4dFByb3BzLm9wdGlvbnMucGFnZSB8fCAxO1xuXHQgICAgICAgIHZhciBzaXplUGVyUGFnZSA9IHBhZ2luYXRpb25Eb20gJiYgcGFnaW5hdGlvbkRvbS5nZXRTaXplUGVyUGFnZSgpIHx8IG5leHRQcm9wcy5vcHRpb25zLnNpemVQZXJQYWdlIHx8IF9Db25zdDJbJ2RlZmF1bHQnXS5TSVpFX1BFUl9QQUdFX0xJU1RbMF07XG5cdCAgICAgICAgLy8gIzEyNVxuXHQgICAgICAgIGlmIChwYWdlID4gTWF0aC5jZWlsKG5leHRQcm9wcy5kYXRhLmxlbmd0aCAvIHNpemVQZXJQYWdlKSkgcGFnZSA9IDE7XG5cdCAgICAgICAgdmFyIHNvcnRJbmZvID0gdGhpcy5zdG9yZS5nZXRTb3J0SW5mbygpO1xuXHQgICAgICAgIHZhciBzb3J0RmllbGQgPSBuZXh0UHJvcHMub3B0aW9ucy5zb3J0TmFtZSB8fCAoc29ydEluZm8gPyBzb3J0SW5mby5zb3J0RmllbGQgOiB1bmRlZmluZWQpO1xuXHQgICAgICAgIHZhciBzb3J0T3JkZXIgPSBuZXh0UHJvcHMub3B0aW9ucy5zb3J0T3JkZXIgfHwgKHNvcnRJbmZvID8gc29ydEluZm8ub3JkZXIgOiB1bmRlZmluZWQpO1xuXHQgICAgICAgIGlmIChzb3J0RmllbGQgJiYgc29ydE9yZGVyKSB0aGlzLnN0b3JlLnNvcnQoc29ydE9yZGVyLCBzb3J0RmllbGQpO1xuXHQgICAgICAgIHZhciBkYXRhID0gdGhpcy5zdG9yZS5wYWdlKHBhZ2UsIHNpemVQZXJQYWdlKS5nZXQoKTtcblx0ICAgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICAgIGRhdGE6IGRhdGEsXG5cdCAgICAgICAgICBjdXJyUGFnZTogcGFnZSxcblx0ICAgICAgICAgIHNpemVQZXJQYWdlOiBzaXplUGVyUGFnZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChuZXh0UHJvcHMuc2VsZWN0Um93ICYmIG5leHRQcm9wcy5zZWxlY3RSb3cuc2VsZWN0ZWQpIHtcblx0ICAgICAgICAvL3NldCBkZWZhdWx0IHNlbGVjdCByb3dzIHRvIHN0b3JlLlxuXHQgICAgICAgIHZhciBjb3B5ID0gbmV4dFByb3BzLnNlbGVjdFJvdy5zZWxlY3RlZC5zbGljZSgpO1xuXHQgICAgICAgIHRoaXMuc3RvcmUuc2V0U2VsZWN0ZWRSb3dLZXkoY29weSk7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICBzZWxlY3RlZFJvd0tleXM6IGNvcHlcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgdGhpcy5fYWRqdXN0SGVhZGVyV2lkdGgoKTtcblx0ICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2FkanVzdEhlYWRlcldpZHRoKTtcblx0ICAgICAgdGhpcy5yZWZzLmJvZHkucmVmcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fc2Nyb2xsSGVhZGVyKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdCAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9hZGp1c3RIZWFkZXJXaWR0aCk7XG5cdCAgICAgIHRoaXMucmVmcy5ib2R5LnJlZnMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX3Njcm9sbEhlYWRlcik7XG5cdCAgICAgIGlmICh0aGlzLmZpbHRlcikge1xuXHQgICAgICAgIHRoaXMuZmlsdGVyLnJlbW92ZUFsbExpc3RlbmVycyhcIm9uRmlsdGVyQ2hhbmdlXCIpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG5cdCAgICAgIHRoaXMuX2FkanVzdEhlYWRlcldpZHRoKCk7XG5cdCAgICAgIHRoaXMuX2F0dGFjaENlbGxFZGl0RnVuYygpO1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyVGFibGVDb21wbGV0ZSkgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyVGFibGVDb21wbGV0ZSgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19hdHRhY2hDZWxsRWRpdEZ1bmMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hdHRhY2hDZWxsRWRpdEZ1bmMoKSB7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLmNlbGxFZGl0KSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5jZWxsRWRpdC5fX29uQ29tcGxldGVFZGl0X18gPSB0aGlzLmhhbmRsZUVkaXRDZWxsLmJpbmQodGhpcyk7XG5cdCAgICAgICAgaWYgKHRoaXMucHJvcHMuY2VsbEVkaXQubW9kZSAhPT0gX0NvbnN0MlsnZGVmYXVsdCddLkNFTExfRURJVF9OT05FKSB0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0ID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvKipcclxuXHQgICAgICogUmV0dXJucyB0cnVlIGlmIGluIHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24sXHJcblx0ICAgICAqIHRoZSBkYXRhZ3JpZCBzaG91bGQgbG9hZCBpdHMgZGF0YSByZW1vdGVseS5cclxuXHQgICAgICpcclxuXHQgICAgICogQHBhcmFtICB7T2JqZWN0fSAgW3Byb3BzXSBPcHRpb25hbC4gSWYgbm90IGdpdmVuLCB0aGlzLnByb3BzIHdpbGwgYmUgdXNlZFxyXG5cdCAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG5cdCAgICAgKi9cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpc1JlbW90ZURhdGFTb3VyY2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGlzUmVtb3RlRGF0YVNvdXJjZShwcm9wcykge1xuXHQgICAgICByZXR1cm4gKHByb3BzIHx8IHRoaXMucHJvcHMpLnJlbW90ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XG5cdCAgICAgIHZhciB0YWJsZUNsYXNzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKShcInJlYWN0LWJzLXRhYmxlXCIpO1xuXHQgICAgICB2YXIgY2hpbGRyZW5zID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblx0ICAgICAgdmFyIHN0eWxlID0ge1xuXHQgICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5oZWlnaHQsXG5cdCAgICAgICAgbWF4SGVpZ2h0OiB0aGlzLnByb3BzLm1heEhlaWdodFxuXHQgICAgICB9O1xuXHQgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcblx0ICAgICAgICBjaGlsZHJlbnMgPSBbdGhpcy5wcm9wcy5jaGlsZHJlbl07XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLmdldENvbHVtbnNEZXNjcmlwdGlvbih0aGlzLnByb3BzKTtcblx0ICAgICAgdmFyIHNvcnRJbmZvID0gdGhpcy5zdG9yZS5nZXRTb3J0SW5mbygpO1xuXHQgICAgICB2YXIgcGFnaW5hdGlvbiA9IHRoaXMucmVuZGVyUGFnaW5hdGlvbigpO1xuXHQgICAgICB2YXIgdG9vbEJhciA9IHRoaXMucmVuZGVyVG9vbEJhcigpO1xuXHQgICAgICB2YXIgdGFibGVGaWx0ZXIgPSB0aGlzLnJlbmRlclRhYmxlRmlsdGVyKGNvbHVtbnMpO1xuXHQgICAgICB2YXIgaXNTZWxlY3RBbGwgPSB0aGlzLmlzU2VsZWN0QWxsKCk7XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAnZGl2Jyxcblx0ICAgICAgICB7IGNsYXNzTmFtZTogJ3JlYWN0LWJzLWNvbnRhaW5lcicsIHJlZjogJ3RhYmxlJyB9LFxuXHQgICAgICAgIHRvb2xCYXIsXG5cdCAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgIHsgY2xhc3NOYW1lOiAncmVhY3QtYnMtdGFibGUtY29udGFpbmVyJyxcblx0ICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgc3R5bGU6IHN0eWxlIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgX1RhYmxlSGVhZGVyMlsnZGVmYXVsdCddLFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgcmVmOiAnaGVhZGVyJyxcblx0ICAgICAgICAgICAgICByb3dTZWxlY3RUeXBlOiB0aGlzLnByb3BzLnNlbGVjdFJvdy5tb2RlLFxuXHQgICAgICAgICAgICAgIGhpZGVTZWxlY3RDb2x1bW46IHRoaXMucHJvcHMuc2VsZWN0Um93LmhpZGVTZWxlY3RDb2x1bW4sXG5cdCAgICAgICAgICAgICAgc29ydE5hbWU6IHNvcnRJbmZvID8gc29ydEluZm8uc29ydEZpZWxkIDogdW5kZWZpbmVkLFxuXHQgICAgICAgICAgICAgIHNvcnRPcmRlcjogc29ydEluZm8gPyBzb3J0SW5mby5vcmRlciA6IHVuZGVmaW5lZCxcblx0ICAgICAgICAgICAgICBvblNvcnQ6IHRoaXMuaGFuZGxlU29ydC5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICAgIG9uU2VsZWN0QWxsUm93OiB0aGlzLmhhbmRsZVNlbGVjdEFsbFJvdy5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICAgIGJvcmRlcmVkOiB0aGlzLnByb3BzLmJvcmRlcmVkLFxuXHQgICAgICAgICAgICAgIGNvbmRlbnNlZDogdGhpcy5wcm9wcy5jb25kZW5zZWQsXG5cdCAgICAgICAgICAgICAgaXNGaWx0ZXJlZDogdGhpcy5maWx0ZXIgPyB0cnVlIDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgdGFibGVJRDogdGhpcy5wcm9wcy50YWJsZUlELFxuXHQgICAgICAgICAgICAgIGlzU2VsZWN0QWxsOiBpc1NlbGVjdEFsbCB9LFxuXHQgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG5cdCAgICAgICAgICApLFxuXHQgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1RhYmxlQm9keTJbJ2RlZmF1bHQnXSwge1xuXHQgICAgICAgICAgICBoZWlnaHQ6IHRoaXMucHJvcHMuaGVpZ2h0LFxuXHQgICAgICAgICAgICBtYXhIZWlnaHQ6IHRoaXMucHJvcHMubWF4SGVpZ2h0LFxuXHQgICAgICAgICAgICByZWY6ICdib2R5Jyxcblx0ICAgICAgICAgICAgZGF0YTogdGhpcy5zdGF0ZS5kYXRhLFxuXHQgICAgICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLFxuXHQgICAgICAgICAgICB0ckNsYXNzTmFtZTogdGhpcy5wcm9wcy50ckNsYXNzTmFtZSxcblx0ICAgICAgICAgICAgc3RyaXBlZDogdGhpcy5wcm9wcy5zdHJpcGVkLFxuXHQgICAgICAgICAgICBib3JkZXJlZDogdGhpcy5wcm9wcy5ib3JkZXJlZCxcblx0ICAgICAgICAgICAgaG92ZXI6IHRoaXMucHJvcHMuaG92ZXIsXG5cdCAgICAgICAgICAgIGtleUZpZWxkOiB0aGlzLnN0b3JlLmdldEtleUZpZWxkKCksXG5cdCAgICAgICAgICAgIGNvbmRlbnNlZDogdGhpcy5wcm9wcy5jb25kZW5zZWQsXG5cdCAgICAgICAgICAgIHNlbGVjdFJvdzogdGhpcy5wcm9wcy5zZWxlY3RSb3csXG5cdCAgICAgICAgICAgIGNlbGxFZGl0OiB0aGlzLnByb3BzLmNlbGxFZGl0LFxuXHQgICAgICAgICAgICBzZWxlY3RlZFJvd0tleXM6IHRoaXMuc3RhdGUuc2VsZWN0ZWRSb3dLZXlzLFxuXHQgICAgICAgICAgICBvblJvd0NsaWNrOiB0aGlzLmhhbmRsZVJvd0NsaWNrLmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgIG9uUm93TW91c2VPdmVyOiB0aGlzLmhhbmRsZVJvd01vdXNlT3Zlci5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICBvblJvd01vdXNlT3V0OiB0aGlzLmhhbmRsZVJvd01vdXNlT3V0LmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgIG9uU2VsZWN0Um93OiB0aGlzLmhhbmRsZVNlbGVjdFJvdy5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICBub0RhdGFUZXh0OiB0aGlzLnByb3BzLm9wdGlvbnMubm9EYXRhVGV4dFxuXHQgICAgICAgICAgfSlcblx0ICAgICAgICApLFxuXHQgICAgICAgIHRhYmxlRmlsdGVyLFxuXHQgICAgICAgIHBhZ2luYXRpb25cblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpc1NlbGVjdEFsbCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaXNTZWxlY3RBbGwoKSB7XG5cdCAgICAgIHZhciBkZWZhdWx0U2VsZWN0Um93S2V5cyA9IHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRSb3dLZXlzKCk7XG5cdCAgICAgIHZhciBhbGxSb3dLZXlzID0gdGhpcy5zdG9yZS5nZXRBbGxSb3drZXkoKTtcblx0ICAgICAgaWYgKGRlZmF1bHRTZWxlY3RSb3dLZXlzLmxlbmd0aCAhPT0gYWxsUm93S2V5cy5sZW5ndGgpIHtcblx0ICAgICAgICByZXR1cm4gZGVmYXVsdFNlbGVjdFJvd0tleXMubGVuZ3RoID09PSAwID8gZmFsc2UgOiAnaW5kZXRlcm1pbmF0ZSc7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjbGVhblNlbGVjdGVkJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhblNlbGVjdGVkKCkge1xuXHQgICAgICB0aGlzLnN0b3JlLnNldFNlbGVjdGVkUm93S2V5KFtdKTtcblx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgc2VsZWN0ZWRSb3dLZXlzOiBbXVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVTb3J0Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTb3J0KG9yZGVyLCBzb3J0RmllbGQpIHtcblx0ICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5vblNvcnRDaGFuZ2UpIHtcblx0ICAgICAgICB0aGlzLnByb3BzLm9wdGlvbnMub25Tb3J0Q2hhbmdlKHNvcnRGaWVsZCwgb3JkZXIsIHRoaXMucHJvcHMpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdG9yZS5zb3J0KG9yZGVyLCBzb3J0RmllbGQpLmdldCgpO1xuXHQgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICBkYXRhOiByZXN1bHRcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlUGFnaW5hdGlvbkRhdGEnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVBhZ2luYXRpb25EYXRhKHBhZ2UsIHNpemVQZXJQYWdlKSB7XG5cdCAgICAgIHZhciBvblBhZ2VDaGFuZ2UgPSB0aGlzLnByb3BzLm9wdGlvbnMub25QYWdlQ2hhbmdlO1xuXHRcblx0ICAgICAgaWYgKG9uUGFnZUNoYW5nZSkge1xuXHQgICAgICAgIG9uUGFnZUNoYW5nZShwYWdlLCBzaXplUGVyUGFnZSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0aGlzLmlzUmVtb3RlRGF0YVNvdXJjZSgpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdG9yZS5wYWdlKHBhZ2UsIHNpemVQZXJQYWdlKS5nZXQoKTtcblx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgZGF0YTogcmVzdWx0LFxuXHQgICAgICAgIGN1cnJQYWdlOiBwYWdlLFxuXHQgICAgICAgIHNpemVQZXJQYWdlOiBzaXplUGVyUGFnZVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVNb3VzZUxlYXZlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKCkge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLm9uTW91c2VMZWF2ZSkge1xuXHQgICAgICAgIHRoaXMucHJvcHMub3B0aW9ucy5vbk1vdXNlTGVhdmUoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZU1vdXNlRW50ZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMub25Nb3VzZUVudGVyKSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLm9uTW91c2VFbnRlcigpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlUm93TW91c2VPdXQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVJvd01vdXNlT3V0KHJvdykge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLm9uUm93TW91c2VPdXQpIHtcblx0ICAgICAgICB0aGlzLnByb3BzLm9wdGlvbnMub25Sb3dNb3VzZU91dChyb3cpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlUm93TW91c2VPdmVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSb3dNb3VzZU92ZXIocm93KSB7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMub25Sb3dNb3VzZU92ZXIpIHtcblx0ICAgICAgICB0aGlzLnByb3BzLm9wdGlvbnMub25Sb3dNb3VzZU92ZXIocm93KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZVJvd0NsaWNrJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSb3dDbGljayhyb3cpIHtcblx0ICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5vblJvd0NsaWNrKSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLm9uUm93Q2xpY2socm93KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZVNlbGVjdEFsbFJvdycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VsZWN0QWxsUm93KGUpIHtcblx0ICAgICAgdmFyIGlzU2VsZWN0ZWQgPSBlLmN1cnJlbnRUYXJnZXQuY2hlY2tlZDtcblx0ICAgICAgdmFyIHNlbGVjdGVkUm93S2V5cyA9IFtdO1xuXHQgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcblx0ICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0Um93Lm9uU2VsZWN0QWxsKSB7XG5cdCAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9wcy5zZWxlY3RSb3cub25TZWxlY3RBbGwoaXNTZWxlY3RlZCwgaXNTZWxlY3RlZCA/IHRoaXMuc3RvcmUuZ2V0KCkgOiBbXSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyB8fCByZXN1bHQgIT09IGZhbHNlKSB7XG5cdCAgICAgICAgaWYgKGlzU2VsZWN0ZWQpIHtcblx0ICAgICAgICAgIHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RvcmUuZ2V0QWxsUm93a2V5KCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0aGlzLnN0b3JlLnNldFNlbGVjdGVkUm93S2V5KHNlbGVjdGVkUm93S2V5cyk7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICBzZWxlY3RlZFJvd0tleXM6IHNlbGVjdGVkUm93S2V5c1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlU2hvd09ubHlTZWxlY3RlZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2hvd09ubHlTZWxlY3RlZCgpIHtcblx0ICAgICAgdGhpcy5zdG9yZS5pZ25vcmVOb25TZWxlY3RlZCgpO1xuXHQgICAgICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5wYWdpbmF0aW9uKSB7XG5cdCAgICAgICAgcmVzdWx0ID0gdGhpcy5zdG9yZS5wYWdlKDEsIHRoaXMuc3RhdGUuc2l6ZVBlclBhZ2UpLmdldCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgZGF0YTogcmVzdWx0LFxuXHQgICAgICAgIGN1cnJQYWdlOiAxXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZVNlbGVjdFJvdycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VsZWN0Um93KHJvdywgaXNTZWxlY3RlZCkge1xuXHQgICAgICB2YXIgY3VyclNlbGVjdGVkID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZFJvd0tleXMoKTtcblx0ICAgICAgdmFyIHJvd0tleSA9IHJvd1t0aGlzLnN0b3JlLmdldEtleUZpZWxkKCldO1xuXHQgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcblx0ICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0Um93Lm9uU2VsZWN0KSB7XG5cdCAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9wcy5zZWxlY3RSb3cub25TZWxlY3Qocm93LCBpc1NlbGVjdGVkKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnIHx8IHJlc3VsdCAhPT0gZmFsc2UpIHtcblx0ICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RSb3cubW9kZSA9PT0gX0NvbnN0MlsnZGVmYXVsdCddLlJPV19TRUxFQ1RfU0lOR0xFKSB7XG5cdCAgICAgICAgICBjdXJyU2VsZWN0ZWQgPSBpc1NlbGVjdGVkID8gW3Jvd0tleV0gOiBbXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKGlzU2VsZWN0ZWQpIHtcblx0ICAgICAgICAgICAgY3VyclNlbGVjdGVkLnB1c2gocm93S2V5KTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGN1cnJTZWxlY3RlZCA9IGN1cnJTZWxlY3RlZC5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiByb3dLZXkgIT09IGtleTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0aGlzLnN0b3JlLnNldFNlbGVjdGVkUm93S2V5KGN1cnJTZWxlY3RlZCk7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICBzZWxlY3RlZFJvd0tleXM6IGN1cnJTZWxlY3RlZFxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlRWRpdENlbGwnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUVkaXRDZWxsKG5ld1ZhbCwgcm93SW5kZXgsIGNvbEluZGV4KSB7XG5cdCAgICAgIHZhciBmaWVsZE5hbWUgPSB1bmRlZmluZWQ7XG5cdCAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5DaGlsZHJlbi5mb3JFYWNoKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjb2x1bW4sIGkpIHtcblx0ICAgICAgICBpZiAoaSA9PSBjb2xJbmRleCkge1xuXHQgICAgICAgICAgZmllbGROYW1lID0gY29sdW1uLnByb3BzLmRhdGFGaWVsZDtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuc3RvcmUuZWRpdChuZXdWYWwsIHJvd0luZGV4LCBmaWVsZE5hbWUpLmdldCgpO1xuXHQgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICBkYXRhOiByZXN1bHRcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICBpZiAodGhpcy5wcm9wcy5jZWxsRWRpdC5hZnRlclNhdmVDZWxsKSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5jZWxsRWRpdC5hZnRlclNhdmVDZWxsKHRoaXMuc3RhdGUuZGF0YVtyb3dJbmRleF0sIGZpZWxkTmFtZSwgbmV3VmFsKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZUFkZFJvd0JlZ2luJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVBZGRSb3dCZWdpbigpIHtcblx0ICAgICAgaWYgKHRoaXMucmVmcy5ib2R5KSB7XG5cdCAgICAgICAgLy8gdGhpcy5yZWZzLmJvZHkuY2FuY2VsRWRpdCgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlQWRkUm93QXRCZWdpbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQWRkUm93QXRCZWdpbihuZXdPYmopIHtcblx0ICAgICAgdmFyIHJlc3VsdCA9IHVuZGVmaW5lZDtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICB0aGlzLnN0b3JlLmFkZEF0QmVnaW4obmV3T2JqKTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIHJldHVybiBlO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuX2hhbmRsZUFmdGVyQWRkaW5nUm93KG5ld09iaik7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlQWRkUm93Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVBZGRSb3cobmV3T2JqKSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXHRcblx0ICAgICAgdmFyIGJlZm9yZVByb21pc2UgPSB0aGlzLnByb3BzLm9wdGlvbnMuYmVmb3JlSW5zZXJ0Um93ID8gdGhpcy5wcm9wcy5vcHRpb25zLmJlZm9yZUluc2VydFJvdyhuZXdPYmopIDogbmV3T2JqO1xuXHRcblx0ICAgICAgLy9leGVjdXRlIGJlZm9yZSBhZGQgcm93XG5cdFxuXHQgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJlZm9yZVByb21pc2UpLnRoZW4oZnVuY3Rpb24gKG1zZykge1xuXHQgICAgICAgIG5ld09iaiA9IG1zZztcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgX3RoaXMzLnN0b3JlLmFkZChuZXdPYmopO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIHJldHVybiBlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgX3RoaXMzLl9oYW5kbGVBZnRlckFkZGluZ1JvdyhuZXdPYmopO1xuXHQgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgIGNvbnNvbGUubG9nKFwiZ2xlZGFqIG92ZGVcIik7XG5cdCAgICAgICAgY29uc29sZS5sb2coZSk7XG5cdCAgICAgICAgcmV0dXJuIGUuanNvbigpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRTaXplUGVyUGFnZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2l6ZVBlclBhZ2UoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnN0YXRlLnNpemVQZXJQYWdlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEN1cnJlbnRQYWdlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50UGFnZSgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuY3VyclBhZ2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlRHJvcFJvdycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRHJvcFJvdyhyb3dLZXlzKSB7XG5cdCAgICAgIHZhciB0aGF0ID0gdGhpcztcblx0ICAgICAgdmFyIGRyb3BSb3dLZXlzID0gcm93S2V5cyA/IHJvd0tleXMgOiB0aGlzLnN0b3JlLmdldFNlbGVjdGVkUm93S2V5cygpO1xuXHQgICAgICAvL2FkZCBjb25maXJtIGJlZm9yZSB0aGUgZGVsZXRlIGFjdGlvbiBpZiB0aGF0IG9wdGlvbiBpcyBzZXQuXG5cdCAgICAgIGlmIChkcm9wUm93S2V5cyAmJiBkcm9wUm93S2V5cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5oYW5kbGVDb25maXJtRGVsZXRlUm93KSB7XG5cdCAgICAgICAgICB0aGlzLnByb3BzLm9wdGlvbnMuaGFuZGxlQ29uZmlybURlbGV0ZVJvdyhmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoYXQuZGVsZXRlUm93KGRyb3BSb3dLZXlzKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoY29uZmlybSgnQXJlIHlvdSBzdXJlIHdhbnQgZGVsZXRlPycpKSB7XG5cdCAgICAgICAgICB0aGlzLmRlbGV0ZVJvdyhkcm9wUm93S2V5cyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZGVsZXRlUm93Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSb3coZHJvcFJvd0tleXMpIHtcblx0XG5cdCAgICAgIHZhciByZXN1bHQgPSB1bmRlZmluZWQ7XG5cdCAgICAgIHRoaXMuc3RvcmUucmVtb3ZlKGRyb3BSb3dLZXlzKTsgLy9yZW1vdmUgc2VsZWN0ZWQgUm93XG5cdCAgICAgIHRoaXMuc3RvcmUuc2V0U2VsZWN0ZWRSb3dLZXkoW10pOyAvL2NsZWFyIHNlbGVjdGVkIHJvdyBrZXlcblx0XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcblx0ICAgICAgICB2YXIgc2l6ZVBlclBhZ2UgPSB0aGlzLnN0YXRlLnNpemVQZXJQYWdlO1xuXHQgICAgICAgIHZhciBjdXJyUGFnZSA9IHRoaXMuc3RhdGUuY3VyclBhZ2U7XG5cdFxuXHQgICAgICAgIHZhciBjdXJyTGFzdFBhZ2UgPSBNYXRoLmNlaWwodGhpcy5zdG9yZS5nZXREYXRhTnVtKCkgLyBzaXplUGVyUGFnZSk7XG5cdCAgICAgICAgaWYgKGN1cnJQYWdlID4gY3Vyckxhc3RQYWdlKSBjdXJyUGFnZSA9IGN1cnJMYXN0UGFnZTtcblx0ICAgICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoY3VyclBhZ2UsIHNpemVQZXJQYWdlKS5nZXQoKTtcblx0ICAgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICAgIGRhdGE6IHJlc3VsdCxcblx0ICAgICAgICAgIHNlbGVjdGVkUm93S2V5czogdGhpcy5zdG9yZS5nZXRTZWxlY3RlZFJvd0tleXMoKSxcblx0ICAgICAgICAgIGN1cnJQYWdlOiBjdXJyUGFnZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICBkYXRhOiByZXN1bHQsXG5cdCAgICAgICAgICBzZWxlY3RlZFJvd0tleXM6IHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRSb3dLZXlzKClcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyRGVsZXRlUm93KSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyRGVsZXRlUm93KGRyb3BSb3dLZXlzKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZUZpbHRlckRhdGEnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUZpbHRlckRhdGEoZmlsdGVyT2JqKSB7XG5cdCAgICAgIHRoaXMuc3RvcmUuZmlsdGVyKGZpbHRlck9iaik7XG5cdCAgICAgIHZhciByZXN1bHQgPSB1bmRlZmluZWQ7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcblx0ICAgICAgICB2YXIgc2l6ZVBlclBhZ2UgPSB0aGlzLnN0YXRlLnNpemVQZXJQYWdlO1xuXHRcblx0ICAgICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoMSwgc2l6ZVBlclBhZ2UpLmdldCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5hZnRlckNvbHVtbkZpbHRlcikgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyQ29sdW1uRmlsdGVyKGZpbHRlck9iaiwgdGhpcy5zdG9yZS5nZXREYXRhSWdub3JpbmdQYWdpbmF0aW9uKCkpO1xuXHQgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICBkYXRhOiByZXN1bHQsXG5cdCAgICAgICAgY3VyclBhZ2U6IDFcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlRXhwb3J0Q1NWJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVFeHBvcnRDU1YoKSB7XG5cdCAgICAgIHZhciByZXN1bHQgPSB0aGlzLnN0b3JlLmdldERhdGFJZ25vcmluZ1BhZ2luYXRpb24oKTtcblx0ICAgICAgdmFyIGtleXMgPSBbXTtcblx0ICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuXHQgICAgICAgIGlmIChjb2x1bW4ucHJvcHMuaGlkZGVuID09PSBmYWxzZSkge1xuXHQgICAgICAgICAga2V5cy5wdXNoKGNvbHVtbi5wcm9wcy5kYXRhRmllbGQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgICgwLCBfY3N2X2V4cG9ydF91dGlsMlsnZGVmYXVsdCddKShyZXN1bHQsIGtleXMsIHRoaXMucHJvcHMuY3N2RmlsZU5hbWUpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZVNlYXJjaCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VhcmNoKHNlYXJjaFRleHQpIHtcblx0ICAgICAgdGhpcy5zdG9yZS5zZWFyY2goc2VhcmNoVGV4dCk7XG5cdCAgICAgIHZhciByZXN1bHQgPSB1bmRlZmluZWQ7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcblx0ICAgICAgICB2YXIgc2l6ZVBlclBhZ2UgPSB0aGlzLnN0YXRlLnNpemVQZXJQYWdlO1xuXHRcblx0ICAgICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoMSwgc2l6ZVBlclBhZ2UpLmdldCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5hZnRlclNlYXJjaCkgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyU2VhcmNoKHNlYXJjaFRleHQsIHRoaXMuc3RvcmUuZ2V0RGF0YUlnbm9yaW5nUGFnaW5hdGlvbigpKTtcblx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgZGF0YTogcmVzdWx0LFxuXHQgICAgICAgIGN1cnJQYWdlOiAxXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlclBhZ2luYXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBhZ2luYXRpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcblx0ICAgICAgICB2YXIgZGF0YVNpemUgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNSZW1vdGVEYXRhU291cmNlKCkpIHtcblx0ICAgICAgICAgIGRhdGFTaXplID0gdGhpcy5wcm9wcy5mZXRjaEluZm8uZGF0YVRvdGFsU2l6ZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgZGF0YVNpemUgPSB0aGlzLnN0b3JlLmdldERhdGFOdW0oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICB7IGNsYXNzTmFtZTogJ3RhYmxlLWZvb3Rlci1wYWdpbmF0aW9uJyB9LFxuXHQgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX3BhZ2luYXRpb25QYWdpbmF0aW9uTGlzdDJbJ2RlZmF1bHQnXSwge1xuXHQgICAgICAgICAgICByZWY6ICdwYWdpbmF0aW9uJyxcblx0ICAgICAgICAgICAgY3VyclBhZ2U6IHRoaXMuc3RhdGUuY3VyclBhZ2UsXG5cdCAgICAgICAgICAgIGNoYW5nZVBhZ2U6IHRoaXMuaGFuZGxlUGFnaW5hdGlvbkRhdGEuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgc2l6ZVBlclBhZ2U6IHRoaXMuc3RhdGUuc2l6ZVBlclBhZ2UsXG5cdCAgICAgICAgICAgIHNpemVQZXJQYWdlTGlzdDogdGhpcy5wcm9wcy5vcHRpb25zLnNpemVQZXJQYWdlTGlzdCB8fCBfQ29uc3QyWydkZWZhdWx0J10uU0laRV9QRVJfUEFHRV9MSVNULFxuXHQgICAgICAgICAgICBwYWdpbmF0aW9uU2l6ZTogdGhpcy5wcm9wcy5vcHRpb25zLnBhZ2luYXRpb25TaXplIHx8IF9Db25zdDJbJ2RlZmF1bHQnXS5QQUdJTkFUSU9OX1NJWkUsXG5cdCAgICAgICAgICAgIHJlbW90ZTogdGhpcy5pc1JlbW90ZURhdGFTb3VyY2UoKSxcblx0ICAgICAgICAgICAgZGF0YVNpemU6IGRhdGFTaXplLFxuXHQgICAgICAgICAgICBvblNpemVQZXJQYWdlTGlzdDogdGhpcy5wcm9wcy5vcHRpb25zLm9uU2l6ZVBlclBhZ2VMaXN0LFxuXHQgICAgICAgICAgICBwcmVQYWdlOiB0aGlzLnByb3BzLm9wdGlvbnMucHJlUGFnZSB8fCBfQ29uc3QyWydkZWZhdWx0J10uUFJFX1BBR0UsXG5cdCAgICAgICAgICAgIG5leHRQYWdlOiB0aGlzLnByb3BzLm9wdGlvbnMubmV4dFBhZ2UgfHwgX0NvbnN0MlsnZGVmYXVsdCddLk5FWFRfUEFHRSxcblx0ICAgICAgICAgICAgZmlyc3RQYWdlOiB0aGlzLnByb3BzLm9wdGlvbnMuZmlyc3RQYWdlIHx8IF9Db25zdDJbJ2RlZmF1bHQnXS5GSVJTVF9QQUdFLFxuXHQgICAgICAgICAgICBsYXN0UGFnZTogdGhpcy5wcm9wcy5vcHRpb25zLmxhc3RQYWdlIHx8IF9Db25zdDJbJ2RlZmF1bHQnXS5MQVNUX1BBR0Vcblx0ICAgICAgICAgIH0pXG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXJUb29sQmFyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJUb29sQmFyKCkge1xuXHQgICAgICB2YXIgZW5hYmxlU2hvd09ubHlTZWxlY3RlZCA9IHRoaXMucHJvcHMuc2VsZWN0Um93ICYmIHRoaXMucHJvcHMuc2VsZWN0Um93LnNob3dPbmx5U2VsZWN0ZWQ7XG5cdCAgICAgIGlmIChlbmFibGVTaG93T25seVNlbGVjdGVkIHx8IHRoaXMucHJvcHMuaW5zZXJ0Um93IHx8IHRoaXMucHJvcHMuZGVsZXRlUm93IHx8IHRoaXMucHJvcHMuc2VhcmNoIHx8IHRoaXMucHJvcHMuZXhwb3J0Q1NWKSB7XG5cdCAgICAgICAgdmFyIGNvbHVtbnMgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcblx0ICAgICAgICAgIGNvbHVtbnMgPSB0aGlzLnByb3BzLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9wcyA9IGNvbHVtbi5wcm9wcztcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICBuYW1lOiBwcm9wcy5jaGlsZHJlbixcblx0ICAgICAgICAgICAgICBmaWVsZDogcHJvcHMuZGF0YUZpZWxkLFxuXHQgICAgICAgICAgICAgIC8vd2hlbiB5b3Ugd2FudCBzYW1lIGF1dG8gZ2VuZXJhdGUgdmFsdWUgYW5kIG5vdCBhbGxvdyBlZGl0LCBleGFtcGxlIElEIGZpZWxkXG5cdCAgICAgICAgICAgICAgYXV0b1ZhbHVlOiBwcm9wcy5hdXRvVmFsdWUgfHwgZmFsc2UsXG5cdCAgICAgICAgICAgICAgLy9mb3IgY3JlYXRlIGVkaXRvciwgbm8gcGFyYW1zIGZvciBjb2x1bW4uZWRpdGFibGUoKSBpbmRpY2F0ZSB0aGF0IGVkaXRvciBmb3IgbmV3IHJvd1xuXHQgICAgICAgICAgICAgIGVkaXRhYmxlOiBwcm9wcy5lZGl0YWJsZSAmJiB0eXBlb2YgcHJvcHMuZWRpdGFibGUgPT09IFwiZnVuY3Rpb25cIiA/IHByb3BzLmVkaXRhYmxlKCkgOiBwcm9wcy5lZGl0YWJsZSxcblx0ICAgICAgICAgICAgICAvL2hpZGRlbiBpbiBwb3B1cFxuXHQgICAgICAgICAgICAgIGhpZGRlbkluUG9wdXA6IHByb3BzLmhpZGRlbkluUG9wdXAsXG5cdCAgICAgICAgICAgICAgZm9ybWF0OiBwcm9wcy5kYXRhRm9ybWF0ID8gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuZGF0YUZvcm1hdCh2YWx1ZSwgbnVsbCwgcHJvcHMuZm9ybWF0RXh0cmFEYXRhKS5yZXBsYWNlKC88Lio/Pi9nLCAnJyk7XG5cdCAgICAgICAgICAgICAgfSA6IGZhbHNlXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgY29sdW1ucyA9IFt7XG5cdCAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMuY2hpbGRyZW4sXG5cdCAgICAgICAgICAgIGZpZWxkOiB0aGlzLnByb3BzLmNoaWxkcmVuLnByb3BzLmRhdGFGaWVsZCxcblx0ICAgICAgICAgICAgZWRpdGFibGU6IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMuZWRpdGFibGUsXG5cdCAgICAgICAgICAgIGhpZGRlbkluUG9wdXA6IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMuaGlkZGVuSW5Qb3B1cFxuXHQgICAgICAgICAgfV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgeyBjbGFzc05hbWU6ICd0b29sLWJhcicgfSxcblx0ICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF90b29sYmFyVG9vbEJhcjJbJ2RlZmF1bHQnXSwge1xuXHQgICAgICAgICAgICBjbGVhclNlYXJjaDogdGhpcy5wcm9wcy5vcHRpb25zLmNsZWFyU2VhcmNoLFxuXHQgICAgICAgICAgICBlbmFibGVJbnNlcnQ6IHRoaXMucHJvcHMuaW5zZXJ0Um93LFxuXHQgICAgICAgICAgICBlbmFibGVEZWxldGU6IHRoaXMucHJvcHMuZGVsZXRlUm93LFxuXHQgICAgICAgICAgICBlbmFibGVTZWFyY2g6IHRoaXMucHJvcHMuc2VhcmNoLFxuXHQgICAgICAgICAgICBlbmFibGVFeHBvcnRDU1Y6IHRoaXMucHJvcHMuZXhwb3J0Q1NWLFxuXHQgICAgICAgICAgICBlbmFibGVTaG93T25seVNlbGVjdGVkOiBlbmFibGVTaG93T25seVNlbGVjdGVkLFxuXHQgICAgICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLFxuXHQgICAgICAgICAgICBzZWFyY2hQbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5zZWFyY2hQbGFjZWhvbGRlcixcblx0ICAgICAgICAgICAgb25BZGRSb3c6IHRoaXMuaGFuZGxlQWRkUm93LmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgIG9uQWRkUm93QmVnaW46IHRoaXMuaGFuZGxlQWRkUm93QmVnaW4uYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgb25Ecm9wUm93OiB0aGlzLmhhbmRsZURyb3BSb3cuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgb25TZWFyY2g6IHRoaXMuaGFuZGxlU2VhcmNoLmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgIG9uRXhwb3J0Q1NWOiB0aGlzLmhhbmRsZUV4cG9ydENTVi5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICBvblNob3dPbmx5U2VsZWN0ZWQ6IHRoaXMuaGFuZGxlU2hvd09ubHlTZWxlY3RlZC5iaW5kKHRoaXMpXG5cdCAgICAgICAgICB9KVxuXHQgICAgICAgICk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXJUYWJsZUZpbHRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVGFibGVGaWx0ZXIoY29sdW1ucykge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5jb2x1bW5GaWx0ZXIpIHtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1RhYmxlRmlsdGVyMlsnZGVmYXVsdCddLCB7IGNvbHVtbnM6IGNvbHVtbnMsXG5cdCAgICAgICAgICByb3dTZWxlY3RUeXBlOiB0aGlzLnByb3BzLnNlbGVjdFJvdy5tb2RlLFxuXHQgICAgICAgICAgb25GaWx0ZXI6IHRoaXMuaGFuZGxlRmlsdGVyRGF0YS5iaW5kKHRoaXMpIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnX2hhbmRsZUFmdGVyQWRkaW5nUm93Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQWZ0ZXJBZGRpbmdSb3cobmV3T2JqKSB7XG5cdCAgICAgIHZhciByZXN1bHQgPSB1bmRlZmluZWQ7XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcblx0ICAgICAgICAvL2lmIHBhZ2luYXRpb24gaXMgZW5hYmxlZCBhbmQgaW5zZXJ0IHJvdyBiZSB0cmlnZ2VyLCBjaGFuZ2UgdG8gbGFzdCBwYWdlXG5cdCAgICAgICAgdmFyIHNpemVQZXJQYWdlID0gdGhpcy5zdGF0ZS5zaXplUGVyUGFnZTtcblx0XG5cdCAgICAgICAgdmFyIGN1cnJMYXN0UGFnZSA9IE1hdGguY2VpbCh0aGlzLnN0b3JlLmdldERhdGFOdW0oKSAvIHNpemVQZXJQYWdlKTtcblx0ICAgICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoY3Vyckxhc3RQYWdlLCBzaXplUGVyUGFnZSkuZ2V0KCk7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICBkYXRhOiByZXN1bHQsXG5cdCAgICAgICAgICBjdXJyUGFnZTogY3Vyckxhc3RQYWdlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmVzdWx0ID0gdGhpcy5zdG9yZS5nZXQoKTtcblx0ICAgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICAgIGRhdGE6IHJlc3VsdFxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVySW5zZXJ0Um93KSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVySW5zZXJ0Um93KG5ld09iaik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBCb290c3RyYXBUYWJsZTtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRCb290c3RyYXBUYWJsZS5wcm9wVHlwZXMgPSB7XG5cdCAga2V5RmllbGQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgIGhlaWdodDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgbWF4SGVpZ2h0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICB0YWJsZUlEOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICBkYXRhOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9uZU9mVHlwZShbX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSwgX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3RdKSxcblx0ICByZW1vdGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gcmVtb3RlIGRhdGEsIGRlZmF1bHQgaXMgZmFsc2Vcblx0ICBzdHJpcGVkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgYm9yZGVyZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBob3ZlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgIGNvbmRlbnNlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgIHBhZ2luYXRpb246IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBzZWFyY2hQbGFjZWhvbGRlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgc2VsZWN0Um93OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnNoYXBlKHtcblx0ICAgIG1vZGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub25lT2YoW19Db25zdDJbJ2RlZmF1bHQnXS5ST1dfU0VMRUNUX05PTkUsIF9Db25zdDJbJ2RlZmF1bHQnXS5ST1dfU0VMRUNUX1NJTkdMRSwgX0NvbnN0MlsnZGVmYXVsdCddLlJPV19TRUxFQ1RfTVVMVEldKSxcblx0ICAgIGJnQ29sb3I6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgc2VsZWN0ZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYXJyYXksXG5cdCAgICBvblNlbGVjdDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgb25TZWxlY3RBbGw6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICAgIGNsaWNrVG9TZWxlY3Q6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICAgIGhpZGVTZWxlY3RDb2x1bW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICAgIGNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgICAgc2hvd09ubHlTZWxlY3RlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sXG5cdCAgfSksXG5cdCAgY2VsbEVkaXQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc2hhcGUoe1xuXHQgICAgbW9kZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBibHVyVG9TYXZlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgICBhZnRlclNhdmVDZWxsOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmNcblx0ICB9KSxcblx0ICBpbnNlcnRSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBkZWxldGVSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBzZWFyY2g6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBjb2x1bW5GaWx0ZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICB0ckNsYXNzTmFtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hbnksXG5cdCAgb3B0aW9uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zaGFwZSh7XG5cdCAgICBiZWZvcmVJbnNlcnRSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICAgIGNsZWFyU2VhcmNoOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgICBzb3J0TmFtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBzb3J0T3JkZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgYWZ0ZXJUYWJsZUNvbXBsZXRlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgICBhZnRlckRlbGV0ZVJvdzogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgYWZ0ZXJJbnNlcnRSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICAgIGFmdGVyU2VhcmNoOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgICBhZnRlckNvbHVtbkZpbHRlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgb25Sb3dDbGljazogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgcGFnZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsXG5cdCAgICBzaXplUGVyUGFnZUxpc3Q6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYXJyYXksXG5cdCAgICBzaXplUGVyUGFnZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsXG5cdCAgICBwYWdpbmF0aW9uU2l6ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsXG5cdCAgICBvblNvcnRDaGFuZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICAgIG9uUGFnZUNoYW5nZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgb25TaXplUGVyUGFnZUxpc3Q6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICAgIG5vRGF0YVRleHQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgaGFuZGxlQ29uZmlybURlbGV0ZVJvdzogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgcHJlUGFnZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBuZXh0UGFnZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBmaXJzdFBhZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgbGFzdFBhZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nXG5cdCAgfSksXG5cdCAgZmV0Y2hJbmZvOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnNoYXBlKHtcblx0ICAgIGRhdGFUb3RhbFNpemU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyXG5cdCAgfSksXG5cdCAgZXhwb3J0Q1NWOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgY3N2RmlsZU5hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nXG5cdH07XG5cdEJvb3RzdHJhcFRhYmxlLmRlZmF1bHRQcm9wcyA9IHtcblx0ICBoZWlnaHQ6IFwiMTAwJVwiLFxuXHQgIG1heEhlaWdodDogdW5kZWZpbmVkLFxuXHQgIHRhYmxlSUQ6IHVuZGVmaW5lZCxcblx0ICBzdHJpcGVkOiBmYWxzZSxcblx0ICBib3JkZXJlZDogdHJ1ZSxcblx0ICBob3ZlcjogZmFsc2UsXG5cdCAgY29uZGVuc2VkOiBmYWxzZSxcblx0ICBwYWdpbmF0aW9uOiBmYWxzZSxcblx0ICBzZWFyY2hQbGFjZWhvbGRlcjogdW5kZWZpbmVkLFxuXHQgIHNlbGVjdFJvdzoge1xuXHQgICAgbW9kZTogX0NvbnN0MlsnZGVmYXVsdCddLlJPV19TRUxFQ1RfTk9ORSxcblx0ICAgIGJnQ29sb3I6IF9Db25zdDJbJ2RlZmF1bHQnXS5ST1dfU0VMRUNUX0JHX0NPTE9SLFxuXHQgICAgc2VsZWN0ZWQ6IFtdLFxuXHQgICAgb25TZWxlY3Q6IHVuZGVmaW5lZCxcblx0ICAgIG9uU2VsZWN0QWxsOiB1bmRlZmluZWQsXG5cdCAgICBjbGlja1RvU2VsZWN0OiBmYWxzZSxcblx0ICAgIGhpZGVTZWxlY3RDb2x1bW46IGZhbHNlLFxuXHQgICAgY2xpY2tUb1NlbGVjdEFuZEVkaXRDZWxsOiBmYWxzZSxcblx0ICAgIHNob3dPbmx5U2VsZWN0ZWQ6IGZhbHNlXG5cdCAgfSxcblx0ICBjZWxsRWRpdDoge1xuXHQgICAgbW9kZTogX0NvbnN0MlsnZGVmYXVsdCddLkNFTExfRURJVF9OT05FLFxuXHQgICAgYmx1clRvU2F2ZTogZmFsc2UsXG5cdCAgICBhZnRlclNhdmVDZWxsOiB1bmRlZmluZWRcblx0ICB9LFxuXHQgIGluc2VydFJvdzogZmFsc2UsXG5cdCAgZGVsZXRlUm93OiBmYWxzZSxcblx0ICBzZWFyY2g6IGZhbHNlLFxuXHQgIG11bHRpQ29sdW1uU2VhcmNoOiBmYWxzZSxcblx0ICBjb2x1bW5GaWx0ZXI6IGZhbHNlLFxuXHQgIHRyQ2xhc3NOYW1lOiAnJyxcblx0ICBvcHRpb25zOiB7XG5cdCAgICBjbGVhclNlYXJjaDogZmFsc2UsXG5cdCAgICBzb3J0TmFtZTogdW5kZWZpbmVkLFxuXHQgICAgc29ydE9yZGVyOiB1bmRlZmluZWQsXG5cdCAgICBhZnRlclRhYmxlQ29tcGxldGU6IHVuZGVmaW5lZCxcblx0ICAgIGFmdGVyRGVsZXRlUm93OiB1bmRlZmluZWQsXG5cdCAgICBhZnRlckluc2VydFJvdzogdW5kZWZpbmVkLFxuXHQgICAgYWZ0ZXJTZWFyY2g6IHVuZGVmaW5lZCxcblx0ICAgIGFmdGVyQ29sdW1uRmlsdGVyOiB1bmRlZmluZWQsXG5cdCAgICBvblJvd0NsaWNrOiB1bmRlZmluZWQsXG5cdCAgICBvbk1vdXNlTGVhdmU6IHVuZGVmaW5lZCxcblx0ICAgIG9uTW91c2VFbnRlcjogdW5kZWZpbmVkLFxuXHQgICAgb25Sb3dNb3VzZU91dDogdW5kZWZpbmVkLFxuXHQgICAgb25Sb3dNb3VzZU92ZXI6IHVuZGVmaW5lZCxcblx0ICAgIHBhZ2U6IHVuZGVmaW5lZCxcblx0ICAgIHNpemVQZXJQYWdlTGlzdDogX0NvbnN0MlsnZGVmYXVsdCddLlNJWkVfUEVSX1BBR0VfTElTVCxcblx0ICAgIHNpemVQZXJQYWdlOiB1bmRlZmluZWQsXG5cdCAgICBwYWdpbmF0aW9uU2l6ZTogX0NvbnN0MlsnZGVmYXVsdCddLlBBR0lOQVRJT05fU0laRSxcblx0ICAgIG9uU2l6ZVBlclBhZ2VMaXN0OiB1bmRlZmluZWQsXG5cdCAgICBub0RhdGFUZXh0OiB1bmRlZmluZWQsXG5cdCAgICBoYW5kbGVDb25maXJtRGVsZXRlUm93OiB1bmRlZmluZWQsXG5cdCAgICBwcmVQYWdlOiBfQ29uc3QyWydkZWZhdWx0J10uUFJFX1BBR0UsXG5cdCAgICBuZXh0UGFnZTogX0NvbnN0MlsnZGVmYXVsdCddLk5FWFRfUEFHRSxcblx0ICAgIGZpcnN0UGFnZTogX0NvbnN0MlsnZGVmYXVsdCddLkZJUlNUX1BBR0UsXG5cdCAgICBsYXN0UGFnZTogX0NvbnN0MlsnZGVmYXVsdCddLkxBU1RfUEFHRVxuXHQgIH0sXG5cdCAgZmV0Y2hJbmZvOiB7XG5cdCAgICBkYXRhVG90YWxTaXplOiAwXG5cdCAgfSxcblx0ICBleHBvcnRDU1Y6IGZhbHNlLFxuXHQgIGNzdkZpbGVOYW1lOiB1bmRlZmluZWRcblx0fTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEJvb3RzdHJhcFRhYmxlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX0NvbnN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQ29uc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uc3QpO1xuXHRcblx0dmFyIEV2ZW50RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpLkV2ZW50RW1pdHRlcjtcblx0XG5cdHZhciBGaWx0ZXIgPSAoZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcblx0ICAgIF9pbmhlcml0cyhGaWx0ZXIsIF9FdmVudEVtaXR0ZXIpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIEZpbHRlcihkYXRhKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbHRlcik7XG5cdFxuXHQgICAgICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKEZpbHRlci5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIGRhdGEpO1xuXHQgICAgICAgIHRoaXMuY3VycmVudEZpbHRlciA9IHt9O1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhGaWx0ZXIsIFt7XG5cdCAgICAgICAga2V5OiAnaGFuZGxlRmlsdGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRmlsdGVyKGRhdGFGaWVsZCwgdmFsdWUsIHR5cGUpIHtcblx0ICAgICAgICAgICAgdmFyIGZpbHRlclR5cGUgPSB0eXBlIHx8IF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5DVVNUT007XG5cdFxuXHQgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YWx1ZSBvZiB0aGUgZmlsdGVyIGlzIGFuIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgdmFyIGhhc1ZhbHVlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gdmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlW3Byb3BdIHx8IHZhbHVlW3Byb3BdID09PSBcIlwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgb2JqZWN0IHByb3BlcnRpZXMgaXMgdW5kZWZpbmVkIG9yIGVtcHR5LCB3ZSByZW1vdmUgdGhlIGZpbHRlclxuXHQgICAgICAgICAgICAgICAgaGFzVmFsdWUgPyB0aGlzLmN1cnJlbnRGaWx0ZXJbZGF0YUZpZWxkXSA9IHsgdmFsdWU6IHZhbHVlLCB0eXBlOiBmaWx0ZXJUeXBlIH0gOiBkZWxldGUgdGhpcy5jdXJyZW50RmlsdGVyW2RhdGFGaWVsZF07XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlIHx8IHZhbHVlLnRyaW0oKSA9PT0gXCJcIikge1xuXHQgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudEZpbHRlcltkYXRhRmllbGRdO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyW2RhdGFGaWVsZF0gPSB7IHZhbHVlOiB2YWx1ZS50cmltKCksIHR5cGU6IGZpbHRlclR5cGUgfTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmVtaXQoJ29uRmlsdGVyQ2hhbmdlJywgdGhpcy5jdXJyZW50RmlsdGVyKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEZpbHRlcjtcblx0fSkoRXZlbnRFbWl0dGVyKTtcblx0XG5cdGV4cG9ydHMuRmlsdGVyID0gRmlsdGVyO1xuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdHZhciBfQ29uc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9Db25zdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdCk7XG5cdFxuXHR2YXIgU2VsZWN0Um93SGVhZGVyQ29sdW1uID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgX2luaGVyaXRzKFNlbGVjdFJvd0hlYWRlckNvbHVtbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgIGZ1bmN0aW9uIFNlbGVjdFJvd0hlYWRlckNvbHVtbigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3RSb3dIZWFkZXJDb2x1bW4pO1xuXHRcblx0ICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFNlbGVjdFJvd0hlYWRlckNvbHVtbi5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFNlbGVjdFJvd0hlYWRlckNvbHVtbiwgW3tcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgdGhTdHlsZSA9IHtcblx0ICAgICAgICB3aWR0aDogcGFyc2VJbnQodGhpcy5wcm9wcy53aWR0aCkgPyB0aGlzLnByb3BzLndpZHRoIDogMzVcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAndGgnLFxuXHQgICAgICAgIHsgc3R5bGU6IHRoU3R5bGUgfSxcblx0ICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgeyBjbGFzc05hbWU6ICd0aC1pbm5lciB0YWJsZS1oZWFkZXItY29sdW1uJyB9LFxuXHQgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuXHQgICAgICAgIClcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBTZWxlY3RSb3dIZWFkZXJDb2x1bW47XG5cdH0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU2VsZWN0Um93SGVhZGVyQ29sdW1uO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfQ29uc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9Db25zdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdCk7XG5cdFxuXHR2YXIgX3V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIF91dGlsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWwpO1xuXHRcblx0dmFyIF9UYWJsZVJvdyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXHRcblx0dmFyIF9UYWJsZVJvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWJsZVJvdyk7XG5cdFxuXHR2YXIgX1RhYmxlQ29sdW1uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdFxuXHR2YXIgX1RhYmxlQ29sdW1uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYmxlQ29sdW1uKTtcblx0XG5cdHZhciBfVGFibGVFZGl0Q29sdW1uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdFxuXHR2YXIgX1RhYmxlRWRpdENvbHVtbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWJsZUVkaXRDb2x1bW4pO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdHZhciBpc0Z1biA9IGZ1bmN0aW9uIGlzRnVuKG9iaikge1xuXHQgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXHRcblx0dmFyIFRhYmxlQm9keSA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhUYWJsZUJvZHksIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICBmdW5jdGlvbiBUYWJsZUJvZHkocHJvcHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJsZUJvZHkpO1xuXHRcblx0ICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlQm9keS5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcblx0ICAgIHRoaXMuc3RhdGUgPSB7XG5cdCAgICAgIGN1cnJFZGl0Q2VsbDogbnVsbFxuXHQgICAgfTtcblx0ICAgIHRoaXMuZWRpdGluZyA9IGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFRhYmxlQm9keSwgW3tcblx0ICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgdGhpcy5hZGp1c3RCb2R5KCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG5cdCAgICAgIHRoaXMuYWRqdXN0Qm9keSgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgY29udGFpbmVyQ2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoXCJ0YWJsZS1jb250YWluZXJcIik7XG5cdFxuXHQgICAgICB2YXIgdGFibGVDbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKShcInRhYmxlXCIsIHtcblx0ICAgICAgICAndGFibGUtc3RyaXBlZCc6IHRoaXMucHJvcHMuc3RyaXBlZCxcblx0ICAgICAgICAndGFibGUtYm9yZGVyZWQnOiB0aGlzLnByb3BzLmJvcmRlcmVkLFxuXHQgICAgICAgICd0YWJsZS1ob3Zlcic6IHRoaXMucHJvcHMuaG92ZXIsXG5cdCAgICAgICAgJ3RhYmxlLWNvbmRlbnNlZCc6IHRoaXMucHJvcHMuY29uZGVuc2VkXG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgdmFyIGlzU2VsZWN0Um93RGVmaW5lZCA9IHRoaXMuX2lzU2VsZWN0Um93RGVmaW5lZCgpO1xuXHQgICAgICB2YXIgdGFibGVIZWFkZXIgPSB0aGlzLnJlbmRlclRhYmxlSGVhZGVyKGlzU2VsZWN0Um93RGVmaW5lZCk7XG5cdFxuXHQgICAgICB2YXIgdGFibGVSb3dzID0gdGhpcy5wcm9wcy5kYXRhLm1hcChmdW5jdGlvbiAoZGF0YSwgcikge1xuXHQgICAgICAgIHZhciB0YWJsZUNvbHVtbnMgPSB0aGlzLnByb3BzLmNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4sIGkpIHtcblx0ICAgICAgICAgIHZhciBmaWVsZFZhbHVlID0gZGF0YVtjb2x1bW4ubmFtZV07XG5cdCAgICAgICAgICBpZiAodGhpcy5lZGl0aW5nICYmIGNvbHVtbi5uYW1lICE9PSB0aGlzLnByb3BzLmtleUZpZWxkICYmIC8vIEtleSBmaWVsZCBjYW4ndCBiZSBlZGl0XG5cdCAgICAgICAgICBjb2x1bW4uZWRpdGFibGUgJiYgLy8gY29sdW1uIGlzIGVkaXRhYmxlPyBkZWZhdWx0IGlzIHRydWUsIHVzZXIgY2FuIHNldCBpdCBmYWxzZVxuXHQgICAgICAgICAgdGhpcy5zdGF0ZS5jdXJyRWRpdENlbGwgIT0gbnVsbCAmJiB0aGlzLnN0YXRlLmN1cnJFZGl0Q2VsbC5yaWQgPT0gciAmJiB0aGlzLnN0YXRlLmN1cnJFZGl0Q2VsbC5jaWQgPT0gaSkge1xuXHQgICAgICAgICAgICB2YXIgZm9ybWF0ID0gY29sdW1uLmZvcm1hdCA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBjb2x1bW4uZm9ybWF0KHZhbHVlLCBkYXRhLCBjb2x1bW4uZm9ybWF0RXh0cmFEYXRhKS5yZXBsYWNlKC88Lio/Pi9nLCAnJyk7XG5cdCAgICAgICAgICAgIH0gOiBmYWxzZTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICBfVGFibGVFZGl0Q29sdW1uMlsnZGVmYXVsdCddLFxuXHQgICAgICAgICAgICAgIHsgY29tcGxldGVFZGl0OiB0aGlzLmhhbmRsZUNvbXBsZXRlRWRpdENlbGwuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgICAgIC8vYWRkIGJ5IGJsdWVzcHJpbmcgZm9yIGNvbHVtbiBlZGl0b3IgY3VzdG9taXplXG5cdCAgICAgICAgICAgICAgICBlZGl0YWJsZTogaXNGdW4oY29sdW1uLmVkaXRhYmxlKSA/IGNvbHVtbi5lZGl0YWJsZShmaWVsZFZhbHVlLCBkYXRhLCByLCBpKSA6IGNvbHVtbi5lZGl0YWJsZSxcblx0ICAgICAgICAgICAgICAgIGZvcm1hdDogY29sdW1uLmZvcm1hdCA/IGZvcm1hdCA6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAga2V5OiBpLFxuXHQgICAgICAgICAgICAgICAgYmx1clRvU2F2ZTogdGhpcy5wcm9wcy5jZWxsRWRpdC5ibHVyVG9TYXZlLFxuXHQgICAgICAgICAgICAgICAgcm93SW5kZXg6IHIsXG5cdCAgICAgICAgICAgICAgICBjb2xJbmRleDogaSB9LFxuXHQgICAgICAgICAgICAgIGZpZWxkVmFsdWVcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vYWRkIGJ5IGJsdWVzcHJpbmcgZm9yIGNsYXNzTmFtZSBjdXN0b21pemVcblx0ICAgICAgICAgICAgdmFyIHRkQ2xhc3NOYW1lID0gaXNGdW4oY29sdW1uLmNsYXNzTmFtZSkgPyBjb2x1bW4uY2xhc3NOYW1lKGZpZWxkVmFsdWUsIGRhdGEsIHIsIGkpIDogY29sdW1uLmNsYXNzTmFtZTtcblx0XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY29sdW1uLmZvcm1hdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHQgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRWYWx1ZSA9IGNvbHVtbi5mb3JtYXQoZmllbGRWYWx1ZSwgZGF0YSwgY29sdW1uLmZvcm1hdEV4dHJhRGF0YSk7XG5cdCAgICAgICAgICAgICAgaWYgKCFfcmVhY3QyWydkZWZhdWx0J10uaXNWYWxpZEVsZW1lbnQoZm9ybWF0dGVkVmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogZm9ybWF0dGVkVmFsdWUgfSB9KTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgX1RhYmxlQ29sdW1uMlsnZGVmYXVsdCddLFxuXHQgICAgICAgICAgICAgICAgeyBkYXRhQWxpZ246IGNvbHVtbi5hbGlnbixcblx0ICAgICAgICAgICAgICAgICAga2V5OiBpLFxuXHQgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IHRkQ2xhc3NOYW1lLFxuXHQgICAgICAgICAgICAgICAgICBjZWxsRWRpdDogdGhpcy5wcm9wcy5jZWxsRWRpdCxcblx0ICAgICAgICAgICAgICAgICAgaGlkZGVuOiBjb2x1bW4uaGlkZGVuLFxuXHQgICAgICAgICAgICAgICAgICBvbkVkaXQ6IHRoaXMuaGFuZGxlRWRpdENlbGwuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgICAgICAgd2lkdGg6IGNvbHVtbi53aWR0aCB9LFxuXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWVcblx0ICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgIF9UYWJsZUNvbHVtbjJbJ2RlZmF1bHQnXSxcblx0ICAgICAgICAgICAgICAgIHsgZGF0YUFsaWduOiBjb2x1bW4uYWxpZ24sXG5cdCAgICAgICAgICAgICAgICAgIGtleTogaSxcblx0ICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0ZENsYXNzTmFtZSxcblx0ICAgICAgICAgICAgICAgICAgY2VsbEVkaXQ6IHRoaXMucHJvcHMuY2VsbEVkaXQsXG5cdCAgICAgICAgICAgICAgICAgIGhpZGRlbjogY29sdW1uLmhpZGRlbixcblx0ICAgICAgICAgICAgICAgICAgb25FZGl0OiB0aGlzLmhhbmRsZUVkaXRDZWxsLmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgICAgICAgIHdpZHRoOiBjb2x1bW4ud2lkdGggfSxcblx0ICAgICAgICAgICAgICAgIGZpZWxkVmFsdWVcblx0ICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSwgdGhpcyk7XG5cdCAgICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5wcm9wcy5zZWxlY3RlZFJvd0tleXMuaW5kZXhPZihkYXRhW3RoaXMucHJvcHMua2V5RmllbGRdKSAhPSAtMTtcblx0ICAgICAgICB2YXIgc2VsZWN0Um93Q29sdW1uID0gaXNTZWxlY3RSb3dEZWZpbmVkICYmICF0aGlzLnByb3BzLnNlbGVjdFJvdy5oaWRlU2VsZWN0Q29sdW1uID8gdGhpcy5yZW5kZXJTZWxlY3RSb3dDb2x1bW4oc2VsZWN0ZWQpIDogbnVsbDtcblx0ICAgICAgICAvL2FkZCBieSBibHVlc3ByaW5nIGZvciBjbGFzc05hbWUgY3VzdG9taXplXG5cdCAgICAgICAgdmFyIHRyQ2xhc3NOYW1lID0gaXNGdW4odGhpcy5wcm9wcy50ckNsYXNzTmFtZSkgPyB0aGlzLnByb3BzLnRyQ2xhc3NOYW1lKGRhdGEsIHIpIDogdGhpcy5wcm9wcy50ckNsYXNzTmFtZTtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBfVGFibGVSb3cyWydkZWZhdWx0J10sXG5cdCAgICAgICAgICB7IGlzU2VsZWN0ZWQ6IHNlbGVjdGVkLCBrZXk6IHIsIGNsYXNzTmFtZTogdHJDbGFzc05hbWUsXG5cdCAgICAgICAgICAgIHNlbGVjdFJvdzogaXNTZWxlY3RSb3dEZWZpbmVkID8gdGhpcy5wcm9wcy5zZWxlY3RSb3cgOiB1bmRlZmluZWQsXG5cdCAgICAgICAgICAgIGVuYWJsZUNlbGxFZGl0OiB0aGlzLnByb3BzLmNlbGxFZGl0Lm1vZGUgIT09IF9Db25zdDJbJ2RlZmF1bHQnXS5DRUxMX0VESVRfTk9ORSxcblx0ICAgICAgICAgICAgb25Sb3dDbGljazogdGhpcy5oYW5kbGVSb3dDbGljay5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICBvblJvd01vdXNlT3ZlcjogdGhpcy5oYW5kbGVSb3dNb3VzZU92ZXIuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgb25Sb3dNb3VzZU91dDogdGhpcy5oYW5kbGVSb3dNb3VzZU91dC5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICBvblNlbGVjdFJvdzogdGhpcy5oYW5kbGVTZWxlY3RSb3cuYmluZCh0aGlzKSB9LFxuXHQgICAgICAgICAgc2VsZWN0Um93Q29sdW1uLFxuXHQgICAgICAgICAgdGFibGVDb2x1bW5zXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSwgdGhpcyk7XG5cdFxuXHQgICAgICBpZiAodGFibGVSb3dzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHRhYmxlUm93cy5wdXNoKF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgX1RhYmxlUm93MlsnZGVmYXVsdCddLFxuXHQgICAgICAgICAgeyBrZXk6ICcjI3RhYmxlLWVtcHR5IyMnIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgJ3RkJyxcblx0ICAgICAgICAgICAgeyBjb2xTcGFuOiB0aGlzLnByb3BzLmNvbHVtbnMubGVuZ3RoICsgKGlzU2VsZWN0Um93RGVmaW5lZCA/IDEgOiAwKSxcblx0ICAgICAgICAgICAgICBjbGFzc05hbWU6ICdyZWFjdC1icy10YWJsZS1uby1kYXRhJyB9LFxuXHQgICAgICAgICAgICB0aGlzLnByb3BzLm5vRGF0YVRleHQgfHwgX0NvbnN0MlsnZGVmYXVsdCddLk5PX0RBVEFfVEVYVFxuXHQgICAgICAgICAgKVxuXHQgICAgICAgICkpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLmVkaXRpbmcgPSBmYWxzZTtcblx0XG5cdCAgICAgIHZhciBoZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUNvbnRhaW5lckhlaWdodCgpLnRvU3RyaW5nKCk7XG5cdFxuXHQgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgeyByZWY6ICdjb250YWluZXInLCBjbGFzc05hbWU6IGNvbnRhaW5lckNsYXNzZXMsIHN0eWxlOiB7IGhlaWdodDogaGVpZ2h0IH0gfSxcblx0ICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICd0YWJsZScsXG5cdCAgICAgICAgICB7IHJlZjogJ2JvZHknLCBjbGFzc05hbWU6IHRhYmxlQ2xhc3NlcyB9LFxuXHQgICAgICAgICAgdGFibGVIZWFkZXIsXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgJ3Rib2R5Jyxcblx0ICAgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgICAgdGFibGVSb3dzXG5cdCAgICAgICAgICApXG5cdCAgICAgICAgKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlclRhYmxlSGVhZGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJUYWJsZUhlYWRlcihpc1NlbGVjdFJvd0RlZmluZWQpIHtcblx0ICAgICAgdmFyIHNlbGVjdFJvd0hlYWRlciA9IG51bGw7XG5cdFxuXHQgICAgICBpZiAoaXNTZWxlY3RSb3dEZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHN0eWxlID0ge1xuXHQgICAgICAgICAgd2lkdGg6IDM1LFxuXHQgICAgICAgICAgbWluV2lkdGg6IDM1XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBzZWxlY3RSb3dIZWFkZXIgPSB0aGlzLnByb3BzLnNlbGVjdFJvdy5oaWRlU2VsZWN0Q29sdW1uID8gbnVsbCA6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCd0aCcsIHsgc3R5bGU6IHN0eWxlLCBrZXk6IC0xIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciB0aGVhZGVyID0gdGhpcy5wcm9wcy5jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uLCBpKSB7XG5cdCAgICAgICAgdmFyIHdpZHRoID0gY29sdW1uLndpZHRoID09IG51bGwgPyBjb2x1bW4ud2lkdGggOiBwYXJzZUludChjb2x1bW4ud2lkdGgpO1xuXHQgICAgICAgIHZhciBzdHlsZSA9IHtcblx0ICAgICAgICAgIGRpc3BsYXk6IGNvbHVtbi5oaWRkZW4gPyBcIm5vbmVcIiA6IG51bGwsXG5cdCAgICAgICAgICB3aWR0aDogd2lkdGgsXG5cdCAgICAgICAgICBtYXhXaWR0aDogd2lkdGhcblx0ICAgICAgICAgIC8qKiBhZGQgbWluLXdkdGggdG8gZml4IHVzZXIgYXNzaWduIGNvbHVtbiB3aWR0aCBub3QgZXEgb2Zmc2V0V2lkdGggaW4gbGFyZ2UgY29sdW1uIHRhYmxlICoqL1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdmFyIHNvcnRDYWVydCA9IGNvbHVtbi5zb3J0ID8gX3V0aWwyWydkZWZhdWx0J10ucmVuZGVyUmVhY3RTb3J0Q2FyZXQoX0NvbnN0MlsnZGVmYXVsdCddLlNPUlRfREVTQykgOiBudWxsO1xuXHQgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICd0aCcsXG5cdCAgICAgICAgICB7IHN0eWxlOiBzdHlsZSwga2V5OiBpLCBjbGFzc05hbWU6IGNvbHVtbi5jbGFzc05hbWUgfSxcblx0ICAgICAgICAgIGNvbHVtbi50ZXh0LFxuXHQgICAgICAgICAgc29ydENhZXJ0XG5cdCAgICAgICAgKTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ3RoZWFkJyxcblx0ICAgICAgICB7IHJlZjogJ2hlYWRlcicgfSxcblx0ICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICd0cicsXG5cdCAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgc2VsZWN0Um93SGVhZGVyLFxuXHQgICAgICAgICAgdGhlYWRlclxuXHQgICAgICAgIClcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVSb3dNb3VzZU91dCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlUm93TW91c2VPdXQocm93SW5kZXgpIHtcblx0ICAgICAgdmFyIHRhcmdldFJvdyA9IHRoaXMucHJvcHMuZGF0YVtyb3dJbmRleCAtIDFdO1xuXHQgICAgICB0aGlzLnByb3BzLm9uUm93TW91c2VPdXQodGFyZ2V0Um93KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVSb3dNb3VzZU92ZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVJvd01vdXNlT3Zlcihyb3dJbmRleCkge1xuXHQgICAgICB2YXIgdGFyZ2V0Um93ID0gdGhpcy5wcm9wcy5kYXRhW3Jvd0luZGV4IC0gMV07XG5cdCAgICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU92ZXIodGFyZ2V0Um93KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVSb3dDbGljaycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlUm93Q2xpY2socm93SW5kZXgpIHtcblx0ICAgICAgdmFyIGtleSwgc2VsZWN0ZWRSb3c7XG5cdCAgICAgIHRoaXMucHJvcHMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3csIGkpIHtcblx0ICAgICAgICBpZiAoaSA9PSByb3dJbmRleCAtIDEpIHtcblx0ICAgICAgICAgIGtleSA9IHJvd1t0aGlzLnByb3BzLmtleUZpZWxkXTtcblx0ICAgICAgICAgIHNlbGVjdGVkUm93ID0gcm93O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSwgdGhpcyk7XG5cdCAgICAgIHRoaXMucHJvcHMub25Sb3dDbGljayhzZWxlY3RlZFJvdyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlU2VsZWN0Um93Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3RSb3cocm93SW5kZXgsIGlzU2VsZWN0ZWQpIHtcblx0ICAgICAgdmFyIGtleSwgc2VsZWN0ZWRSb3c7XG5cdCAgICAgIHRoaXMucHJvcHMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3csIGkpIHtcblx0ICAgICAgICBpZiAoaSA9PSByb3dJbmRleCAtIDEpIHtcblx0ICAgICAgICAgIGtleSA9IHJvd1t0aGlzLnByb3BzLmtleUZpZWxkXTtcblx0ICAgICAgICAgIHNlbGVjdGVkUm93ID0gcm93O1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSwgdGhpcyk7XG5cdCAgICAgIHRoaXMucHJvcHMub25TZWxlY3RSb3coc2VsZWN0ZWRSb3csIGlzU2VsZWN0ZWQpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZVNlbGVjdFJvd0NvbHVtQ2hhbmdlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3RSb3dDb2x1bUNoYW5nZShlKSB7XG5cdCAgICAgIGlmICghdGhpcy5wcm9wcy5zZWxlY3RSb3cuY2xpY2tUb1NlbGVjdCB8fCAhdGhpcy5wcm9wcy5zZWxlY3RSb3cuY2xpY2tUb1NlbGVjdEFuZEVkaXRDZWxsKSB7XG5cdCAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3RSb3coZS5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5yb3dJbmRleCwgZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlRWRpdENlbGwnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUVkaXRDZWxsKHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuXHQgICAgICB0aGlzLmVkaXRpbmcgPSB0cnVlO1xuXHQgICAgICBpZiAodGhpcy5faXNTZWxlY3RSb3dEZWZpbmVkKCkpIHtcblx0ICAgICAgICBjb2x1bW5JbmRleC0tO1xuXHQgICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdFJvdy5oaWRlU2VsZWN0Q29sdW1uKSBjb2x1bW5JbmRleCsrO1xuXHQgICAgICB9XG5cdCAgICAgIHJvd0luZGV4LS07XG5cdCAgICAgIHZhciBzdGF0ZU9iaiA9IHtcblx0ICAgICAgICBjdXJyRWRpdENlbGw6IHtcblx0ICAgICAgICAgIHJpZDogcm93SW5kZXgsXG5cdCAgICAgICAgICBjaWQ6IGNvbHVtbkluZGV4XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0Um93LmNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbCkge1xuXHQgICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0Um93KHJvd0luZGV4ICsgMSwgdHJ1ZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZU9iaik7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY2FuY2VsRWRpdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsRWRpdCgpIHtcblx0ICAgICAgdmFyIGN1cnJFZGl0Q2VsbCA9IHRoaXMuc3RhdGUuY3VyckVkaXRDZWxsO1xuXHQgICAgICBpZiAoY3VyckVkaXRDZWxsKSB7XG5cdCAgICAgICAgdGhpcy5oYW5kbGVDb21wbGV0ZUVkaXRDZWxsKG51bGwsIGN1cnJFZGl0Q2VsbC5yaWQsIGN1cnJFZGl0Q2VsbC5jaWQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlQ29tcGxldGVFZGl0Q2VsbCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ29tcGxldGVFZGl0Q2VsbChuZXdWYWwsIHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuXHQgICAgICB0aGlzLnNldFN0YXRlKHsgY3VyckVkaXRDZWxsOiBudWxsIH0pO1xuXHQgICAgICBpZiAobnVsbCAhPSBuZXdWYWwpIHRoaXMucHJvcHMuY2VsbEVkaXQuX19vbkNvbXBsZXRlRWRpdF9fKG5ld1ZhbCwgcm93SW5kZXgsIGNvbHVtbkluZGV4KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXJTZWxlY3RSb3dDb2x1bW4nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclNlbGVjdFJvd0NvbHVtbihzZWxlY3RlZCkge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RSb3cubW9kZSA9PSBfQ29uc3QyWydkZWZhdWx0J10uUk9XX1NFTEVDVF9TSU5HTEUpIHtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICBfVGFibGVDb2x1bW4yWydkZWZhdWx0J10sXG5cdCAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAncmFkaW8nLCBjaGVja2VkOiBzZWxlY3RlZCwgb25DaGFuZ2U6IHRoaXMuaGFuZGxlU2VsZWN0Um93Q29sdW1DaGFuZ2UuYmluZCh0aGlzKSB9KVxuXHQgICAgICAgICk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgX1RhYmxlQ29sdW1uMlsnZGVmYXVsdCddLFxuXHQgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogJ2NoZWNrYm94JywgY2hlY2tlZDogc2VsZWN0ZWQsIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZVNlbGVjdFJvd0NvbHVtQ2hhbmdlLmJpbmQodGhpcykgfSlcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0Qm9keUhlYWRlckRvbVByb3AnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvZHlIZWFkZXJEb21Qcm9wKCkge1xuXHQgICAgICB2YXIgaGVhZGVycyA9IHRoaXMucmVmcy5oZWFkZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuXHQgICAgICB2YXIgaGVhZGVyRG9tUHJvcHMgPSBbXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgaGVhZGVyRG9tUHJvcHMucHVzaCh7XG5cdCAgICAgICAgICB3aWR0aDogaGVhZGVyc1tpXS5vZmZzZXRXaWR0aFxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBoZWFkZXJEb21Qcm9wcztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdhZGp1c3RCb2R5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhZGp1c3RCb2R5KCkge1xuXHQgICAgICB0aGlzLmhhcmRGaXhIZWFkZXJXaWR0aCgpO1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5jb25kZW5zZWQpIHtcblx0ICAgICAgICB0aGlzLnJlZnMuYm9keS5zdHlsZS5tYXJnaW5Ub3AgPSBcIi0zNnB4XCI7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLm1heEhlaWdodCAmJiBwYXJzZUludCh0aGlzLnByb3BzLm1heEhlaWdodCkgPCB0aGlzLnJlZnMuY29udGFpbmVyLm9mZnNldEhlaWdodCkge1xuXHQgICAgICAgIHRoaXMucmVmcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5wcm9wcy5tYXhIZWlnaHQgLSA0MiArIFwicHhcIjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhcmRGaXhIZWFkZXJXaWR0aCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFyZEZpeEhlYWRlcldpZHRoKCkge1xuXHQgICAgICB2YXIgaGVhZGVycyA9IHRoaXMucmVmcy5oZWFkZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRlcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBoZWFkZXJzW2ldLnN0eWxlLndpZHRoID0gaGVhZGVyc1tpXS5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NhbGN1bGF0ZUNvbnRhaW5lckhlaWdodCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQ29udGFpbmVySGVpZ2h0KCkge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5oZWlnaHQgPT0gXCIxMDAlXCIpIHJldHVybiB0aGlzLnByb3BzLmhlaWdodDtlbHNlIHtcblx0ICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5wcm9wcy5oZWlnaHQpIC0gNDI7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfaXNTZWxlY3RSb3dEZWZpbmVkJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNTZWxlY3RSb3dEZWZpbmVkKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RSb3cubW9kZSA9PT0gX0NvbnN0MlsnZGVmYXVsdCddLlJPV19TRUxFQ1RfU0lOR0xFIHx8IHRoaXMucHJvcHMuc2VsZWN0Um93Lm1vZGUgPT09IF9Db25zdDJbJ2RlZmF1bHQnXS5ST1dfU0VMRUNUX01VTFRJO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFRhYmxlQm9keTtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRUYWJsZUJvZHkucHJvcFR5cGVzID0ge1xuXHQgIGhlaWdodDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgZGF0YTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSxcblx0ICBjb2x1bW5zOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmFycmF5LFxuXHQgIHN0cmlwZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBib3JkZXJlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgIGhvdmVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgY29uZGVuc2VkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAga2V5RmllbGQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgIHNlbGVjdGVkUm93S2V5czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSxcblx0ICBvblJvd0NsaWNrOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgb25TZWxlY3RSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICBub0RhdGFUZXh0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZ1xuXHR9O1xuXHRleHBvcnRzWydkZWZhdWx0J10gPSBUYWJsZUJvZHk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfQ29uc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9Db25zdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdCk7XG5cdFxuXHR2YXIgVGFibGVDb2x1bW4gPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoVGFibGVDb2x1bW4sIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICBmdW5jdGlvbiBUYWJsZUNvbHVtbihwcm9wcykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYmxlQ29sdW1uKTtcblx0XG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJsZUNvbHVtbi5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhUYWJsZUNvbHVtbiwgW3tcblx0ICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG5cdCAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cdFxuXHQgICAgICB2YXIgc2hvdWxkVXBkYXRlZCA9IHRoaXMucHJvcHMud2lkdGggIT09IG5leHRQcm9wcy53aWR0aCB8fCB0aGlzLnByb3BzLmNsYXNzTmFtZSAhPT0gbmV4dFByb3BzLmNsYXNzTmFtZSB8fCB0aGlzLnByb3BzLmhpZGRlbiAhPT0gbmV4dFByb3BzLmhpZGRlbiB8fCB0aGlzLnByb3BzLmRhdGFBbGlnbiAhPT0gbmV4dFByb3BzLmRhdGFBbGlnbiB8fCB0eXBlb2YgY2hpbGRyZW4gIT09IHR5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW4gfHwgKCcnICsgdGhpcy5wcm9wcy5vbkVkaXQpLnRvU3RyaW5nKCkgIT09ICgnJyArIG5leHRQcm9wcy5vbkVkaXQpLnRvU3RyaW5nKCk7XG5cdFxuXHQgICAgICBpZiAoc2hvdWxkVXBkYXRlZCkge1xuXHQgICAgICAgIHJldHVybiBzaG91bGRVcGRhdGVkO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0JyAmJiBjaGlsZHJlbiAhPT0gbnVsbCAmJiBjaGlsZHJlbi5wcm9wcyAhPT0gbnVsbCkge1xuXHQgICAgICAgIGlmIChjaGlsZHJlbi5wcm9wcy50eXBlID09PSAnY2hlY2tib3gnIHx8IGNoaWxkcmVuLnByb3BzLnR5cGUgPT09ICdyYWRpbycpIHtcblx0ICAgICAgICAgIHNob3VsZFVwZGF0ZWQgPSBzaG91bGRVcGRhdGVkIHx8IGNoaWxkcmVuLnByb3BzLnR5cGUgIT09IG5leHRQcm9wcy5jaGlsZHJlbi5wcm9wcy50eXBlIHx8IGNoaWxkcmVuLnByb3BzLmNoZWNrZWQgIT09IG5leHRQcm9wcy5jaGlsZHJlbi5wcm9wcy5jaGVja2VkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBzaG91bGRVcGRhdGVkID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgc2hvdWxkVXBkYXRlZCA9IHNob3VsZFVwZGF0ZWQgfHwgY2hpbGRyZW4gIT09IG5leHRQcm9wcy5jaGlsZHJlbjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHNob3VsZFVwZGF0ZWQpIHtcblx0ICAgICAgICByZXR1cm4gc2hvdWxkVXBkYXRlZDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEodGhpcy5wcm9wcy5jZWxsRWRpdCAmJiBuZXh0UHJvcHMuY2VsbEVkaXQpKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBzaG91bGRVcGRhdGVkIHx8IHRoaXMucHJvcHMuY2VsbEVkaXQubW9kZSAhPT0gbmV4dFByb3BzLmNlbGxFZGl0Lm1vZGU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVDZWxsRWRpdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2VsbEVkaXQoZSkge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5jZWxsRWRpdC5tb2RlID09IF9Db25zdDJbJ2RlZmF1bHQnXS5DRUxMX0VESVRfREJDTElDSykge1xuXHQgICAgICAgIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KSB7XG5cdCAgICAgICAgICBkb2N1bWVudC5zZWxlY3Rpb24uZW1wdHkoKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcblx0ICAgICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdCAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRoaXMucHJvcHMub25FZGl0KGUuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LnJvd0luZGV4LCBlLmN1cnJlbnRUYXJnZXQuY2VsbEluZGV4KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgdmFyIHdpZHRoID0gdGhpcy5wcm9wcy53aWR0aCA9PSBudWxsID8gdGhpcy5wcm9wcy53aWR0aCA6IHRoaXMucHJvcHMud2lkdGguaW5kZXhPZignJScpICE9PSAtMSA/IHRoaXMucHJvcHMud2lkdGggOiBwYXJzZUludCh0aGlzLnByb3BzLndpZHRoKTtcblx0ICAgICAgdmFyIHRkU3R5bGUgPSB7XG5cdCAgICAgICAgdGV4dEFsaWduOiB0aGlzLnByb3BzLmRhdGFBbGlnbixcblx0ICAgICAgICBkaXNwbGF5OiB0aGlzLnByb3BzLmhpZGRlbiA/IFwibm9uZVwiIDogbnVsbCxcblx0ICAgICAgICB3aWR0aDogd2lkdGgsXG5cdCAgICAgICAgbWF4V2lkdGg6IHdpZHRoXG5cdCAgICAgIH07XG5cdCAgICAgIHZhciBjbGFzc25hbWUgPSB0aGlzLnByb3BzLmNsYXNzTmFtZTtcblx0ICAgICAgaWYgKHRoaXMucHJvcHMud2lkdGgpIHtcblx0ICAgICAgICBjbGFzc25hbWUgKz0gXCIgY29sLW1kLVwiICsgd2lkdGg7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBvcHRzID0ge307XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLmNlbGxFZGl0KSB7XG5cdCAgICAgICAgaWYgKHRoaXMucHJvcHMuY2VsbEVkaXQubW9kZSA9PSBfQ29uc3QyWydkZWZhdWx0J10uQ0VMTF9FRElUX0NMSUNLKSB7XG5cdCAgICAgICAgICBvcHRzLm9uQ2xpY2sgPSB0aGlzLmhhbmRsZUNlbGxFZGl0LmJpbmQodGhpcyk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmNlbGxFZGl0Lm1vZGUgPT0gX0NvbnN0MlsnZGVmYXVsdCddLkNFTExfRURJVF9EQkNMSUNLKSB7XG5cdCAgICAgICAgICBvcHRzLm9uRG91YmxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNlbGxFZGl0LmJpbmQodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAndGQnLFxuXHQgICAgICAgIF9leHRlbmRzKHsgc3R5bGU6IHRkU3R5bGUsIGNsYXNzTmFtZTogY2xhc3NuYW1lIH0sIG9wdHMpLFxuXHQgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBUYWJsZUNvbHVtbjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRUYWJsZUNvbHVtbi5wcm9wVHlwZXMgPSB7XG5cdCAgZGF0YUFsaWduOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICBoaWRkZW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBjbGFzc05hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nXG5cdH07XG5cdFxuXHRUYWJsZUNvbHVtbi5kZWZhdWx0UHJvcHMgPSB7XG5cdCAgZGF0YUFsaWduOiBcImxlZnRcIixcblx0ICBoaWRkZW46IGZhbHNlLFxuXHQgIGNsYXNzTmFtZTogXCJcIlxuXHR9O1xuXHRleHBvcnRzWydkZWZhdWx0J10gPSBUYWJsZUNvbHVtbjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfQ29uc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9Db25zdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdCk7XG5cdFxuXHR2YXIgX0VkaXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHR2YXIgX0VkaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FZGl0b3IpO1xuXHRcblx0dmFyIF9Ob3RpZmljYXRpb25KcyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX05vdGlmaWNhdGlvbkpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX05vdGlmaWNhdGlvbkpzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHR2YXIgVGFibGVFZGl0Q29sdW1uID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoVGFibGVFZGl0Q29sdW1uLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBUYWJsZUVkaXRDb2x1bW4ocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVFZGl0Q29sdW1uKTtcblx0XG5cdCAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVFZGl0Q29sdW1uLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgcHJvcHMpO1xuXHQgICAgICAgIHRoaXMudGltZW91dGVDbGVhciA9IDA7XG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IHtcblx0ICAgICAgICAgICAgc2hha2VFZGl0b3I6IGZhbHNlXG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoVGFibGVFZGl0Q29sdW1uLCBbe1xuXHQgICAgICAgIGtleTogJ2hhbmRsZUtleVByZXNzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5UHJlc3MoZSkge1xuXHQgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDEzKSB7XG5cdCAgICAgICAgICAgICAgICAvL1ByZXNzZWQgRU5URVJcblx0ICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGUuY3VycmVudFRhcmdldC50eXBlID09ICdjaGVja2JveCcgPyB0aGlzLl9nZXRDaGVja0JveFZhbHVlKGUpIDogZS5jdXJyZW50VGFyZ2V0LnZhbHVlO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0b3IodmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZUVkaXQodmFsdWUsIHRoaXMucHJvcHMucm93SW5kZXgsIHRoaXMucHJvcHMuY29sSW5kZXgpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZUVkaXQobnVsbCwgdGhpcy5wcm9wcy5yb3dJbmRleCwgdGhpcy5wcm9wcy5jb2xJbmRleCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnaGFuZGxlQmx1cicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ibHVyVG9TYXZlKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBlLmN1cnJlbnRUYXJnZXQudHlwZSA9PSAnY2hlY2tib3gnID8gdGhpcy5fZ2V0Q2hlY2tCb3hWYWx1ZShlKSA6IGUuY3VycmVudFRhcmdldC52YWx1ZTtcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0b3IodmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZUVkaXQodmFsdWUsIHRoaXMucHJvcHMucm93SW5kZXgsIHRoaXMucHJvcHMuY29sSW5kZXgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3ZhbGlkYXRvcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuXHQgICAgICAgICAgICB2YXIgdHMgPSB0aGlzO1xuXHQgICAgICAgICAgICBpZiAodHMucHJvcHMuZWRpdGFibGUudmFsaWRhdG9yKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSB0cy5wcm9wcy5lZGl0YWJsZS52YWxpZGF0b3IodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHZhbGlkICE9PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHMucmVmcy5ub3RpZmllci5ub3RpY2UoJ2Vycm9yJywgdmFsaWQsIFwiUHJlc3NlZCBFU0MgY2FuIGNhbmNlbFwiKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0cy5yZWZzLmlucHV0UmVmO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vYW5pbWF0ZSBpbnB1dFxuXHQgICAgICAgICAgICAgICAgICAgIHRzLmNsZWFyVGltZW91dCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRzLnNldFN0YXRlKHsgc2hha2VFZGl0b3I6IHRydWUgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdHMudGltZW91dGVDbGVhciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cy5zZXRTdGF0ZSh7IHNoYWtlRWRpdG9yOiBmYWxzZSB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9LCAzMDApO1xuXHQgICAgICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjbGVhclRpbWVvdXQnLFxuXHQgICAgICAgIHZhbHVlOiAoZnVuY3Rpb24gKF9jbGVhclRpbWVvdXQpIHtcblx0ICAgICAgICAgICAgZnVuY3Rpb24gY2xlYXJUaW1lb3V0KCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF9jbGVhclRpbWVvdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF9jbGVhclRpbWVvdXQudG9TdHJpbmcoKTtcblx0ICAgICAgICAgICAgfTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQ7XG5cdCAgICAgICAgfSkoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy50aW1lb3V0ZUNsZWFyICE9IDApIHtcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRlQ2xlYXIpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aW1lb3V0ZUNsZWFyID0gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pXG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5yZWZzLmlucHV0UmVmO1xuXHQgICAgICAgICAgICAvLyBpbnB1dC52YWx1ZSA9IHRoaXMucHJvcHMuY2hpbGRyZW58fCcnO1xuXHQgICAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHQgICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciBlZGl0YWJsZSA9IHRoaXMucHJvcHMuZWRpdGFibGUsXG5cdCAgICAgICAgICAgICAgICBmb3JtYXQgPSB0aGlzLnByb3BzLmZvcm1hdCxcblx0ICAgICAgICAgICAgICAgIGF0dHIgPSB7XG5cdCAgICAgICAgICAgICAgICByZWY6IFwiaW5wdXRSZWZcIixcblx0ICAgICAgICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlQcmVzcy5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIuYmluZCh0aGlzKVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAvL3B1dCBwbGFjZWhvbGRlciBpZiBleGlzdFxuXHQgICAgICAgICAgICBlZGl0YWJsZS5wbGFjZWhvbGRlciAmJiAoYXR0ci5wbGFjZWhvbGRlciA9IGVkaXRhYmxlLnBsYWNlaG9sZGVyKTtcblx0XG5cdCAgICAgICAgICAgIHZhciBlZGl0b3JDbGFzcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoeyAnYW5pbWF0ZWQnOiB0aGlzLnN0YXRlLnNoYWtlRWRpdG9yLCAnc2hha2UnOiB0aGlzLnN0YXRlLnNoYWtlRWRpdG9yIH0pO1xuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAndGQnLFxuXHQgICAgICAgICAgICAgICAgeyByZWY6ICd0ZCcsIHN0eWxlOiB7IHBvc2l0aW9uOiAncmVsYXRpdmUnIH0gfSxcblx0ICAgICAgICAgICAgICAgICgwLCBfRWRpdG9yMlsnZGVmYXVsdCddKShlZGl0YWJsZSwgYXR0ciwgZm9ybWF0LCBlZGl0b3JDbGFzcywgdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCAnJyksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfTm90aWZpY2F0aW9uSnMyWydkZWZhdWx0J10sIHsgcmVmOiAnbm90aWZpZXInIH0pXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ19nZXRDaGVja0JveFZhbHVlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENoZWNrQm94VmFsdWUoZSkge1xuXHQgICAgICAgICAgICB2YXIgdmFsdWUgPSAnJztcblx0ICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGUuY3VycmVudFRhcmdldC52YWx1ZS5zcGxpdCgnOicpO1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGUuY3VycmVudFRhcmdldC5jaGVja2VkID8gdmFsdWVzWzBdIDogdmFsdWVzWzFdO1xuXHQgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBUYWJsZUVkaXRDb2x1bW47XG5cdH0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXHRcblx0VGFibGVFZGl0Q29sdW1uLnByb3BUeXBlcyA9IHtcblx0ICAgIGNvbXBsZXRlRWRpdDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgcm93SW5kZXg6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLFxuXHQgICAgY29sSW5kZXg6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLFxuXHQgICAgYmx1clRvU2F2ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sXG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBUYWJsZUVkaXRDb2x1bW47XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHR2YXIgVGFibGVGaWx0ZXIgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoVGFibGVGaWx0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICBmdW5jdGlvbiBUYWJsZUZpbHRlcihwcm9wcykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYmxlRmlsdGVyKTtcblx0XG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJsZUZpbHRlci5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcblx0ICAgIHRoaXMuZmlsdGVyT2JqID0ge307XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoVGFibGVGaWx0ZXIsIFt7XG5cdCAgICBrZXk6ICdoYW5kbGVLZXlVcCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5VXAoZSkge1xuXHQgICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LnZhbHVlLnRyaW0oKSA9PT0gXCJcIikgZGVsZXRlIHRoaXMuZmlsdGVyT2JqW2UuY3VycmVudFRhcmdldC5uYW1lXTtlbHNlIHRoaXMuZmlsdGVyT2JqW2UuY3VycmVudFRhcmdldC5uYW1lXSA9IGUuY3VycmVudFRhcmdldC52YWx1ZTtcblx0XG5cdCAgICAgIHRoaXMucHJvcHMub25GaWx0ZXIodGhpcy5maWx0ZXJPYmopO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgdGFibGVDbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKShcInRhYmxlXCIsIHtcblx0ICAgICAgICAndGFibGUtc3RyaXBlZCc6IHRoaXMucHJvcHMuc3RyaXBlZCxcblx0ICAgICAgICAndGFibGUtY29uZGVuc2VkJzogdGhpcy5wcm9wcy5jb25kZW5zZWRcblx0ICAgICAgfSk7XG5cdCAgICAgIHZhciBzZWxlY3RSb3dIZWFkZXIgPSBudWxsO1xuXHRcblx0ICAgICAgaWYgKHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBfQ29uc3QyWydkZWZhdWx0J10uUk9XX1NFTEVDVF9TSU5HTEUgfHwgdGhpcy5wcm9wcy5yb3dTZWxlY3RUeXBlID09IF9Db25zdDJbJ2RlZmF1bHQnXS5ST1dfU0VMRUNUX01VTFRJKSB7XG5cdCAgICAgICAgdmFyIHN0eWxlID0ge1xuXHQgICAgICAgICAgd2lkdGg6IDM1LFxuXHQgICAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG5cdCAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHNlbGVjdFJvd0hlYWRlciA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ3RoJyxcblx0ICAgICAgICAgIHsgc3R5bGU6IHN0eWxlLCBrZXk6IC0xIH0sXG5cdCAgICAgICAgICAnRmlsdGVyJ1xuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGZpbHRlckZpZWxkID0gdGhpcy5wcm9wcy5jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG5cdCAgICAgICAgdmFyIHRoU3R5bGUgPSB7XG5cdCAgICAgICAgICBkaXNwbGF5OiBjb2x1bW4uaGlkZGVuID8gXCJub25lXCIgOiBudWxsLFxuXHQgICAgICAgICAgd2lkdGg6IGNvbHVtbi53aWR0aFxuXHQgICAgICAgIH07XG5cdCAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ3RoJyxcblx0ICAgICAgICAgIHsga2V5OiBjb2x1bW4ubmFtZSwgc3R5bGU6IHRoU3R5bGUgfSxcblx0ICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd0aC1pbm5lciB0YWJsZS1oZWFkZXItY29sdW1uJyB9LFxuXHQgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHNpemU6ICcxMCcsIHR5cGU6ICd0ZXh0JywgcGxhY2Vob2xkZXI6IGNvbHVtbi5uYW1lLCBuYW1lOiBjb2x1bW4ubmFtZSwgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcC5iaW5kKHRoaXMpIH0pXG5cdCAgICAgICAgICApXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSwgdGhpcyk7XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAndGFibGUnLFxuXHQgICAgICAgIHsgY2xhc3NOYW1lOiB0YWJsZUNsYXNzZXMsIHN0eWxlOiB7IG1hcmdpblRvcDogNSB9IH0sXG5cdCAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAndGhlYWQnLFxuXHQgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAndHInLFxuXHQgICAgICAgICAgICB7IHN0eWxlOiB7IGJvcmRlckJvdHRvbVN0eWxlOiAnaGlkZGVuJyB9IH0sXG5cdCAgICAgICAgICAgIHNlbGVjdFJvd0hlYWRlcixcblx0ICAgICAgICAgICAgZmlsdGVyRmllbGRcblx0ICAgICAgICAgIClcblx0ICAgICAgICApXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gVGFibGVGaWx0ZXI7XG5cdH0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXHRcblx0VGFibGVGaWx0ZXIucHJvcFR5cGVzID0ge1xuXHQgIGNvbHVtbnM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYXJyYXksXG5cdCAgcm93U2VsZWN0VHlwZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgb25GaWx0ZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuY1xuXHR9O1xuXHRleHBvcnRzWydkZWZhdWx0J10gPSBUYWJsZUZpbHRlcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX3V0aWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXHRcblx0dmFyIF9TZWxlY3RSb3dIZWFkZXJDb2x1bW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0XG5cdHZhciBfU2VsZWN0Um93SGVhZGVyQ29sdW1uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdFJvd0hlYWRlckNvbHVtbik7XG5cdFxuXHR2YXIgQ2hlY2tib3ggPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoQ2hlY2tib3gsIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICBmdW5jdGlvbiBDaGVja2JveCgpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGVja2JveCk7XG5cdFxuXHQgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ2hlY2tib3gucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhDaGVja2JveCwgW3tcblx0ICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgdGhpcy51cGRhdGUodGhpcy5wcm9wcy5jaGVja2VkKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XG5cdCAgICAgIHRoaXMudXBkYXRlKHByb3BzLmNoZWNrZWQpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3VwZGF0ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGNoZWNrZWQpIHtcblx0ICAgICAgX3JlYWN0RG9tMlsnZGVmYXVsdCddLmZpbmRET01Ob2RlKHRoaXMpLmluZGV0ZXJtaW5hdGUgPSBjaGVja2VkID09PSAnaW5kZXRlcm1pbmF0ZSc7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVuZGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IGNsYXNzTmFtZTogJ3JlYWN0LWJzLXNlbGVjdC1hbGwnLCB0eXBlOiAnY2hlY2tib3gnLCBjaGVja2VkOiB0aGlzLnByb3BzLmNoZWNrZWQsIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlIH0pO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIENoZWNrYm94O1xuXHR9KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblx0XG5cdHZhciBUYWJsZUhlYWRlciA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDIpIHtcblx0ICBfaW5oZXJpdHMoVGFibGVIZWFkZXIsIF9SZWFjdCRDb21wb25lbnQyKTtcblx0XG5cdCAgZnVuY3Rpb24gVGFibGVIZWFkZXIocHJvcHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJsZUhlYWRlcik7XG5cdFxuXHQgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVIZWFkZXIucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdCAgICB0aGlzLnNlbGVjdFJvd0NvbHVtbldpZHRoID0gbnVsbDtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhUYWJsZUhlYWRlciwgW3tcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgY29udGFpbmVyQ2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoXCJ0YWJsZS1oZWFkZXJcIik7XG5cdCAgICAgIHZhciB0YWJsZUNsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKFwidGFibGVcIiwgXCJ0YWJsZS1ob3ZlclwiLCB7XG5cdCAgICAgICAgXCJ0YWJsZS1ib3JkZXJlZFwiOiB0aGlzLnByb3BzLmJvcmRlcmVkLFxuXHQgICAgICAgIFwidGFibGUtY29uZGVuc2VkXCI6IHRoaXMucHJvcHMuY29uZGVuc2VkXG5cdCAgICAgIH0pO1xuXHQgICAgICB2YXIgc2VsZWN0Um93SGVhZGVyQ29sID0gdGhpcy5wcm9wcy5oaWRlU2VsZWN0Q29sdW1uID8gbnVsbCA6IHRoaXMucmVuZGVyU2VsZWN0Um93SGVhZGVyKCk7XG5cdCAgICAgIHRoaXMuX2F0dGFjaENsZWFyU29ydENhcmV0RnVuYygpO1xuXHRcblx0ICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIHsgY2xhc3NOYW1lOiAndGFibGUtaGVhZGVyLXdyYXBwZXInIH0sXG5cdCAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgIHsgcmVmOiAnY29udGFpbmVyJywgY2xhc3NOYW1lOiBjb250YWluZXJDbGFzc2VzIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgJ3RhYmxlJyxcblx0ICAgICAgICAgICAgeyBjbGFzc05hbWU6IHRhYmxlQ2xhc3NlcywgaWQ6IHRoaXMucHJvcHMudGFibGVJRCB9LFxuXHQgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAndGhlYWQnLFxuXHQgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAndHInLFxuXHQgICAgICAgICAgICAgICAgeyByZWY6ICdoZWFkZXInIH0sXG5cdCAgICAgICAgICAgICAgICBzZWxlY3RSb3dIZWFkZXJDb2wsXG5cdCAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG5cdCAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApXG5cdCAgICAgICAgICApXG5cdCAgICAgICAgKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlclNlbGVjdFJvd0hlYWRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU2VsZWN0Um93SGVhZGVyKCkge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5yb3dTZWxlY3RUeXBlID09IF9Db25zdDJbJ2RlZmF1bHQnXS5ST1dfU0VMRUNUX1NJTkdMRSkge1xuXHQgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfU2VsZWN0Um93SGVhZGVyQ29sdW1uMlsnZGVmYXVsdCddLCB7IHdpZHRoOiB0aGlzLnNlbGVjdFJvd0NvbHVtbldpZHRoIH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBfQ29uc3QyWydkZWZhdWx0J10uUk9XX1NFTEVDVF9NVUxUSSkge1xuXHQgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgIF9TZWxlY3RSb3dIZWFkZXJDb2x1bW4yWydkZWZhdWx0J10sXG5cdCAgICAgICAgICB7IHdpZHRoOiB0aGlzLnNlbGVjdFJvd0NvbHVtbldpZHRoIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChDaGVja2JveCwgeyBvbkNoYW5nZTogdGhpcy5wcm9wcy5vblNlbGVjdEFsbFJvdywgY2hlY2tlZDogdGhpcy5wcm9wcy5pc1NlbGVjdEFsbCB9KVxuXHQgICAgICAgICk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfYXR0YWNoQ2xlYXJTb3J0Q2FyZXRGdW5jJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXR0YWNoQ2xlYXJTb3J0Q2FyZXRGdW5jKCkge1xuXHQgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKSkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wcm9wcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5wcm9wcy5jaGlsZHJlbltpXS5wcm9wcy5kYXRhRmllbGQ7XG5cdCAgICAgICAgICB2YXIgc29ydCA9IGZpZWxkID09PSB0aGlzLnByb3BzLnNvcnROYW1lID8gdGhpcy5wcm9wcy5zb3J0T3JkZXIgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuW2ldID0gX3JlYWN0MlsnZGVmYXVsdCddLmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuW2ldLCB7IGtleTogaSwgb25Tb3J0OiB0aGlzLnByb3BzLm9uU29ydCwgc29ydDogc29ydCB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcy5kYXRhRmllbGQ7XG5cdCAgICAgICAgdmFyIHNvcnQgPSBmaWVsZCA9PT0gdGhpcy5wcm9wcy5zb3J0TmFtZSA/IHRoaXMucHJvcHMuc29ydE9yZGVyIDogdW5kZWZpbmVkO1xuXHQgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4gPSBfcmVhY3QyWydkZWZhdWx0J10uY2xvbmVFbGVtZW50KHRoaXMucHJvcHMuY2hpbGRyZW4sIHsga2V5OiAwLCBvblNvcnQ6IHRoaXMucHJvcHMub25Tb3J0LCBzb3J0OiBzb3J0IH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZml0SGVhZGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmaXRIZWFkZXIoaGVhZGVyUHJvcHMsIGlzVmVydGljYWxTY3JvbGxCYXIpIHtcblx0ICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcblx0ICAgICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9ICh0aGlzLnByb3BzLnJvd1NlbGVjdFR5cGUgPT0gX0NvbnN0MlsnZGVmYXVsdCddLlJPV19TRUxFQ1RfU0lOR0xFIHx8IHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBfQ29uc3QyWydkZWZhdWx0J10uUk9XX1NFTEVDVF9NVUxUSSkgJiYgIXRoaXMucHJvcHMuaGlkZVNlbGVjdENvbHVtbiA/IDEgOiAwO1xuXHQgICAgICAgIGlmIChzdGFydFBvc2l0aW9uID09IDEpIHRoaXMuc2VsZWN0Um93Q29sdW1uV2lkdGggPSBoZWFkZXJQcm9wc1swXS53aWR0aDtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHJvcHMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5baV0gPSBfcmVhY3QyWydkZWZhdWx0J10uY2xvbmVFbGVtZW50KHRoaXMucHJvcHMuY2hpbGRyZW5baV0sIHsgd2lkdGg6IGhlYWRlclByb3BzW2kgKyBzdGFydFBvc2l0aW9uXS53aWR0aCArIFwicHhcIiB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbiwgeyB3aWR0aDogaGVhZGVyUHJvcHNbMF0ud2lkdGggKyBcInB4XCIgfSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMucHJvcHMuY29uZGVuc2VkICYmICF0aGlzLnByb3BzLmlzRmlsdGVyZWQpIHtcblx0ICAgICAgICB0aGlzLnJlZnMuY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiMzZweFwiO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcblx0ICAgICAgaWYgKGlzVmVydGljYWxTY3JvbGxCYXIpIHRoaXMucmVmcy5jb250YWluZXIuc3R5bGUubWFyZ2luUmlnaHQgPSBfdXRpbDJbJ2RlZmF1bHQnXS5nZXRTY3JvbGxCYXJXaWR0aCgpICsgXCJweFwiO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFRhYmxlSGVhZGVyO1xuXHR9KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblx0XG5cdFRhYmxlSGVhZGVyLnByb3BUeXBlcyA9IHtcblx0ICByb3dTZWxlY3RUeXBlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICBvblNvcnQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICBvblNlbGVjdEFsbFJvdzogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgIHNvcnROYW1lOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICBzb3J0T3JkZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgIGhpZGVTZWxlY3RDb2x1bW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBib3JkZXJlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgIGNvbmRlbnNlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgIGlzRmlsdGVyZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBpc1NlbGVjdEFsbDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vbmVPZihbdHJ1ZSwgJ2luZGV0ZXJtaW5hdGUnLCBmYWxzZV0pXG5cdH07XG5cdFxuXHRUYWJsZUhlYWRlci5kZWZhdWx0UHJvcHMgPSB7fTtcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gVGFibGVIZWFkZXI7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHR2YXIgX0NvbnN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQ29uc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uc3QpO1xuXHRcblx0dmFyIF91dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcblx0XG5cdHZhciBfZmlsdGVyc0RhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0XG5cdHZhciBfZmlsdGVyc0RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmlsdGVyc0RhdGUpO1xuXHRcblx0dmFyIF9maWx0ZXJzVGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xuXHRcblx0dmFyIF9maWx0ZXJzVGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWx0ZXJzVGV4dCk7XG5cdFxuXHR2YXIgX2ZpbHRlcnNTZWxlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblx0XG5cdHZhciBfZmlsdGVyc1NlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWx0ZXJzU2VsZWN0KTtcblx0XG5cdHZhciBfZmlsdGVyc051bWJlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHRcblx0dmFyIF9maWx0ZXJzTnVtYmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbHRlcnNOdW1iZXIpO1xuXHRcblx0dmFyIFRhYmxlSGVhZGVyQ29sdW1uID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgX2luaGVyaXRzKFRhYmxlSGVhZGVyQ29sdW1uLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gVGFibGVIZWFkZXJDb2x1bW4ocHJvcHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJsZUhlYWRlckNvbHVtbik7XG5cdFxuXHQgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVIZWFkZXJDb2x1bW4ucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdCAgICB0aGlzLmhhbmRsZUZpbHRlciA9IHRoaXMuaGFuZGxlRmlsdGVyLmJpbmQodGhpcyk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoVGFibGVIZWFkZXJDb2x1bW4sIFt7XG5cdCAgICBrZXk6ICdoYW5kbGVDb2x1bW5DbGljaycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ29sdW1uQ2xpY2soZSkge1xuXHQgICAgICBpZiAoIXRoaXMucHJvcHMuZGF0YVNvcnQpIHJldHVybjtcblx0ICAgICAgdmFyIG9yZGVyID0gdGhpcy5wcm9wcy5zb3J0ID09IF9Db25zdDJbJ2RlZmF1bHQnXS5TT1JUX0RFU0MgPyBfQ29uc3QyWydkZWZhdWx0J10uU09SVF9BU0MgOiBfQ29uc3QyWydkZWZhdWx0J10uU09SVF9ERVNDO1xuXHQgICAgICB0aGlzLnByb3BzLm9uU29ydChvcmRlciwgdGhpcy5wcm9wcy5kYXRhRmllbGQpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhbmRsZUZpbHRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRmlsdGVyKHZhbHVlLCB0eXBlKSB7XG5cdCAgICAgIHRoaXMucHJvcHMuZmlsdGVyLmVtaXR0ZXIuaGFuZGxlRmlsdGVyKHRoaXMucHJvcHMuZGF0YUZpZWxkLCB2YWx1ZSwgdHlwZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0RmlsdGVycycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVycygpIHtcblx0ICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmZpbHRlci50eXBlKSB7XG5cdCAgICAgICAgY2FzZSBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuVEVYVDpcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9maWx0ZXJzVGV4dDJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuZmlsdGVyLCB7IGNvbHVtbk5hbWU6IHRoaXMucHJvcHMuY2hpbGRyZW4sIGZpbHRlckhhbmRsZXI6IHRoaXMuaGFuZGxlRmlsdGVyIH0pKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICBjYXNlIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5TRUxFQ1Q6XG5cdCAgICAgICAgICB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfZmlsdGVyc1NlbGVjdDJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuZmlsdGVyLCB7IGNvbHVtbk5hbWU6IHRoaXMucHJvcHMuY2hpbGRyZW4sXG5cdCAgICAgICAgICAgICAgZmlsdGVySGFuZGxlcjogdGhpcy5oYW5kbGVGaWx0ZXIgfSkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIGNhc2UgX0NvbnN0MlsnZGVmYXVsdCddLkZJTFRFUl9UWVBFLk5VTUJFUjpcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9maWx0ZXJzTnVtYmVyMlsnZGVmYXVsdCddLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5maWx0ZXIsIHsgY29sdW1uTmFtZTogdGhpcy5wcm9wcy5jaGlsZHJlbixcblx0ICAgICAgICAgICAgICBmaWx0ZXJIYW5kbGVyOiB0aGlzLmhhbmRsZUZpbHRlciB9KSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgY2FzZSBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuREFURTpcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9maWx0ZXJzRGF0ZTJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuZmlsdGVyLCB7IGNvbHVtbk5hbWU6IHRoaXMucHJvcHMuY2hpbGRyZW4sIGZpbHRlckhhbmRsZXI6IHRoaXMuaGFuZGxlRmlsdGVyIH0pKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICBjYXNlIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5DVVNUT006XG5cdCAgICAgICAgICB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmZpbHRlci5nZXRFbGVtZW50KHRoaXMuaGFuZGxlRmlsdGVyLCB0aGlzLnByb3BzLmZpbHRlci5jdXN0b21GaWx0ZXJQYXJhbWV0ZXJzKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgdGhpcy5yZWZzLmlubmVyRGl2LnNldEF0dHJpYnV0ZShcImRhdGEtZmllbGRcIiwgdGhpcy5wcm9wcy5kYXRhRmllbGQpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgd2lkdGggPSB0aGlzLnByb3BzLndpZHRoICE9PSBudWxsID8gcGFyc2VJbnQodGhpcy5wcm9wcy53aWR0aCkgOiBudWxsO1xuXHQgICAgICB2YXIgdGhTdHlsZSA9IHtcblx0ICAgICAgICB0ZXh0QWxpZ246IHRoaXMucHJvcHMuZGF0YUFsaWduLFxuXHQgICAgICAgIGRpc3BsYXk6IHRoaXMucHJvcHMuaGlkZGVuID8gXCJub25lXCIgOiBudWxsLFxuXHQgICAgICAgIHdpZHRoOiB3aWR0aCxcblx0ICAgICAgICBtYXhXaWR0aDogd2lkdGhcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciBkZWZhdWx0Q2FyZXQgPSAhdGhpcy5wcm9wcy5kYXRhU29ydCA/IG51bGwgOiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAnc3BhbicsXG5cdCAgICAgICAgeyBjbGFzc05hbWU6ICdvcmRlcicgfSxcblx0ICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICdzcGFuJyxcblx0ICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZHJvcGRvd24nIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnY2FyZXQnLCBzdHlsZTogeyBtYXJnaW46ICcxMHB4IDAgMTBweCA1cHgnLCBjb2xvcjogJyNjY2MnIH0gfSlcblx0ICAgICAgICApLFxuXHQgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ3NwYW4nLFxuXHQgICAgICAgICAgeyBjbGFzc05hbWU6ICdkcm9wdXAnIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnY2FyZXQnLCBzdHlsZTogeyBtYXJnaW46ICcxMHB4IDAnLCBjb2xvcjogJyNjY2MnIH0gfSlcblx0ICAgICAgICApXG5cdCAgICAgICk7XG5cdCAgICAgIHZhciBzb3J0Q2FyZXQgPSB0aGlzLnByb3BzLnNvcnQgPyBfdXRpbDJbJ2RlZmF1bHQnXS5yZW5kZXJSZWFjdFNvcnRDYXJldCh0aGlzLnByb3BzLnNvcnQpIDogZGVmYXVsdENhcmV0O1xuXHRcblx0ICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLnByb3BzLmNsYXNzTmFtZSArIFwiIFwiICsgKHRoaXMucHJvcHMuZGF0YVNvcnQgPyBcInNvcnQtY29sdW1uXCIgOiBcIlwiKTtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICd0aCcsXG5cdCAgICAgICAgeyByZWY6ICdoZWFkZXItY29sJywgY2xhc3NOYW1lOiBjbGFzc2VzLCBzdHlsZTogdGhTdHlsZSB9LFxuXHQgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICB7IHJlZjogJ2lubmVyRGl2JywgY2xhc3NOYW1lOiAndGgtaW5uZXIgdGFibGUtaGVhZGVyLWNvbHVtbicsXG5cdCAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ29sdW1uQ2xpY2suYmluZCh0aGlzKSB9LFxuXHQgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbixcblx0ICAgICAgICAgIHNvcnRDYXJldFxuXHQgICAgICAgICksXG5cdCAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXIgPyB0aGlzLmdldEZpbHRlcnMoKSA6IG51bGxcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBUYWJsZUhlYWRlckNvbHVtbjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHR2YXIgZmlsdGVyVHlwZUFycmF5ID0gW107XG5cdGZvciAodmFyIGtleSBpbiBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUpIHtcblx0ICBmaWx0ZXJUeXBlQXJyYXkucHVzaChfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEVba2V5XSk7XG5cdH1cblx0XG5cdFRhYmxlSGVhZGVyQ29sdW1uLnByb3BUeXBlcyA9IHtcblx0ICBkYXRhRmllbGQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgIGRhdGFBbGlnbjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgZGF0YVNvcnQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBvblNvcnQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICBkYXRhRm9ybWF0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgaXNLZXk6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBlZGl0YWJsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hbnksXG5cdCAgaGlkZGVuOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgaGlkZGVuSW5Qb3B1cDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgIHNlYXJjaGFibGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBjbGFzc05hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgIHdpZHRoOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICBzb3J0RnVuYzogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgIGNvbHVtbkNsYXNzTmFtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hbnksXG5cdCAgZmlsdGVyRm9ybWF0dGVkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgc29ydDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgZm9ybWF0RXh0cmFEYXRhOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmFueSxcblx0ICBmaWx0ZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc2hhcGUoe1xuXHQgICAgdHlwZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vbmVPZihmaWx0ZXJUeXBlQXJyYXkpLFxuXHQgICAgZGVsYXk6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLFxuXHQgICAgb3B0aW9uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vbmVPZlR5cGUoW19yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub2JqZWN0LCAvLyBmb3IgU2VsZWN0RmlsdGVyXG5cdCAgICBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmFycmF5T2YoX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIpIC8vZm9yIE51bWJlckZpbHRlclxuXHQgICAgXSksXG5cdCAgICBudW1iZXJDb21wYXJhdG9yczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheU9mKF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nKSxcblx0ICAgIGVtaXR0ZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub2JqZWN0LFxuXHQgICAgcGxhY2Vob2xkZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgZ2V0RWxlbWVudDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgY3VzdG9tRmlsdGVyUGFyYW1ldGVyczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3Rcblx0ICB9KVxuXHR9O1xuXHRcblx0VGFibGVIZWFkZXJDb2x1bW4uZGVmYXVsdFByb3BzID0ge1xuXHQgIGRhdGFBbGlnbjogXCJsZWZ0XCIsXG5cdCAgZGF0YVNvcnQ6IGZhbHNlLFxuXHQgIGRhdGFGb3JtYXQ6IHVuZGVmaW5lZCxcblx0ICBpc0tleTogZmFsc2UsXG5cdCAgZWRpdGFibGU6IHRydWUsXG5cdCAgb25Tb3J0OiB1bmRlZmluZWQsXG5cdCAgaGlkZGVuOiBmYWxzZSxcblx0ICBoaWRkZW5JblBvcHVwOiBmYWxzZSxcblx0ICBzZWFyY2hhYmxlOiB0cnVlLFxuXHQgIGNsYXNzTmFtZTogXCJcIixcblx0ICB3aWR0aDogbnVsbCxcblx0ICBzb3J0RnVuYzogdW5kZWZpbmVkLFxuXHQgIGNvbHVtbkNsYXNzTmFtZTogJycsXG5cdCAgZmlsdGVyRm9ybWF0dGVkOiBmYWxzZSxcblx0ICBzb3J0OiB1bmRlZmluZWQsXG5cdCAgZm9ybWF0RXh0cmFEYXRhOiB1bmRlZmluZWQsXG5cdCAgZmlsdGVyOiB1bmRlZmluZWRcblx0fTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFRhYmxlSGVhZGVyQ29sdW1uO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDI1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX0NvbnN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQ29uc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uc3QpO1xuXHRcblx0dmFyIFRhYmxlUm93ID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgX2luaGVyaXRzKFRhYmxlUm93LCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJsZVJvdyk7XG5cdFxuXHQgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVSb3cucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdCAgICB0aGlzLmNsaWNrTnVtID0gMDtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhUYWJsZVJvdywgW3tcblx0ICAgIGtleTogJ3Jvd0NsaWNrJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByb3dDbGljayhlKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSAhPT0gXCJJTlBVVFwiICYmIGUudGFyZ2V0LnRhZ05hbWUgIT09IFwiU0VMRUNUXCIgJiYgZS50YXJnZXQudGFnTmFtZSAhPT0gXCJURVhUQVJFQVwiKSB7XG5cdCAgICAgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciByb3dJbmRleCA9IGUuY3VycmVudFRhcmdldC5yb3dJbmRleDtcblx0ICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5zZWxlY3RSb3cpIHtcblx0ICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0KSB7XG5cdCAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25TZWxlY3RSb3cocm93SW5kZXgsICFfdGhpcy5wcm9wcy5pc1NlbGVjdGVkKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy5zZWxlY3RSb3cuY2xpY2tUb1NlbGVjdEFuZEVkaXRDZWxsKSB7XG5cdCAgICAgICAgICAgICAgX3RoaXMuY2xpY2tOdW0rKztcblx0ICAgICAgICAgICAgICAvKiogaWYgY2xpY2tUb1NlbGVjdEFuZEVkaXRDZWxsIGlzIGVuYWJsZWQsXHJcblx0ICAgICAgICAgICAgICAgKiAgdGhlcmUgc2hvdWxkIGJlIGEgZGVsYXkgdG8gcHJldmVudCBhIHNlbGVjdGlvbiBjaGFuZ2VkIHdoZW5cclxuXHQgICAgICAgICAgICAgICAqICB1c2VyIGRibGljayB0byBlZGl0IGNlbGwgb24gc2FtZSByb3cgYnV0IGRpZmZlcmVudCBjZWxsXHJcblx0ICAgICAgICAgICAgICAqKi9cblx0ICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jbGlja051bSA9PT0gMSkge1xuXHQgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vblNlbGVjdFJvdyhyb3dJbmRleCwgIV90aGlzLnByb3BzLmlzU2VsZWN0ZWQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgX3RoaXMuY2xpY2tOdW0gPSAwO1xuXHQgICAgICAgICAgICAgIH0sIDIwMCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vblJvd0NsaWNrKSBfdGhpcy5wcm9wcy5vblJvd0NsaWNrKHJvd0luZGV4KTtcblx0ICAgICAgICB9KSgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncm93TW91c2VPdXQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJvd01vdXNlT3V0KGUpIHtcblx0ICAgICAgaWYgKHRoaXMucHJvcHMub25Sb3dNb3VzZU91dCkge1xuXHQgICAgICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU91dChlLmN1cnJlbnRUYXJnZXQucm93SW5kZXgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncm93TW91c2VPdmVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByb3dNb3VzZU92ZXIoZSkge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5vblJvd01vdXNlT3Zlcikge1xuXHQgICAgICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU92ZXIoZS5jdXJyZW50VGFyZ2V0LnJvd0luZGV4KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB0aGlzLmNsaWNrTnVtID0gMDtcblx0ICAgICAgdmFyIHRyQ3NzID0ge1xuXHQgICAgICAgIHN0eWxlOiB7XG5cdCAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMuaXNTZWxlY3RlZCA/IHRoaXMucHJvcHMuc2VsZWN0Um93LmJnQ29sb3IgOiBudWxsXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjbGFzc05hbWU6ICh0aGlzLnByb3BzLmlzU2VsZWN0ZWQgJiYgdGhpcy5wcm9wcy5zZWxlY3RSb3cuY2xhc3NOYW1lID8gdGhpcy5wcm9wcy5zZWxlY3RSb3cuY2xhc3NOYW1lIDogJycpICsgKHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8ICcnKVxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0Um93ICYmICh0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0IHx8IHRoaXMucHJvcHMuc2VsZWN0Um93LmNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbCkgfHwgdGhpcy5wcm9wcy5vblJvd0NsaWNrKSB7XG5cdCAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ3RyJyxcblx0ICAgICAgICAgIF9leHRlbmRzKHt9LCB0ckNzcywge1xuXHQgICAgICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5yb3dNb3VzZU92ZXIuYmluZCh0aGlzKSxcblx0ICAgICAgICAgICAgb25Nb3VzZU91dDogdGhpcy5yb3dNb3VzZU91dC5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLnJvd0NsaWNrLmJpbmQodGhpcykgfSksXG5cdCAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAndHInLFxuXHQgICAgICAgICAgdHJDc3MsXG5cdCAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFRhYmxlUm93O1xuXHR9KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblx0XG5cdFRhYmxlUm93LnByb3BUeXBlcyA9IHtcblx0ICBpc1NlbGVjdGVkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgZW5hYmxlQ2VsbEVkaXQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICBvblJvd0NsaWNrOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgb25TZWxlY3RSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICBvblJvd01vdXNlT3V0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgb25Sb3dNb3VzZU92ZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuY1xuXHR9O1xuXHRUYWJsZVJvdy5kZWZhdWx0UHJvcHMgPSB7XG5cdCAgb25Sb3dDbGljazogdW5kZWZpbmVkXG5cdH07XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFRhYmxlUm93O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHQgIHZhciBmaWxlc2F2ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0ICB2YXIgc2F2ZUFzID0gZmlsZXNhdmVyLnNhdmVBcztcblx0fVxuXHRcblx0ZnVuY3Rpb24gdG9TdHJpbmcoZGF0YSwga2V5cykge1xuXHQgIHZhciBkYXRhU3RyaW5nID0gXCJcIjtcblx0ICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHJldHVybiBkYXRhU3RyaW5nO1xuXHRcblx0ICBkYXRhU3RyaW5nICs9IGtleXMuam9pbignLCcpICsgJ1xcbic7XG5cdFxuXHQgIGRhdGEubWFwKGZ1bmN0aW9uIChyb3cpIHtcblx0ICAgIGtleXMubWFwKGZ1bmN0aW9uIChjb2wsIGkpIHtcblx0ICAgICAgdmFyIGNlbGwgPSB0eXBlb2Ygcm93W2NvbF0gIT09ICd1bmRlZmluZWQnID8gJ1wiJyArIHJvd1tjb2xdICsgJ1wiJyA6IFwiXCI7XG5cdCAgICAgIGRhdGFTdHJpbmcgKz0gY2VsbDtcblx0ICAgICAgaWYgKGkgKyAxIDwga2V5cy5sZW5ndGgpIGRhdGFTdHJpbmcgKz0gJywnO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgZGF0YVN0cmluZyArPSAnXFxuJztcblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIGRhdGFTdHJpbmc7XG5cdH07XG5cdFxuXHR2YXIgZXhwb3J0Q1NWID0gZnVuY3Rpb24gZXhwb3J0Q1NWKGRhdGEsIGtleXMsIGZpbGVuYW1lKSB7XG5cdCAgdmFyIGRhdGFTdHJpbmcgPSB0b1N0cmluZyhkYXRhLCBrZXlzKTtcblx0ICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHNhdmVBcyhuZXcgQmxvYihbZGF0YVN0cmluZ10sIHsgdHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIiB9KSwgZmlsZW5hbWUgfHwgJ3NwcmVhZHNoZWV0LmNzdicpO1xuXHQgIH1cblx0fTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGV4cG9ydENTVjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qIEZpbGVTYXZlci5qc1xyXG5cdCAqIEEgc2F2ZUFzKCkgRmlsZVNhdmVyIGltcGxlbWVudGF0aW9uLlxyXG5cdCAqIDEuMS4yMDE1MTAwM1xyXG5cdCAqXHJcblx0ICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxyXG5cdCAqIExpY2Vuc2U6IE1JVFxyXG5cdCAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L0ZpbGVTYXZlci5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXHJcblx0ICovXG5cdFxuXHQvKmdsb2JhbCBzZWxmICovXG5cdC8qanNsaW50IGJpdHdpc2U6IHRydWUsIGluZGVudDogNCwgbGF4YnJlYWs6IHRydWUsIGxheGNvbW1hOiB0cnVlLCBzbWFydHRhYnM6IHRydWUsIHBsdXNwbHVzOiB0cnVlICovXG5cdFxuXHQvKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvRmlsZVNhdmVyLmpzL2Jsb2IvbWFzdGVyL0ZpbGVTYXZlci5qcyAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgc2F2ZUFzID0gc2F2ZUFzIHx8IChmdW5jdGlvbiAodmlldykge1xuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdC8vIElFIDwxMCBpcyBleHBsaWNpdGx5IHVuc3VwcG9ydGVkXG5cdFx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgL01TSUUgWzEtOV1cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGRvYyA9IHZpZXcuZG9jdW1lbnQsXG5cdFx0ICAgXG5cdFx0Ly8gb25seSBnZXQgVVJMIHdoZW4gbmVjZXNzYXJ5IGluIGNhc2UgQmxvYi5qcyBoYXNuJ3Qgb3ZlcnJpZGRlbiBpdCB5ZXRcblx0XHRnZXRfVVJMID0gZnVuY3Rpb24gZ2V0X1VSTCgpIHtcblx0XHRcdHJldHVybiB2aWV3LlVSTCB8fCB2aWV3LndlYmtpdFVSTCB8fCB2aWV3O1xuXHRcdH0sXG5cdFx0ICAgIHNhdmVfbGluayA9IGRvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsIFwiYVwiKSxcblx0XHQgICAgY2FuX3VzZV9zYXZlX2xpbmsgPSAoXCJkb3dubG9hZFwiIGluIHNhdmVfbGluayksXG5cdFx0ICAgIGNsaWNrID0gZnVuY3Rpb24gY2xpY2sobm9kZSkge1xuXHRcdFx0dmFyIGV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKTtcblx0XHRcdG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0fSxcblx0XHQgICAgaXNfc2FmYXJpID0gL1ZlcnNpb25cXC9bXFxkXFwuXSsuKlNhZmFyaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcblx0XHQgICAgd2Via2l0X3JlcV9mcyA9IHZpZXcud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW0sXG5cdFx0ICAgIHJlcV9mcyA9IHZpZXcucmVxdWVzdEZpbGVTeXN0ZW0gfHwgd2Via2l0X3JlcV9mcyB8fCB2aWV3Lm1velJlcXVlc3RGaWxlU3lzdGVtLFxuXHRcdCAgICB0aHJvd19vdXRzaWRlID0gZnVuY3Rpb24gdGhyb3dfb3V0c2lkZShleCkge1xuXHRcdFx0KHZpZXcuc2V0SW1tZWRpYXRlIHx8IHZpZXcuc2V0VGltZW91dCkoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBleDtcblx0XHRcdH0sIDApO1xuXHRcdH0sXG5cdFx0ICAgIGZvcmNlX3NhdmVhYmxlX3R5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLFxuXHRcdCAgICBmc19taW5fc2l6ZSA9IDAsXG5cdFx0ICAgXG5cdFx0Ly8gU2VlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzUyOTcjYzcgYW5kXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvRmlsZVNhdmVyLmpzL2NvbW1pdC80ODU5MzBhI2NvbW1pdGNvbW1lbnQtODc2ODA0N1xuXHRcdC8vIGZvciB0aGUgcmVhc29uaW5nIGJlaGluZCB0aGUgdGltZW91dCBhbmQgcmV2b2NhdGlvbiBmbG93XG5cdFx0YXJiaXRyYXJ5X3Jldm9rZV90aW1lb3V0ID0gNTAwLFxuXHRcdCAgICAvLyBpbiBtc1xuXHRcdHJldm9rZSA9IGZ1bmN0aW9uIHJldm9rZShmaWxlKSB7XG5cdFx0XHR2YXIgcmV2b2tlciA9IGZ1bmN0aW9uIHJldm9rZXIoKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgZmlsZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdC8vIGZpbGUgaXMgYW4gb2JqZWN0IFVSTFxuXHRcdFx0XHRcdGdldF9VUkwoKS5yZXZva2VPYmplY3RVUkwoZmlsZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gZmlsZSBpcyBhIEZpbGVcblx0XHRcdFx0XHRmaWxlLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0aWYgKHZpZXcuY2hyb21lKSB7XG5cdFx0XHRcdHJldm9rZXIoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldFRpbWVvdXQocmV2b2tlciwgYXJiaXRyYXJ5X3Jldm9rZV90aW1lb3V0KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdCAgICBkaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKGZpbGVzYXZlciwgZXZlbnRfdHlwZXMsIGV2ZW50KSB7XG5cdFx0XHRldmVudF90eXBlcyA9IFtdLmNvbmNhdChldmVudF90eXBlcyk7XG5cdFx0XHR2YXIgaSA9IGV2ZW50X3R5cGVzLmxlbmd0aDtcblx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0dmFyIGxpc3RlbmVyID0gZmlsZXNhdmVyW1wib25cIiArIGV2ZW50X3R5cGVzW2ldXTtcblx0XHRcdFx0aWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGxpc3RlbmVyLmNhbGwoZmlsZXNhdmVyLCBldmVudCB8fCBmaWxlc2F2ZXIpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XG5cdFx0XHRcdFx0XHR0aHJvd19vdXRzaWRlKGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdCAgICBhdXRvX2JvbSA9IGZ1bmN0aW9uIGF1dG9fYm9tKGJsb2IpIHtcblx0XHRcdC8vIHByZXBlbmQgQk9NIGZvciBVVEYtOCBYTUwgYW5kIHRleHQvKiB0eXBlcyAoaW5jbHVkaW5nIEhUTUwpXG5cdFx0XHRpZiAoL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYmxvYi50eXBlKSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IEJsb2IoW1wi77u/XCIsIGJsb2JdLCB7IHR5cGU6IGJsb2IudHlwZSB9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBibG9iO1xuXHRcdH0sXG5cdFx0ICAgIEZpbGVTYXZlciA9IGZ1bmN0aW9uIEZpbGVTYXZlcihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuXHRcdFx0aWYgKCFub19hdXRvX2JvbSkge1xuXHRcdFx0XHRibG9iID0gYXV0b19ib20oYmxvYik7XG5cdFx0XHR9XG5cdFx0XHQvLyBGaXJzdCB0cnkgYS5kb3dubG9hZCwgdGhlbiB3ZWIgZmlsZXN5c3RlbSwgdGhlbiBvYmplY3QgVVJMc1xuXHRcdFx0dmFyIGZpbGVzYXZlciA9IHRoaXMsXG5cdFx0XHQgICAgdHlwZSA9IGJsb2IudHlwZSxcblx0XHRcdCAgICBibG9iX2NoYW5nZWQgPSBmYWxzZSxcblx0XHRcdCAgICBvYmplY3RfdXJsLFxuXHRcdFx0ICAgIHRhcmdldF92aWV3LFxuXHRcdFx0ICAgIGRpc3BhdGNoX2FsbCA9IGZ1bmN0aW9uIGRpc3BhdGNoX2FsbCgpIHtcblx0XHRcdFx0ZGlzcGF0Y2goZmlsZXNhdmVyLCBcIndyaXRlc3RhcnQgcHJvZ3Jlc3Mgd3JpdGUgd3JpdGVlbmRcIi5zcGxpdChcIiBcIikpO1xuXHRcdFx0fSxcblx0XHRcdCAgIFxuXHRcdFx0Ly8gb24gYW55IGZpbGVzeXMgZXJyb3JzIHJldmVydCB0byBzYXZpbmcgd2l0aCBvYmplY3QgVVJMc1xuXHRcdFx0ZnNfZXJyb3IgPSBmdW5jdGlvbiBmc19lcnJvcigpIHtcblx0XHRcdFx0aWYgKHRhcmdldF92aWV3ICYmIGlzX3NhZmFyaSAmJiB0eXBlb2YgRmlsZVJlYWRlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdC8vIFNhZmFyaSBkb2Vzbid0IGFsbG93IGRvd25sb2FkaW5nIG9mIGJsb2IgdXJsc1xuXHRcdFx0XHRcdHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXHRcdFx0XHRcdHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHR2YXIgYmFzZTY0RGF0YSA9IHJlYWRlci5yZXN1bHQ7XG5cdFx0XHRcdFx0XHR0YXJnZXRfdmlldy5sb2NhdGlvbi5ocmVmID0gXCJkYXRhOmF0dGFjaG1lbnQvZmlsZVwiICsgYmFzZTY0RGF0YS5zbGljZShiYXNlNjREYXRhLnNlYXJjaCgvWyw7XS8pKTtcblx0XHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xuXHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLklOSVQ7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGRvbid0IGNyZWF0ZSBtb3JlIG9iamVjdCBVUkxzIHRoYW4gbmVlZGVkXG5cdFx0XHRcdGlmIChibG9iX2NoYW5nZWQgfHwgIW9iamVjdF91cmwpIHtcblx0XHRcdFx0XHRvYmplY3RfdXJsID0gZ2V0X1VSTCgpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGFyZ2V0X3ZpZXcpIHtcblx0XHRcdFx0XHR0YXJnZXRfdmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgbmV3X3RhYiA9IHZpZXcub3BlbihvYmplY3RfdXJsLCBcIl9ibGFua1wiKTtcblx0XHRcdFx0XHRpZiAobmV3X3RhYiA9PSB1bmRlZmluZWQgJiYgaXNfc2FmYXJpKSB7XG5cdFx0XHRcdFx0XHQvL0FwcGxlIGRvIG5vdCBhbGxvdyB3aW5kb3cub3Blbiwgc2VlIGh0dHA6Ly9iaXQubHkvMWtaZmZSSVxuXHRcdFx0XHRcdFx0dmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuRE9ORTtcblx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XG5cdFx0XHRcdHJldm9rZShvYmplY3RfdXJsKTtcblx0XHRcdH0sXG5cdFx0XHQgICAgYWJvcnRhYmxlID0gZnVuY3Rpb24gYWJvcnRhYmxlKGZ1bmMpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRpZiAoZmlsZXNhdmVyLnJlYWR5U3RhdGUgIT09IGZpbGVzYXZlci5ET05FKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHQgICAgY3JlYXRlX2lmX25vdF9mb3VuZCA9IHsgY3JlYXRlOiB0cnVlLCBleGNsdXNpdmU6IGZhbHNlIH0sXG5cdFx0XHQgICAgc2xpY2U7XG5cdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5JTklUO1xuXHRcdFx0aWYgKCFuYW1lKSB7XG5cdFx0XHRcdG5hbWUgPSBcImRvd25sb2FkXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2FuX3VzZV9zYXZlX2xpbmspIHtcblx0XHRcdFx0b2JqZWN0X3VybCA9IGdldF9VUkwoKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0XHRcdHNhdmVfbGluay5ocmVmID0gb2JqZWN0X3VybDtcblx0XHRcdFx0c2F2ZV9saW5rLmRvd25sb2FkID0gbmFtZTtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0Y2xpY2soc2F2ZV9saW5rKTtcblx0XHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcblx0XHRcdFx0XHRyZXZva2Uob2JqZWN0X3VybCk7XG5cdFx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuRE9ORTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdC8vIE9iamVjdCBhbmQgd2ViIGZpbGVzeXN0ZW0gVVJMcyBoYXZlIGEgcHJvYmxlbSBzYXZpbmcgaW4gR29vZ2xlIENocm9tZSB3aGVuXG5cdFx0XHQvLyB2aWV3ZWQgaW4gYSB0YWIsIHNvIEkgZm9yY2Ugc2F2ZSB3aXRoIGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVxuXHRcdFx0Ly8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTExNThcblx0XHRcdC8vIFVwZGF0ZTogR29vZ2xlIGVycmFudGx5IGNsb3NlZCA5MTE1OCwgSSBzdWJtaXR0ZWQgaXQgYWdhaW46XG5cdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzg5NjQyXG5cdFx0XHRpZiAodmlldy5jaHJvbWUgJiYgdHlwZSAmJiB0eXBlICE9PSBmb3JjZV9zYXZlYWJsZV90eXBlKSB7XG5cdFx0XHRcdHNsaWNlID0gYmxvYi5zbGljZSB8fCBibG9iLndlYmtpdFNsaWNlO1xuXHRcdFx0XHRibG9iID0gc2xpY2UuY2FsbChibG9iLCAwLCBibG9iLnNpemUsIGZvcmNlX3NhdmVhYmxlX3R5cGUpO1xuXHRcdFx0XHRibG9iX2NoYW5nZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0Ly8gU2luY2UgSSBjYW4ndCBiZSBzdXJlIHRoYXQgdGhlIGd1ZXNzZWQgbWVkaWEgdHlwZSB3aWxsIHRyaWdnZXIgYSBkb3dubG9hZFxuXHRcdFx0Ly8gaW4gV2ViS2l0LCBJIGFwcGVuZCAuZG93bmxvYWQgdG8gdGhlIGZpbGVuYW1lLlxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTY1NDQwXG5cdFx0XHRpZiAod2Via2l0X3JlcV9mcyAmJiBuYW1lICE9PSBcImRvd25sb2FkXCIpIHtcblx0XHRcdFx0bmFtZSArPSBcIi5kb3dubG9hZFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGUgPT09IGZvcmNlX3NhdmVhYmxlX3R5cGUgfHwgd2Via2l0X3JlcV9mcykge1xuXHRcdFx0XHR0YXJnZXRfdmlldyA9IHZpZXc7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXJlcV9mcykge1xuXHRcdFx0XHRmc19lcnJvcigpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRmc19taW5fc2l6ZSArPSBibG9iLnNpemU7XG5cdFx0XHRyZXFfZnModmlldy5URU1QT1JBUlksIGZzX21pbl9zaXplLCBhYm9ydGFibGUoZnVuY3Rpb24gKGZzKSB7XG5cdFx0XHRcdGZzLnJvb3QuZ2V0RGlyZWN0b3J5KFwic2F2ZWRcIiwgY3JlYXRlX2lmX25vdF9mb3VuZCwgYWJvcnRhYmxlKGZ1bmN0aW9uIChkaXIpIHtcblx0XHRcdFx0XHR2YXIgc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG5cdFx0XHRcdFx0XHRkaXIuZ2V0RmlsZShuYW1lLCBjcmVhdGVfaWZfbm90X2ZvdW5kLCBhYm9ydGFibGUoZnVuY3Rpb24gKGZpbGUpIHtcblx0XHRcdFx0XHRcdFx0ZmlsZS5jcmVhdGVXcml0ZXIoYWJvcnRhYmxlKGZ1bmN0aW9uICh3cml0ZXIpIHtcblx0XHRcdFx0XHRcdFx0XHR3cml0ZXIub253cml0ZWVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0X3ZpZXcubG9jYXRpb24uaHJlZiA9IGZpbGUudG9VUkwoKTtcblx0XHRcdFx0XHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRcdFx0XHRcdFx0XHRkaXNwYXRjaChmaWxlc2F2ZXIsIFwid3JpdGVlbmRcIiwgZXZlbnQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV2b2tlKGZpbGUpO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0d3JpdGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSB3cml0ZXIuZXJyb3I7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZXJyb3IuY29kZSAhPT0gZXJyb3IuQUJPUlRfRVJSKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZzX2Vycm9yKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHRcIndyaXRlc3RhcnQgcHJvZ3Jlc3Mgd3JpdGUgYWJvcnRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHdyaXRlcltcIm9uXCIgKyBldmVudF0gPSBmaWxlc2F2ZXJbXCJvblwiICsgZXZlbnRdO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdHdyaXRlci53cml0ZShibG9iKTtcblx0XHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR3cml0ZXIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5XUklUSU5HO1xuXHRcdFx0XHRcdFx0XHR9KSwgZnNfZXJyb3IpO1xuXHRcdFx0XHRcdFx0fSksIGZzX2Vycm9yKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGRpci5nZXRGaWxlKG5hbWUsIHsgY3JlYXRlOiBmYWxzZSB9LCBhYm9ydGFibGUoZnVuY3Rpb24gKGZpbGUpIHtcblx0XHRcdFx0XHRcdC8vIGRlbGV0ZSBmaWxlIGlmIGl0IGFscmVhZHkgZXhpc3RzXG5cdFx0XHRcdFx0XHRmaWxlLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0c2F2ZSgpO1xuXHRcdFx0XHRcdH0pLCBhYm9ydGFibGUoZnVuY3Rpb24gKGV4KSB7XG5cdFx0XHRcdFx0XHRpZiAoZXguY29kZSA9PT0gZXguTk9UX0ZPVU5EX0VSUikge1xuXHRcdFx0XHRcdFx0XHRzYXZlKCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRmc19lcnJvcigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0fSksIGZzX2Vycm9yKTtcblx0XHRcdH0pLCBmc19lcnJvcik7XG5cdFx0fSxcblx0XHQgICAgRlNfcHJvdG8gPSBGaWxlU2F2ZXIucHJvdG90eXBlLFxuXHRcdCAgICBzYXZlQXMgPSBmdW5jdGlvbiBzYXZlQXMoYmxvYiwgbmFtZSwgbm9fYXV0b19ib20pIHtcblx0XHRcdHJldHVybiBuZXcgRmlsZVNhdmVyKGJsb2IsIG5hbWUsIG5vX2F1dG9fYm9tKTtcblx0XHR9O1xuXHRcdC8vIElFIDEwKyAobmF0aXZlIHNhdmVBcylcblx0XHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuXHRcdFx0XHRpZiAoIW5vX2F1dG9fYm9tKSB7XG5cdFx0XHRcdFx0YmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihibG9iLCBuYW1lIHx8IFwiZG93bmxvYWRcIik7XG5cdFx0XHR9O1xuXHRcdH1cblx0XG5cdFx0RlNfcHJvdG8uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgZmlsZXNhdmVyID0gdGhpcztcblx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRkaXNwYXRjaChmaWxlc2F2ZXIsIFwiYWJvcnRcIik7XG5cdFx0fTtcblx0XHRGU19wcm90by5yZWFkeVN0YXRlID0gRlNfcHJvdG8uSU5JVCA9IDA7XG5cdFx0RlNfcHJvdG8uV1JJVElORyA9IDE7XG5cdFx0RlNfcHJvdG8uRE9ORSA9IDI7XG5cdFxuXHRcdEZTX3Byb3RvLmVycm9yID0gRlNfcHJvdG8ub253cml0ZXN0YXJ0ID0gRlNfcHJvdG8ub25wcm9ncmVzcyA9IEZTX3Byb3RvLm9ud3JpdGUgPSBGU19wcm90by5vbmFib3J0ID0gRlNfcHJvdG8ub25lcnJvciA9IEZTX3Byb3RvLm9ud3JpdGVlbmQgPSBudWxsO1xuXHRcblx0XHRyZXR1cm4gc2F2ZUFzO1xuXHR9KSh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93IHx8IHVuZGVmaW5lZC5jb250ZW50KTtcblx0Ly8gYHNlbGZgIGlzIHVuZGVmaW5lZCBpbiBGaXJlZm94IGZvciBBbmRyb2lkIGNvbnRlbnQgc2NyaXB0IGNvbnRleHRcblx0Ly8gd2hpbGUgYHRoaXNgIGlzIG5zSUNvbnRlbnRGcmFtZU1lc3NhZ2VNYW5hZ2VyXG5cdC8vIHdpdGggYW4gYXR0cmlidXRlIGBjb250ZW50YCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSB3aW5kb3dcblx0XG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMuc2F2ZUFzID0gc2F2ZUFzO1xuXHR9IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KSAhPT0gbnVsbCAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KSAhPSBudWxsKSB7XG5cdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHNhdmVBcztcblx0XHR9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBEYXRlRmlsdGVyID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoRGF0ZUZpbHRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gRGF0ZUZpbHRlcihwcm9wcykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlRmlsdGVyKTtcblx0XG5cdCAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGF0ZUZpbHRlci5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcblx0ICAgICAgICB0aGlzLmZpbHRlciA9IHRoaXMuZmlsdGVyLmJpbmQodGhpcyk7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKERhdGVGaWx0ZXIsIFt7XG5cdCAgICAgICAga2V5OiAnc2V0RGVmYXVsdERhdGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZWZhdWx0RGF0ZSgpIHtcblx0ICAgICAgICAgICAgdmFyIGRlZmF1bHREYXRlID0gXCJcIjtcblx0ICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGFwcHJvcHJpYXRlIGZvcm1hdCBmb3IgdGhlIGlucHV0IHR5cGU9ZGF0ZSwgaS5lLiBcIllZWVktTU0tRERcIlxuXHQgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IG5ldyBEYXRlKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIGRlZmF1bHREYXRlID0gZGVmYXVsdFZhbHVlLmdldEZ1bGxZZWFyKCkgKyAnLScgKyAoXCIwXCIgKyAoZGVmYXVsdFZhbHVlLmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpICsgJy0nICsgKFwiMFwiICsgZGVmYXVsdFZhbHVlLmdldERhdGUoKSkuc2xpY2UoLTIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RGF0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnZmlsdGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsdGVyKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHZhciBkYXRlVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG5cdCAgICAgICAgICAgIGlmIChkYXRlVmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZmlsdGVySGFuZGxlcihuZXcgRGF0ZShkYXRlVmFsdWUpLCBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuREFURSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZpbHRlckhhbmRsZXIobnVsbCwgX0NvbnN0MlsnZGVmYXVsdCddLkZJTFRFUl9UWVBFLkRBVEUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdCAgICAgICAgICAgIHZhciBkYXRlVmFsdWUgPSB0aGlzLnJlZnMuaW5wdXREYXRlLmRlZmF1bHRWYWx1ZTtcblx0ICAgICAgICAgICAgaWYgKGRhdGVWYWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKG5ldyBEYXRlKGRhdGVWYWx1ZSksIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5EQVRFKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHJlZjogJ2lucHV0RGF0ZScsXG5cdCAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdmaWx0ZXIgZGF0ZS1maWx0ZXIgZm9ybS1jb250cm9sJyxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcblx0ICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmZpbHRlcixcblx0ICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdGhpcy5zZXREZWZhdWx0RGF0ZSgpIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gRGF0ZUZpbHRlcjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHQ7XG5cdFxuXHREYXRlRmlsdGVyLnByb3BUeXBlcyA9IHtcblx0ICAgIGZpbHRlckhhbmRsZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHQgICAgZGVmYXVsdFZhbHVlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdCxcblx0ICAgIGNvbHVtbk5hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nXG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBEYXRlRmlsdGVyO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDI5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdHZhciBfQ29uc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9Db25zdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdCk7XG5cdFxuXHR2YXIgbGVnYWxDb21wYXJhdG9ycyA9IFtcIj1cIiwgXCI+XCIsIFwiPj1cIiwgXCI8XCIsIFwiPD1cIiwgXCIhPVwiXTtcblx0XG5cdHZhciBOdW1iZXJGaWx0ZXIgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhOdW1iZXJGaWx0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIE51bWJlckZpbHRlcihwcm9wcykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdW1iZXJGaWx0ZXIpO1xuXHRcblx0ICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihOdW1iZXJGaWx0ZXIucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdCAgICAgICAgdGhpcy5udW1iZXJDb21wYXJhdG9ycyA9IHRoaXMucHJvcHMubnVtYmVyQ29tcGFyYXRvcnMgfHwgbGVnYWxDb21wYXJhdG9ycztcblx0ICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuc3RhdGUgPSB7XG5cdCAgICAgICAgICAgIGlzUGxhY2Vob2xkZXJTZWxlY3RlZDogdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlLm51bWJlciA9PSB1bmRlZmluZWQgfHwgdGhpcy5wcm9wcy5vcHRpb25zICYmIHRoaXMucHJvcHMub3B0aW9ucy5pbmRleE9mKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlLm51bWJlcikgPT0gLTFcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMub25DaGFuZ2VOdW1iZXIgPSB0aGlzLm9uQ2hhbmdlTnVtYmVyLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5vbkNoYW5nZU51bWJlclNldCA9IHRoaXMub25DaGFuZ2VOdW1iZXJTZXQuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLm9uQ2hhbmdlQ29tcGFyYXRvciA9IHRoaXMub25DaGFuZ2VDb21wYXJhdG9yLmJpbmQodGhpcyk7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKE51bWJlckZpbHRlciwgW3tcblx0ICAgICAgICBrZXk6ICdvbkNoYW5nZU51bWJlcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlTnVtYmVyKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnJlZnMubnVtYmVyRmlsdGVyQ29tcGFyYXRvci52YWx1ZSA9PT0gXCJcIikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgICAgICAgICAgdmFyIGZpbHRlclZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHQgICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHNlbGYucHJvcHMuZmlsdGVySGFuZGxlcih7IG51bWJlcjogZmlsdGVyVmFsdWUsIGNvbXBhcmF0b3I6IHNlbGYucmVmcy5udW1iZXJGaWx0ZXJDb21wYXJhdG9yLnZhbHVlIH0sIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5OVU1CRVIpO1xuXHQgICAgICAgICAgICB9LCBzZWxmLnByb3BzLmRlbGF5KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnb25DaGFuZ2VOdW1iZXJTZXQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZU51bWJlclNldChldmVudCkge1xuXHQgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNQbGFjZWhvbGRlclNlbGVjdGVkOiBldmVudC50YXJnZXQudmFsdWUgPT09IFwiXCIgfSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnJlZnMubnVtYmVyRmlsdGVyQ29tcGFyYXRvci52YWx1ZSA9PT0gXCJcIikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMucHJvcHMuZmlsdGVySGFuZGxlcih7IG51bWJlcjogZXZlbnQudGFyZ2V0LnZhbHVlLCBjb21wYXJhdG9yOiB0aGlzLnJlZnMubnVtYmVyRmlsdGVyQ29tcGFyYXRvci52YWx1ZSB9LCBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX1RZUEUuTlVNQkVSKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnb25DaGFuZ2VDb21wYXJhdG9yJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VDb21wYXJhdG9yKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnJlZnMubnVtYmVyRmlsdGVyLnZhbHVlID09PSBcIlwiKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKHsgbnVtYmVyOiB0aGlzLnJlZnMubnVtYmVyRmlsdGVyLnZhbHVlLCBjb21wYXJhdG9yOiBldmVudC50YXJnZXQudmFsdWUgfSwgX0NvbnN0MlsnZGVmYXVsdCddLkZJTFRFUl9UWVBFLk5VTUJFUik7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldENvbXBhcmF0b3JPcHRpb25zJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tcGFyYXRvck9wdGlvbnMoKSB7XG5cdCAgICAgICAgICAgIHZhciBvcHRpb25UYWdzID0gW107XG5cdCAgICAgICAgICAgIG9wdGlvblRhZ3MucHVzaChfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnb3B0aW9uJywgeyBrZXk6ICctMScgfSkpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubnVtYmVyQ29tcGFyYXRvcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG9wdGlvblRhZ3MucHVzaChfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnb3B0aW9uJyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGtleTogaSwgdmFsdWU6IHRoaXMubnVtYmVyQ29tcGFyYXRvcnNbaV0gfSxcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm51bWJlckNvbXBhcmF0b3JzW2ldXG5cdCAgICAgICAgICAgICAgICApKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgcmV0dXJuIG9wdGlvblRhZ3M7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldE51bWJlck9wdGlvbnMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROdW1iZXJPcHRpb25zKCkge1xuXHQgICAgICAgICAgICB2YXIgb3B0aW9uVGFncyA9IFtdO1xuXHQgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMucHJvcHMub3B0aW9ucztcblx0XG5cdCAgICAgICAgICAgIG9wdGlvblRhZ3MucHVzaChfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICdvcHRpb24nLFxuXHQgICAgICAgICAgICAgICAgeyBrZXk6ICctMScsIHZhbHVlOiAnJyB9LFxuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCAnU2VsZWN0ICcgKyB0aGlzLnByb3BzLmNvbHVtbk5hbWUgKyAnLi4uJ1xuXHQgICAgICAgICAgICApKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBvcHRpb25UYWdzLnB1c2goX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBrZXk6IGksIHZhbHVlOiBvcHRpb25zW2ldIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tpXVxuXHQgICAgICAgICAgICAgICAgKSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIHJldHVybiBvcHRpb25UYWdzO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5yZWZzLm51bWJlckZpbHRlckNvbXBhcmF0b3IudmFsdWUgJiYgdGhpcy5yZWZzLm51bWJlckZpbHRlci52YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKHsgbnVtYmVyOiB0aGlzLnJlZnMubnVtYmVyRmlsdGVyLnZhbHVlLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBhcmF0b3I6IHRoaXMucmVmcy5udW1iZXJGaWx0ZXJDb21wYXJhdG9yLnZhbHVlIH0sIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5OVU1CRVIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWxlY3RDbGFzcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoXCJzZWxlY3QtZmlsdGVyXCIsIFwibnVtYmVyLWZpbHRlci1pbnB1dFwiLCBcImZvcm0tY29udHJvbFwiLCB7IFwicGxhY2Vob2xkZXItc2VsZWN0ZWRcIjogdGhpcy5zdGF0ZS5pc1BsYWNlaG9sZGVyU2VsZWN0ZWQgfSk7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZmlsdGVyIG51bWJlci1maWx0ZXInIH0sXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnc2VsZWN0Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ251bWJlckZpbHRlckNvbXBhcmF0b3InLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdudW1iZXItZmlsdGVyLWNvbXBhcmF0b3IgZm9ybS1jb250cm9sJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2VDb21wYXJhdG9yLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlID8gdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUuY29tcGFyYXRvciA6IFwiXCIgfSxcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENvbXBhcmF0b3JPcHRpb25zKClcblx0ICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9wdGlvbnMgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnc2VsZWN0Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ251bWJlckZpbHRlcicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogc2VsZWN0Q2xhc3MsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlTnVtYmVyU2V0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlID8gdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUubnVtYmVyIDogXCJcIiB9LFxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TnVtYmVyT3B0aW9ucygpXG5cdCAgICAgICAgICAgICAgICApIDogX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyByZWY6ICdudW1iZXJGaWx0ZXInLFxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ251bWJlci1maWx0ZXItaW5wdXQgZm9ybS1jb250cm9sJyxcblx0ICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCAnRW50ZXIgJyArIHRoaXMucHJvcHMuY29sdW1uTmFtZSArICcuLi4nLFxuXHQgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlTnVtYmVyLFxuXHQgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgPyB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZS5udW1iZXIgOiBcIlwiIH0pXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBOdW1iZXJGaWx0ZXI7XG5cdH0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXHRcblx0O1xuXHRcblx0TnVtYmVyRmlsdGVyLnByb3BUeXBlcyA9IHtcblx0ICAgIGZpbHRlckhhbmRsZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHQgICAgb3B0aW9uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheU9mKF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyKSxcblx0ICAgIGRlZmF1bHRWYWx1ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zaGFwZSh7XG5cdCAgICAgICAgbnVtYmVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm51bWJlcixcblx0ICAgICAgICBjb21wYXJhdG9yOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9uZU9mKGxlZ2FsQ29tcGFyYXRvcnMpXG5cdCAgICB9KSxcblx0ICAgIGRlbGF5OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm51bWJlcixcblx0ICAgIG51bWJlckNvbXBhcmF0b3JzOiBmdW5jdGlvbiBudW1iZXJDb21wYXJhdG9ycyhwcm9wcywgcHJvcE5hbWUpIHtcblx0ICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHNbcHJvcE5hbWVdLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBjb21wYXJhdG9ySXNWYWxpZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlZ2FsQ29tcGFyYXRvcnMubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChsZWdhbENvbXBhcmF0b3JzW2pdID09PSBwcm9wc1twcm9wTmFtZV1baV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wYXJhdG9ySXNWYWxpZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCFjb21wYXJhdG9ySXNWYWxpZCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTnVtYmVyIGNvbXBhcmF0b3IgcHJvdmlkZWQgaXMgbm90IHN1cHBvcnRlZC4gVXNlIG9ubHkgJyArIGxlZ2FsQ29tcGFyYXRvcnMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHBsYWNlaG9sZGVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICAgIGNvbHVtbk5hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nXG5cdH07XG5cdFxuXHROdW1iZXJGaWx0ZXIuZGVmYXVsdFByb3BzID0ge1xuXHQgICAgZGVsYXk6IF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfREVMQVlcblx0fTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IE51bWJlckZpbHRlcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBTZWxlY3RGaWx0ZXIgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0XHRfaW5oZXJpdHMoU2VsZWN0RmlsdGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdFx0ZnVuY3Rpb24gU2VsZWN0RmlsdGVyKHByb3BzKSB7XG5cdFx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0RmlsdGVyKTtcblx0XG5cdFx0XHRfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWxlY3RGaWx0ZXIucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdFx0XHR0aGlzLmZpbHRlciA9IHRoaXMuZmlsdGVyLmJpbmQodGhpcyk7XG5cdFx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0XHRpc1BsYWNlaG9sZGVyU2VsZWN0ZWQ6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlID09IHVuZGVmaW5lZCB8fCAhdGhpcy5wcm9wcy5vcHRpb25zLmhhc093blByb3BlcnR5KHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlKVxuXHRcdFx0fTtcblx0XHR9XG5cdFxuXHRcdF9jcmVhdGVDbGFzcyhTZWxlY3RGaWx0ZXIsIFt7XG5cdFx0XHRrZXk6ICdmaWx0ZXInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGZpbHRlcihldmVudCkge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHsgaXNQbGFjZWhvbGRlclNlbGVjdGVkOiBldmVudC50YXJnZXQudmFsdWUgPT09IFwiXCIgfSk7XG5cdFx0XHRcdHRoaXMucHJvcHMuZmlsdGVySGFuZGxlcihldmVudC50YXJnZXQudmFsdWUsIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5TRUxFQ1QpO1xuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldE9wdGlvbnMnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG5cdFx0XHRcdHZhciBvcHRpb25UYWdzID0gW107XG5cdFx0XHRcdHZhciBvcHRpb25zID0gdGhpcy5wcm9wcy5vcHRpb25zO1xuXHRcdFx0XHRvcHRpb25UYWdzLnB1c2goX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0J29wdGlvbicsXG5cdFx0XHRcdFx0eyBrZXk6ICctMScsIHZhbHVlOiAnJyB9LFxuXHRcdFx0XHRcdHRoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgJ1NlbGVjdCAnICsgdGhpcy5wcm9wcy5jb2x1bW5OYW1lICsgJy4uLidcblx0XHRcdFx0KSk7XG5cdFx0XHRcdE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0b3B0aW9uVGFncy5wdXNoKF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0J29wdGlvbicsXG5cdFx0XHRcdFx0XHR7IGtleToga2V5LCB2YWx1ZToga2V5IH0sXG5cdFx0XHRcdFx0XHRvcHRpb25zW2tleV1cblx0XHRcdFx0XHQpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBvcHRpb25UYWdzO1xuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRcdFx0aWYgKHRoaXMucmVmcy5zZWxlY3RJbnB1dC52YWx1ZSkge1xuXHRcdFx0XHRcdHRoaXMucHJvcHMuZmlsdGVySGFuZGxlcih0aGlzLnJlZnMuc2VsZWN0SW5wdXQudmFsdWUsIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5TRUxFQ1QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAncmVuZGVyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHRcdHZhciBzZWxlY3RDbGFzcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoXCJmaWx0ZXJcIiwgXCJzZWxlY3QtZmlsdGVyXCIsIFwiZm9ybS1jb250cm9sXCIsIHsgXCJwbGFjZWhvbGRlci1zZWxlY3RlZFwiOiB0aGlzLnN0YXRlLmlzUGxhY2Vob2xkZXJTZWxlY3RlZCB9KTtcblx0XG5cdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHQnc2VsZWN0Jyxcblx0XHRcdFx0XHR7IHJlZjogJ3NlbGVjdElucHV0Jyxcblx0XHRcdFx0XHRcdGNsYXNzTmFtZTogc2VsZWN0Q2xhc3MsXG5cdFx0XHRcdFx0XHRvbkNoYW5nZTogdGhpcy5maWx0ZXIsXG5cdFx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlICE9IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlIDogXCJcIiB9LFxuXHRcdFx0XHRcdHRoaXMuZ2V0T3B0aW9ucygpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXHRcblx0XHRyZXR1cm4gU2VsZWN0RmlsdGVyO1xuXHR9KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblx0XG5cdDtcblx0XG5cdFNlbGVjdEZpbHRlci5wcm9wVHlwZXMgPSB7XG5cdFx0ZmlsdGVySGFuZGxlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0b3B0aW9uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0XHRwbGFjZWhvbGRlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0Y29sdW1uTmFtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmdcblx0fTtcblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNlbGVjdEZpbHRlcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX0NvbnN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQ29uc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uc3QpO1xuXHRcblx0dmFyIFRleHRGaWx0ZXIgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0XHRfaW5oZXJpdHMoVGV4dEZpbHRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHRcdGZ1bmN0aW9uIFRleHRGaWx0ZXIocHJvcHMpIHtcblx0XHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0RmlsdGVyKTtcblx0XG5cdFx0XHRfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihUZXh0RmlsdGVyLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgcHJvcHMpO1xuXHRcdFx0dGhpcy5maWx0ZXIgPSB0aGlzLmZpbHRlci5iaW5kKHRoaXMpO1xuXHRcdFx0dGhpcy50aW1lb3V0ID0gbnVsbDtcblx0XHR9XG5cdFxuXHRcdF9jcmVhdGVDbGFzcyhUZXh0RmlsdGVyLCBbe1xuXHRcdFx0a2V5OiAnZmlsdGVyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXIoZXZlbnQpIHtcblx0XHRcdFx0aWYgKHRoaXMudGltZW91dCkge1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdFx0dmFyIGZpbHRlclZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHRcdFx0XHR0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRzZWxmLnByb3BzLmZpbHRlckhhbmRsZXIoZmlsdGVyVmFsdWUsIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5URVhUKTtcblx0XHRcdFx0fSwgc2VsZi5wcm9wcy5kZWxheSk7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdFx0XHRpZiAodGhpcy5yZWZzLmlucHV0VGV4dC5kZWZhdWx0VmFsdWUpIHtcblx0XHRcdFx0XHR0aGlzLnByb3BzLmZpbHRlckhhbmRsZXIodGhpcy5yZWZzLmlucHV0VGV4dC5kZWZhdWx0VmFsdWUsIF9Db25zdDJbJ2RlZmF1bHQnXS5GSUxURVJfVFlQRS5URVhUKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAncmVuZGVyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHJlZjogJ2lucHV0VGV4dCcsXG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiAnZmlsdGVyIHRleHQtZmlsdGVyIGZvcm0tY29udHJvbCcsXG5cdFx0XHRcdFx0dHlwZTogJ3RleHQnLFxuXHRcdFx0XHRcdG9uQ2hhbmdlOiB0aGlzLmZpbHRlcixcblx0XHRcdFx0XHRwbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCAnRW50ZXIgJyArIHRoaXMucHJvcHMuY29sdW1uTmFtZSArICcuLi4nLFxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZTogdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgPyB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSA6IFwiXCIgfSk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXHRcblx0XHRyZXR1cm4gVGV4dEZpbHRlcjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHQ7XG5cdFxuXHRUZXh0RmlsdGVyLnByb3BUeXBlcyA9IHtcblx0XHRmaWx0ZXJIYW5kbGVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0XHRkZWZhdWx0VmFsdWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGRlbGF5OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm51bWJlcixcblx0XHRwbGFjZWhvbGRlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0Y29sdW1uTmFtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmdcblx0fTtcblx0XG5cdFRleHRGaWx0ZXIuZGVmYXVsdFByb3BzID0ge1xuXHRcdGRlbGF5OiBfQ29uc3QyWydkZWZhdWx0J10uRklMVEVSX0RFTEFZXG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBUZXh0RmlsdGVyO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHR2YXIgUGFnZUJ1dHRvbiA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhQYWdlQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gUGFnZUJ1dHRvbihwcm9wcykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VCdXR0b24pO1xuXHRcblx0ICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFBhZ2VCdXR0b24ucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoUGFnZUJ1dHRvbiwgW3tcblx0ICAgIGtleTogJ3BhZ2VCdG5DbGljaycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcGFnZUJ0bkNsaWNrKGUpIHtcblx0ICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICB0aGlzLnByb3BzLmNoYW5nZVBhZ2UoZS5jdXJyZW50VGFyZ2V0LnRleHQpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgY2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoe1xuXHQgICAgICAgICdhY3RpdmUnOiB0aGlzLnByb3BzLmFjdGl2ZSxcblx0ICAgICAgICAnZGlzYWJsZWQnOiB0aGlzLnByb3BzLmRpc2FibGUsXG5cdCAgICAgICAgJ2hpZGRlbic6IHRoaXMucHJvcHMuaGlkZGVuXG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ2xpJyxcblx0ICAgICAgICB7IGNsYXNzTmFtZTogY2xhc3NlcyB9LFxuXHQgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ2EnLFxuXHQgICAgICAgICAgeyBocmVmOiAnIycsIG9uQ2xpY2s6IHRoaXMucGFnZUJ0bkNsaWNrLmJpbmQodGhpcykgfSxcblx0ICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cblx0ICAgICAgICApXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gUGFnZUJ1dHRvbjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRQYWdlQnV0dG9uLnByb3BUeXBlcyA9IHtcblx0ICBjaGFuZ2VQYWdlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgYWN0aXZlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgZGlzYWJsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sXG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBQYWdlQnV0dG9uO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfUGFnZUJ1dHRvbkpzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG5cdFxuXHR2YXIgX1BhZ2VCdXR0b25KczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYWdlQnV0dG9uSnMpO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBQYWdpbmF0aW9uTGlzdCA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhQYWdpbmF0aW9uTGlzdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgIGZ1bmN0aW9uIFBhZ2luYXRpb25MaXN0KCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2luYXRpb25MaXN0KTtcblx0XG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihQYWdpbmF0aW9uTGlzdC5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFBhZ2luYXRpb25MaXN0LCBbe1xuXHQgICAga2V5OiAnY2hhbmdlUGFnZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlUGFnZShwYWdlKSB7XG5cdCAgICAgIGlmIChwYWdlID09IHRoaXMucHJvcHMucHJlUGFnZSkge1xuXHQgICAgICAgIHBhZ2UgPSB0aGlzLnByb3BzLmN1cnJQYWdlIC0gMSA8IDEgPyAxIDogdGhpcy5wcm9wcy5jdXJyUGFnZSAtIDE7XG5cdCAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSB0aGlzLnByb3BzLm5leHRQYWdlKSB7XG5cdCAgICAgICAgcGFnZSA9IHRoaXMucHJvcHMuY3VyclBhZ2UgKyAxID4gdGhpcy50b3RhbFBhZ2VzID8gdGhpcy50b3RhbFBhZ2VzIDogdGhpcy5wcm9wcy5jdXJyUGFnZSArIDE7XG5cdCAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSB0aGlzLnByb3BzLmxhc3RQYWdlKSB7XG5cdCAgICAgICAgcGFnZSA9IHRoaXMudG90YWxQYWdlcztcblx0ICAgICAgfSBlbHNlIGlmIChwYWdlID09IHRoaXMucHJvcHMuZmlyc3RQYWdlKSB7XG5cdCAgICAgICAgcGFnZSA9IDE7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGFnZSA9IHBhcnNlSW50KHBhZ2UpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAocGFnZSAhPSB0aGlzLnByb3BzLmN1cnJQYWdlKSB7XG5cdCAgICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VQYWdlKHBhZ2UsIHRoaXMucHJvcHMuc2l6ZVBlclBhZ2UpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY2hhbmdlU2l6ZVBlclBhZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVNpemVQZXJQYWdlKGUpIHtcblx0ICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcblx0ICAgICAgdmFyIHNlbGVjdFNpemUgPSBwYXJzZUludChlLmN1cnJlbnRUYXJnZXQudGV4dCk7XG5cdCAgICAgIHZhciBjdXJyUGFnZSA9IHRoaXMucHJvcHMuY3VyclBhZ2U7XG5cdFxuXHQgICAgICBpZiAoc2VsZWN0U2l6ZSAhPSB0aGlzLnByb3BzLnNpemVQZXJQYWdlKSB7XG5cdCAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRoaXMucHJvcHMuZGF0YVNpemUgLyBzZWxlY3RTaXplKTtcblx0ICAgICAgICBpZiAoY3VyclBhZ2UgPiB0aGlzLnRvdGFsUGFnZXMpIGN1cnJQYWdlID0gdGhpcy50b3RhbFBhZ2VzO1xuXHRcblx0ICAgICAgICB0aGlzLnByb3BzLmNoYW5nZVBhZ2UoY3VyclBhZ2UsIHNlbGVjdFNpemUpO1xuXHQgICAgICAgIGlmICh0aGlzLnByb3BzLm9uU2l6ZVBlclBhZ2VMaXN0KSB7XG5cdCAgICAgICAgICB0aGlzLnByb3BzLm9uU2l6ZVBlclBhZ2VMaXN0KHNlbGVjdFNpemUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgdGhpcy50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRoaXMucHJvcHMuZGF0YVNpemUgLyB0aGlzLnByb3BzLnNpemVQZXJQYWdlKTtcblx0ICAgICAgdmFyIHBhZ2VCdG5zID0gdGhpcy5tYWtlUGFnZSgpO1xuXHQgICAgICB2YXIgcGFnZUxpc3RTdHlsZSA9IHtcblx0ICAgICAgICBmbG9hdDogXCJyaWdodFwiLFxuXHQgICAgICAgIG1hcmdpblRvcDogXCIwcHhcIiAvL292ZXJyaWRlIHRoZSBtYXJnaW4tdG9wIGRlZmluZWQgaW4gLnBhZ2luYXRpb24gY2xhc3MgaW4gYm9vdHN0cmFwLlxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgdmFyIHNpemVQZXJQYWdlTGlzdCA9IHRoaXMucHJvcHMuc2l6ZVBlclBhZ2VMaXN0Lm1hcChmdW5jdGlvbiAoc2l6ZVBlclBhZ2UpIHtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAnbGknLFxuXHQgICAgICAgICAgeyBrZXk6IHNpemVQZXJQYWdlLCByb2xlOiAncHJlc2VudGF0aW9uJyB9LFxuXHQgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICdhJyxcblx0ICAgICAgICAgICAgeyByb2xlOiAnbWVudWl0ZW0nLCB0YWJJbmRleDogJy0xJywgaHJlZjogJyMnLCBvbkNsaWNrOiBfdGhpcy5jaGFuZ2VTaXplUGVyUGFnZS5iaW5kKF90aGlzKSB9LFxuXHQgICAgICAgICAgICBzaXplUGVyUGFnZVxuXHQgICAgICAgICAgKVxuXHQgICAgICAgICk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIHsgY2xhc3NOYW1lOiAncm93Jywgc3R5bGU6IHsgbWFyZ2luVG9wOiAxNSB9IH0sXG5cdCAgICAgICAgdGhpcy5wcm9wcy5zaXplUGVyUGFnZUxpc3QubGVuZ3RoID4gMSA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC02JyB9LFxuXHQgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Ryb3Bkb3duJyB9LFxuXHQgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2J1dHRvbicsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2J0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUnLCB0eXBlOiAnYnV0dG9uJywgaWQ6ICdwYWdlRHJvcERvd24nLCAnZGF0YS10b2dnbGUnOiAnZHJvcGRvd24nLFxuXHQgICAgICAgICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6ICd0cnVlJyB9LFxuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zaXplUGVyUGFnZSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAnc3BhbicsXG5cdCAgICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAgIFwiIFwiLFxuXHQgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnY2FyZXQnIH0pXG5cdCAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICd1bCcsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Ryb3Bkb3duLW1lbnUnLCByb2xlOiAnbWVudScsICdhcmlhLWxhYmVsbGVkYnknOiAncGFnZURyb3BEb3duJyB9LFxuXHQgICAgICAgICAgICAgICAgc2l6ZVBlclBhZ2VMaXN0XG5cdCAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApXG5cdCAgICAgICAgICApLFxuXHQgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC02JyB9LFxuXHQgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAndWwnLFxuXHQgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFnaW5hdGlvbicsIHN0eWxlOiBwYWdlTGlzdFN0eWxlIH0sXG5cdCAgICAgICAgICAgICAgcGFnZUJ0bnNcblx0ICAgICAgICAgICAgKVxuXHQgICAgICAgICAgKVxuXHQgICAgICAgICkgOiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb2wtbWQtMTInIH0sXG5cdCAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgJ3VsJyxcblx0ICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYWdpbmF0aW9uJywgc3R5bGU6IHBhZ2VMaXN0U3R5bGUgfSxcblx0ICAgICAgICAgICAgcGFnZUJ0bnNcblx0ICAgICAgICAgIClcblx0ICAgICAgICApXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnbWFrZVBhZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VQYWdlKCkge1xuXHQgICAgICB2YXIgcGFnZXMgPSB0aGlzLmdldFBhZ2VzKCk7XG5cdCAgICAgIHJldHVybiBwYWdlcy5tYXAoZnVuY3Rpb24gKHBhZ2UpIHtcblx0ICAgICAgICB2YXIgaXNBY3RpdmUgPSBwYWdlID09PSB0aGlzLnByb3BzLmN1cnJQYWdlO1xuXHQgICAgICAgIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBoaWRkZW4gPSBmYWxzZTtcblx0ICAgICAgICBpZiAodGhpcy5wcm9wcy5jdXJyUGFnZSA9PSAxICYmIChwYWdlID09PSB0aGlzLnByb3BzLmZpcnN0UGFnZSB8fCBwYWdlID09PSB0aGlzLnByb3BzLnByZVBhZ2UpKSB7XG5cdCAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7XG5cdCAgICAgICAgICBoaWRkZW4gPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5wcm9wcy5jdXJyUGFnZSA9PSB0aGlzLnRvdGFsUGFnZXMgJiYgKHBhZ2UgPT09IHRoaXMucHJvcHMubmV4dFBhZ2UgfHwgcGFnZSA9PT0gdGhpcy5wcm9wcy5sYXN0UGFnZSkpIHtcblx0ICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcblx0ICAgICAgICAgIGhpZGRlbiA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgIF9QYWdlQnV0dG9uSnMyWydkZWZhdWx0J10sXG5cdCAgICAgICAgICB7IGNoYW5nZVBhZ2U6IHRoaXMuY2hhbmdlUGFnZS5iaW5kKHRoaXMpLCBhY3RpdmU6IGlzQWN0aXZlLCBkaXNhYmxlOiBkaXNhYmxlZCwgaGlkZGVuOiBoaWRkZW4sIGtleTogcGFnZSB9LFxuXHQgICAgICAgICAgcGFnZVxuXHQgICAgICAgICk7XG5cdCAgICAgIH0sIHRoaXMpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFBhZ2VzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlcygpIHtcblx0ICAgICAgdmFyIHN0YXJ0UGFnZSA9IDEsXG5cdCAgICAgICAgICBlbmRQYWdlID0gdGhpcy50b3RhbFBhZ2VzO1xuXHRcblx0ICAgICAgc3RhcnRQYWdlID0gTWF0aC5tYXgodGhpcy5wcm9wcy5jdXJyUGFnZSAtIE1hdGguZmxvb3IodGhpcy5wcm9wcy5wYWdpbmF0aW9uU2l6ZSAvIDIpLCAxKTtcblx0ICAgICAgZW5kUGFnZSA9IHN0YXJ0UGFnZSArIHRoaXMucHJvcHMucGFnaW5hdGlvblNpemUgLSAxO1xuXHRcblx0ICAgICAgaWYgKGVuZFBhZ2UgPiB0aGlzLnRvdGFsUGFnZXMpIHtcblx0ICAgICAgICBlbmRQYWdlID0gdGhpcy50b3RhbFBhZ2VzO1xuXHQgICAgICAgIHN0YXJ0UGFnZSA9IGVuZFBhZ2UgLSB0aGlzLnByb3BzLnBhZ2luYXRpb25TaXplICsgMTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgcGFnZXM7XG5cdCAgICAgIGlmIChzdGFydFBhZ2UgIT0gMSAmJiB0aGlzLnRvdGFsUGFnZXMgPiB0aGlzLnByb3BzLnBhZ2luYXRpb25TaXplKSB7XG5cdCAgICAgICAgcGFnZXMgPSBbdGhpcy5wcm9wcy5maXJzdFBhZ2UsIHRoaXMucHJvcHMucHJlUGFnZV07XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy50b3RhbFBhZ2VzID4gMSkge1xuXHQgICAgICAgIHBhZ2VzID0gW3RoaXMucHJvcHMucHJlUGFnZV07XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGFnZXMgPSBbXTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBpID0gc3RhcnRQYWdlOyBpIDw9IGVuZFBhZ2U7IGkrKykge1xuXHQgICAgICAgIGlmIChpID4gMCkgcGFnZXMucHVzaChpKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoZW5kUGFnZSAhPSB0aGlzLnRvdGFsUGFnZXMpIHtcblx0ICAgICAgICBwYWdlcy5wdXNoKHRoaXMucHJvcHMubmV4dFBhZ2UpO1xuXHQgICAgICAgIHBhZ2VzLnB1c2godGhpcy5wcm9wcy5sYXN0UGFnZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy50b3RhbFBhZ2VzID4gMSkge1xuXHQgICAgICAgIHBhZ2VzLnB1c2godGhpcy5wcm9wcy5uZXh0UGFnZSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHBhZ2VzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEN1cnJlbnRQYWdlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50UGFnZSgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY3VyclBhZ2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0U2l6ZVBlclBhZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNpemVQZXJQYWdlKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zaXplUGVyUGFnZTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBQYWdpbmF0aW9uTGlzdDtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRQYWdpbmF0aW9uTGlzdC5wcm9wVHlwZXMgPSB7XG5cdCAgY3VyclBhZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLFxuXHQgIHNpemVQZXJQYWdlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm51bWJlcixcblx0ICBkYXRhU2l6ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsXG5cdCAgY2hhbmdlUGFnZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgIHNpemVQZXJQYWdlTGlzdDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSxcblx0ICBwYWdpbmF0aW9uU2l6ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsXG5cdCAgcmVtb3RlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgb25TaXplUGVyUGFnZUxpc3Q6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICBwcmVQYWdlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZ1xuXHR9O1xuXHRcblx0UGFnaW5hdGlvbkxpc3QuZGVmYXVsdFByb3BzID0ge1xuXHQgIHNpemVQZXJQYWdlOiBfQ29uc3QyWydkZWZhdWx0J10uU0laRV9QRVJfUEFHRVxuXHR9O1xuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gUGFnaW5hdGlvbkxpc3Q7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXHRcblx0dmFyIF9Db25zdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX0NvbnN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0KTtcblx0XG5cdHZhciBfRWRpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfRWRpdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VkaXRvcik7XG5cdFxuXHR2YXIgX05vdGlmaWNhdGlvbkpzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0XG5cdHZhciBfTm90aWZpY2F0aW9uSnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTm90aWZpY2F0aW9uSnMpO1xuXHRcblx0dmFyIF9yY1N3aXRjaCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX3JjU3dpdGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JjU3dpdGNoKTtcblx0XG5cdHZhciBUb29sQmFyID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoVG9vbEJhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gVG9vbEJhcihwcm9wcykge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sQmFyKTtcblx0XG5cdCAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbEJhci5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcblx0XG5cdCAgICAgICAgdGhpcy5oYW5kbGVTaG93T25seVRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICAgICAgICAgIHNob3dTZWxlY3RlZDogIV90aGlzLnN0YXRlLnNob3dTZWxlY3RlZFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgX3RoaXMucHJvcHMub25TaG93T25seVNlbGVjdGVkKCk7XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgdGhpcy5oYW5kbGVDbGVhckJ0bkNsaWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBfdGhpcy5yZWZzLnNlYWNoSW5wdXQudmFsdWUgPSAnJztcblx0ICAgICAgICAgICAgX3RoaXMucHJvcHMub25TZWFyY2goJycpO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHRoaXMudGltZW91dGVDbGVhciA9IDA7XG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IHtcblx0ICAgICAgICAgICAgaXNJbnNlcnRSb3dUcmlnZ2VyOiB0cnVlLFxuXHQgICAgICAgICAgICB2YWxpZGF0ZVN0YXRlOiBudWxsLFxuXHQgICAgICAgICAgICBzaGFrZUVkaXRvcjogZmFsc2UsXG5cdCAgICAgICAgICAgIHNob3dTZWxlY3RlZDogZmFsc2Vcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhUb29sQmFyLCBbe1xuXHQgICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NsZWFyVGltZW91dCcsXG5cdCAgICAgICAgdmFsdWU6IChmdW5jdGlvbiAoX2NsZWFyVGltZW91dCkge1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBjbGVhclRpbWVvdXQoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gX2NsZWFyVGltZW91dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gX2NsZWFyVGltZW91dC50b1N0cmluZygpO1xuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dDtcblx0ICAgICAgICB9KShmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXRlQ2xlYXIpIHtcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRlQ2xlYXIpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aW1lb3V0ZUNsZWFyID0gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pXG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY2hlY2tBbmRQYXJzZUZvcm0nLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0FuZFBhcnNlRm9ybSgpIHtcblx0ICAgICAgICAgICAgdmFyIHRzID0gdGhpcyxcblx0ICAgICAgICAgICAgICAgIG5ld09iaiA9IHt9LFxuXHQgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHRydWUsXG5cdCAgICAgICAgICAgICAgICB0ZW1wVmFsdWUsXG5cdCAgICAgICAgICAgICAgICB0ZW1wTXNnLFxuXHQgICAgICAgICAgICAgICAgdmFsaWRhdGVTdGF0ZSA9IHt9O1xuXHQgICAgICAgICAgICB0aGlzLnByb3BzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uLCBpKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmF1dG9WYWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vd2hlbiB5b3Ugd2FudCBzYW1lIGF1dG8gZ2VuZXJhdGUgdmFsdWUgYW5kIG5vdCBhbGxvdyBlZGl0LCBleGFtcGxlIElEIGZpZWxkXG5cdCAgICAgICAgICAgICAgICAgICAgdGVtcFZhbHVlID0gdHlwZW9mIGNvbHVtbi5hdXRvVmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IGNvbHVtbi5hdXRvVmFsdWUoKSA6ICdhdXRvdmFsdWUtJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZG9tID0gdGhpcy5yZWZzW2NvbHVtbi5maWVsZCArIGldO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9tICE9PSAndW5kZWZpbmVkJykgdGVtcFZhbHVlID0gZG9tLnZhbHVlO2Vsc2UgdGVtcFZhbHVlID0gdHJ1ZTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5lZGl0YWJsZSAmJiBjb2x1bW4uZWRpdGFibGUudHlwZSA9PSAnY2hlY2tib3gnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBkb20udmFsdWUuc3BsaXQoJzonKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFZhbHVlID0gZG9tLmNoZWNrZWQgPyB2YWx1ZXNbMF0gOiB2YWx1ZXNbMV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmVkaXRhYmxlICYmIGNvbHVtbi5lZGl0YWJsZS52YWxpZGF0b3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy9wcm9jZXNzIHZhbGlkYXRlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBNc2cgPSBjb2x1bW4uZWRpdGFibGUudmFsaWRhdG9yKHRlbXBWYWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wTXNnICE9PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVN0YXRlW2NvbHVtbi5maWVsZF0gPSB0ZW1wTXNnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIG5ld09ialtjb2x1bW4uZmllbGRdID0gdGVtcFZhbHVlO1xuXHQgICAgICAgICAgICB9LCB0aGlzKTtcblx0XG5cdCAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3T2JqO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdHMuY2xlYXJUaW1lb3V0KCk7XG5cdCAgICAgICAgICAgICAgICAvL3Nob3cgZXJyb3IgaW4gZm9ybSBhbmQgc2hha2UgaXRcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWxpZGF0ZVN0YXRlOiB2YWxpZGF0ZVN0YXRlLCBzaGFrZUVkaXRvcjogdHJ1ZSB9KTtcblx0ICAgICAgICAgICAgICAgIC8vbm90aWZpZXIgZXJyb3Jcblx0ICAgICAgICAgICAgICAgIHRzLnJlZnMubm90aWZpZXIubm90aWNlKCdlcnJvcicsIFwiRm9ybSB2YWxpZGF0ZSBlcnJvcnMsIHBsZWFzZSBjaGVja2luZyFcIiwgXCJQcmVzc2VkIEVTQyBjYW4gY2FuY2VsXCIpO1xuXHQgICAgICAgICAgICAgICAgLy9jbGVhciBhbmltYXRlIGNsYXNzXG5cdCAgICAgICAgICAgICAgICB0cy50aW1lb3V0ZUNsZWFyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHMuc2V0U3RhdGUoeyBzaGFrZUVkaXRvcjogZmFsc2UgfSk7XG5cdCAgICAgICAgICAgICAgICB9LCAzMDApO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnaGFuZGxlU2F2ZUJ0bkNsaWNrJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2F2ZUJ0bkNsaWNrKGUpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgbmV3T2JqID0gdGhpcy5jaGVja0FuZFBhcnNlRm9ybSgpO1xuXHQgICAgICAgICAgICBpZiAoIW5ld09iaikge1xuXHQgICAgICAgICAgICAgICAgLy92YWxpZGF0ZSBlcnJvcnNcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnByb3BzLm9uQWRkUm93KG5ld09iaikudGhlbihmdW5jdGlvbiAobXNnKSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKG1zZykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJyc7XG5cdCAgICAgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGVycm9yLm1lc3NhZ2UgKyAnLiAnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhleCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gbXNnLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSBfdGhpczI7XG5cdCAgICAgICAgICAgICAgICAgICAgdHMucmVmcy5ub3RpZmllci5ub3RpY2UoJ2Vycm9yJywgbWVzc2FnZSwgXCJQcmVzc2VkIEVTQyBjYW4gY2FuY2VsXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRzLmNsZWFyVGltZW91dCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vc2hha2UgZm9ybSBhbmQgaGFjayBwcmV2ZW50IG1vZGFsIGhpZGVcblx0ICAgICAgICAgICAgICAgICAgICB0cy5zZXRTdGF0ZSh7IHNoYWtlRWRpdG9yOiB0cnVlLCB2YWxpZGF0ZVN0YXRlOiBcInRoaXMgaXMgaGFjayBmb3IgcHJldmVudCBib290c3RyYXAgbW9kYWwgaGlkZVwiIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vY2xlYXIgYW5pbWF0ZSBjbGFzc1xuXHQgICAgICAgICAgICAgICAgICAgIHRzLnRpbWVvdXRlQ2xlYXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHMuc2V0U3RhdGUoeyBzaGFrZUVkaXRvcjogZmFsc2UgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy9yZXNldCBzdGF0ZSBhbmQgaGlkZSBtb2RhbCBoaWRlXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVTdGF0ZTogbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2hha2VFZGl0b3I6IGZhbHNlXG5cdCAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyBcIm1vZGFsXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1baV0uY2xpY2soKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vcmVzZXQgZm9ybVxuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMi5yZWZzLmZvcm0ucmVzZXQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2hhbmRsZURyb3BSb3dCdG5DbGljaycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZURyb3BSb3dCdG5DbGljayhlKSB7XG5cdCAgICAgICAgICAgIHRoaXMucHJvcHMub25Ecm9wUm93KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2hhbmRsZUNsb3NlQnRuJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xvc2VCdG4oZSkge1xuXHQgICAgICAgICAgICB0aGlzLnJlZnMud2FybmluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2hhbmRsZUtleVVwJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5VXAoZSkge1xuXHQgICAgICAgICAgICB0aGlzLnByb3BzLm9uU2VhcmNoKGUuY3VycmVudFRhcmdldC52YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2hhbmRsZUV4cG9ydENTVicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUV4cG9ydENTVigpIHtcblx0ICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkV4cG9ydENTVigpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciBtb2RhbENsYXNzTmFtZSA9IFwiYnMtdGFibGUtbW9kYWwtc21cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHQgICAgICAgICAgICB2YXIgaW5zZXJ0QnRuID0gdGhpcy5wcm9wcy5lbmFibGVJbnNlcnQgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICdidXR0b24nLFxuXHQgICAgICAgICAgICAgICAgeyB0eXBlOiAnYnV0dG9uJywgb25DbGljazogdGhpcy5wcm9wcy5vbkFkZFJvd0JlZ2luLCBjbGFzc05hbWU6ICdidG4gYnRuLWluZm8gcmVhY3QtYnMtdGFibGUtYWRkLWJ0bicsXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdG9nZ2xlJzogJ21vZGFsJywgJ2RhdGEtdGFyZ2V0JzogJy4nICsgbW9kYWxDbGFzc05hbWUgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMnIH0pLFxuXHQgICAgICAgICAgICAgICAgJyBOZXcnXG5cdCAgICAgICAgICAgICkgOiBudWxsO1xuXHRcblx0ICAgICAgICAgICAgdmFyIGRlbGV0ZUJ0biA9IHRoaXMucHJvcHMuZW5hYmxlRGVsZXRlID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnYnV0dG9uJyxcblx0ICAgICAgICAgICAgICAgIHsgdHlwZTogJ2J1dHRvbicsIGNsYXNzTmFtZTogJ2J0biBidG4td2FybmluZyByZWFjdC1icy10YWJsZS1kZWwtYnRuJywgJ2RhdGEtdG9nZ2xlJzogJ3Rvb2x0aXAnLFxuXHQgICAgICAgICAgICAgICAgICAgICdkYXRhLXBsYWNlbWVudCc6ICdyaWdodCcsIHRpdGxlOiAnRHJvcCBzZWxlY3RlZCByb3cnLFxuXHQgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlRHJvcFJvd0J0bkNsaWNrLmJpbmQodGhpcykgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoJyB9KSxcblx0ICAgICAgICAgICAgICAgICcgRGVsZXRlJ1xuXHQgICAgICAgICAgICApIDogbnVsbDtcblx0XG5cdCAgICAgICAgICAgIHZhciBzZWFyY2hUZXh0SW5wdXQgPSB0aGlzLnJlbmRlclNlYXJjaFBhbmVsKCk7XG5cdFxuXHQgICAgICAgICAgICB2YXIgc2hvd1NlbGVjdGVkT25seUJ0biA9IHRoaXMucHJvcHMuZW5hYmxlU2hvd09ubHlTZWxlY3RlZCA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2J1dHRvbicsXG5cdCAgICAgICAgICAgICAgICB7IHR5cGU6ICdidXR0b24nLCBvbkNsaWNrOiB0aGlzLmhhbmRsZVNob3dPbmx5VG9nZ2xlLmJpbmQodGhpcyksIGNsYXNzTmFtZTogJ2J0biBidG4tcHJpbWFyeScsXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdG9nZ2xlJzogJ2J1dHRvbicsICdhcmlhLXByZXNzZWQnOiAnZmFsc2UnIH0sXG5cdCAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNob3dTZWxlY3RlZCA/IF9Db25zdDJbJ2RlZmF1bHQnXS5TSE9XX0FMTCA6IF9Db25zdDJbJ2RlZmF1bHQnXS5TSE9XX09OTFlfU0VMRUNUXG5cdCAgICAgICAgICAgICkgOiBudWxsO1xuXHRcblx0ICAgICAgICAgICAgdmFyIG1vZGFsID0gdGhpcy5wcm9wcy5lbmFibGVJbnNlcnQgPyB0aGlzLnJlbmRlckluc2VydFJvd01vZGFsKG1vZGFsQ2xhc3NOYW1lKSA6IG51bGw7XG5cdCAgICAgICAgICAgIHZhciB3YXJuaW5nU3R5bGUgPSB7XG5cdCAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcblx0ICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMFxuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgdmFyIGV4cG9ydENTViA9IHRoaXMucHJvcHMuZW5hYmxlRXhwb3J0Q1NWID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnYnV0dG9uJyxcblx0ICAgICAgICAgICAgICAgIHsgdHlwZTogJ2J1dHRvbicsIGNsYXNzTmFtZTogJ2J0biBidG4tc3VjY2VzcycsIG9uQ2xpY2s6IHRoaXMuaGFuZGxlRXhwb3J0Q1NWLmJpbmQodGhpcykgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLWV4cG9ydCcgfSksXG5cdCAgICAgICAgICAgICAgICAnIEV4cG9ydCB0byBDU1YnXG5cdCAgICAgICAgICAgICkgOiBudWxsO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1tZC02IGNvbC1sZy04JyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJywgcm9sZTogJ2dyb3VwJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRDU1YsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEJ0bixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQnRuLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzaG93U2VsZWN0ZWRPbmx5QnRuXG5cdCAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1tZC02IGNvbC1sZy00JyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHRJbnB1dFxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9Ob3RpZmljYXRpb25KczJbJ2RlZmF1bHQnXSwgeyByZWY6ICdub3RpZmllcicgfSksXG5cdCAgICAgICAgICAgICAgICBtb2RhbFxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXJTZWFyY2hQYW5lbCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclNlYXJjaFBhbmVsKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5lbmFibGVTZWFyY2gpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gJ2Zvcm0tZ3JvdXAgZm9ybS1ncm91cC1zbSc7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2xlYXJCdG4gPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY2xlYXJTZWFyY2gpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjbGVhckJ0biA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaW5wdXQtZ3JvdXAtYnRuJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdidXR0b24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biBidG4tZGVmYXVsdCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGVhckJ0bkNsaWNrIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ2xlYXInXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMgPSAnZm9ybS1ncm91cCBmb3JtLWdyb3VwLXNtIGlucHV0LWdyb3VwIGlucHV0LWdyb3VwLXNtJztcblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMgfSxcblx0ICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHJlZjogJ3NlYWNoSW5wdXQnLCBjbGFzc05hbWU6ICdmb3JtLWNvbnRyb2wnLCB0eXBlOiAndGV4dCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB0aGlzLnByb3BzLnNlYXJjaFBsYWNlaG9sZGVyID8gdGhpcy5wcm9wcy5zZWFyY2hQbGFjZWhvbGRlciA6ICdTZWFyY2gnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvbktleVVwOiB0aGlzLmhhbmRsZUtleVVwLmJpbmQodGhpcykgfSksXG5cdCAgICAgICAgICAgICAgICAgICAgY2xlYXJCdG5cblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXJJbnNlcnRSb3dNb2RhbCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckluc2VydFJvd01vZGFsKG1vZGFsQ2xhc3NOYW1lKSB7XG5cdCAgICAgICAgICAgIHZhciB2YWxpZGF0ZVN0YXRlID0gdGhpcy5zdGF0ZS52YWxpZGF0ZVN0YXRlIHx8IHt9O1xuXHQgICAgICAgICAgICB2YXIgaW5wdXRGaWVsZCA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbiwgaSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGVkaXRhYmxlID0gY29sdW1uLmVkaXRhYmxlLFxuXHQgICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGNvbHVtbi5mb3JtYXQsXG5cdCAgICAgICAgICAgICAgICAgICAgYXR0ciA9IHsgcmVmOiBjb2x1bW4uZmllbGQgKyBpLCBwbGFjZWhvbGRlcjogZWRpdGFibGUucGxhY2Vob2xkZXIgPyBlZGl0YWJsZS5wbGFjZWhvbGRlciA6IGNvbHVtbi5uYW1lIH07XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5hdXRvVmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvL3doZW4geW91IHdhbnQgc2FtZSBhdXRvIGdlbmVyYXRlIHZhbHVlIGFuZCBub3QgYWxsb3cgZWRpdCwgZXhhbXBsZSBJRCBmaWVsZFxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdmFsaWRhdGVTdGF0ZVtjb2x1bW4uZmllbGRdID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaGVscC1ibG9jayBiZy1kYW5nZXInIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVTdGF0ZVtjb2x1bW4uZmllbGRdXG5cdCAgICAgICAgICAgICAgICApIDogbnVsbDtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBsZXQgZWRpdG9yID0gRWRpdG9yKGVkaXRhYmxlLGF0dHIsZm9ybWF0KTtcblx0ICAgICAgICAgICAgICAgIC8vIGlmKGVkaXRvci5wcm9wcy50eXBlICYmIGVkaXRvci5wcm9wcy50eXBlID09ICdjaGVja2JveCcpe1xuXHQgICAgICAgICAgICAgICAgdmFyIHN0eWxlID0geyBkaXNwbGF5OiBjb2x1bW4uaGlkZGVuSW5Qb3B1cCA/ICdub25lJyA6ICdibG9jaycgfTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Zvcm0tZ3JvdXAnLCBrZXk6IGNvbHVtbi5maWVsZCwgc3R5bGU6IHN0eWxlIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5uYW1lXG5cdCAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICAoMCwgX0VkaXRvcjJbJ2RlZmF1bHQnXSkoZWRpdGFibGUsIGF0dHIsIGZvcm1hdCwgJycpLFxuXHQgICAgICAgICAgICAgICAgICAgIGVycm9yXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgdmFyIG1vZGFsQ2xhc3MgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKFwibW9kYWxcIiwgXCJmYWRlXCIsIG1vZGFsQ2xhc3NOYW1lLCB7XG5cdCAgICAgICAgICAgICAgICAnaW4nOiB0aGlzLnN0YXRlLnNoYWtlRWRpdG9yIHx8IHRoaXMuc3RhdGUudmFsaWRhdGVTdGF0ZSAvL2hhY2sgcHJldmVudCBib290c3RyYXAgbW9kYWwgaGlkZSBieSByZVJlbmRlclxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgdmFyIGRpYWxvZ0NsYXNzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKShcIm1vZGFsLWRpYWxvZ1wiLCBcIm1vZGFsLXNtXCIsIHtcblx0ICAgICAgICAgICAgICAgIFwiYW5pbWF0ZWRcIjogdGhpcy5zdGF0ZS5zaGFrZUVkaXRvcixcblx0ICAgICAgICAgICAgICAgIFwic2hha2VcIjogdGhpcy5zdGF0ZS5zaGFrZUVkaXRvclxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICB7IHJlZjogJ21vZGFsJywgY2xhc3NOYW1lOiBtb2RhbENsYXNzLCB0YWJJbmRleDogJy0xJywgcm9sZTogJ2RpYWxvZycgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBkaWFsb2dDbGFzcyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdtb2RhbC1jb250ZW50JyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdtb2RhbC1oZWFkZXInIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICdidXR0b24nLCBjbGFzc05hbWU6ICdjbG9zZScsICdkYXRhLWRpc21pc3MnOiAnbW9kYWwnLCAnYXJpYS1sYWJlbCc6ICdDbG9zZScgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ8OXJ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaDQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbW9kYWwtdGl0bGUnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05ldyBSZWNvcmQnXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ21vZGFsLWJvZHknIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdmb3JtJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RmllbGRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbW9kYWwtZm9vdGVyJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J1dHRvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnYnV0dG9uJywgY2xhc3NOYW1lOiAnYnRuIGJ0bi1kZWZhdWx0JywgJ2RhdGEtZGlzbWlzcyc6ICdtb2RhbCcgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ2xvc2UnXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J1dHRvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnYnV0dG9uJywgY2xhc3NOYW1lOiAnYnRuIGJ0bi1zdWNjZXNzJywgb25DbGljazogdGhpcy5oYW5kbGVTYXZlQnRuQ2xpY2suYmluZCh0aGlzKSB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTYXZlJ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gVG9vbEJhcjtcblx0fSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cdFxuXHRUb29sQmFyLnByb3BUeXBlcyA9IHtcblx0ICAgIG9uQWRkUm93OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsXG5cdCAgICBvbkRyb3BSb3c6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYyxcblx0ICAgIG9uU2hvd09ubHlTZWxlY3RlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLFxuXHQgICAgZW5hYmxlSW5zZXJ0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsXG5cdCAgICBlbmFibGVEZWxldGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCxcblx0ICAgIGVuYWJsZVNlYXJjaDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgICAgZW5hYmxlU2hvd09ubHlTZWxlY3RlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHQgICAgY29sdW1uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSxcblx0ICAgIHNlYXJjaFBsYWNlaG9sZGVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZyxcblx0ICAgIGNsZWFyU2VhcmNoOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2xcblx0fTtcblx0XG5cdFRvb2xCYXIuZGVmYXVsdFByb3BzID0ge1xuXHQgICAgZW5hYmxlSW5zZXJ0OiBmYWxzZSxcblx0ICAgIGVuYWJsZURlbGV0ZTogZmFsc2UsXG5cdCAgICBlbmFibGVTZWFyY2g6IGZhbHNlLFxuXHQgICAgZW5hYmxlU2hvd09ubHlTZWxlY3RlZDogZmFsc2UsXG5cdCAgICBjbGVhclNlYXJjaDogZmFsc2Vcblx0fTtcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gVG9vbEJhcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNikoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucmMtc3dpdGNoe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDo0NHB4O2hlaWdodDoyMnB4O2xpbmUtaGVpZ2h0OjIwcHg7dmVydGljYWwtYWxpZ246bWlkZGxlO2JvcmRlci1yYWRpdXM6MjBweCAyMHB4O2JvcmRlcjoxcHggc29saWQgI2NjYztiYWNrZ3JvdW5kLWNvbG9yOiNjY2M7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjphbGwgLjNzIGN1YmljLWJlemllciguMzUsMCwuMjUsMSl9LnJjLXN3aXRjaC1pbm5lcntjb2xvcjojZmZmO2ZvbnQtc2l6ZToxMnB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MjRweH0ucmMtc3dpdGNoOmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7bGVmdDoycHg7dG9wOjFweDtib3JkZXItcmFkaXVzOjUwJSA1MCU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbnRlbnQ6XFxcIiBcXFwiO2N1cnNvcjpwb2ludGVyO2JveC1zaGFkb3c6MCAycHggNXB4IHJnYmEoMCwwLDAsLjI2KTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNpdGlvbjpsZWZ0IC4zcyBjdWJpYy1iZXppZXIoLjM1LDAsLjI1LDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjM1LDAsLjI1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4zNSwwLC4yNSwxKTstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouM3M7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJjU3dpdGNoT2ZmO2FuaW1hdGlvbi1uYW1lOnJjU3dpdGNoT2ZmfS5yYy1zd2l0Y2g6aG92ZXI6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKTstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJjU3dpdGNoT247YW5pbWF0aW9uLW5hbWU6cmNTd2l0Y2hPbn0ucmMtc3dpdGNoLWNoZWNrZWR7Ym9yZGVyOjFweCBzb2xpZCAjODdkMDY4O2JhY2tncm91bmQtY29sb3I6Izg3ZDA2OH0ucmMtc3dpdGNoLWNoZWNrZWQgLnJjLXN3aXRjaC1pbm5lcntsZWZ0OjZweH0ucmMtc3dpdGNoLWNoZWNrZWQ6YWZ0ZXJ7bGVmdDoyMnB4fS5yYy1zd2l0Y2gtZGlzYWJsZWR7Y3Vyc29yOm5vLWRyb3A7YmFja2dyb3VuZDojY2NjO2JvcmRlci1jb2xvcjojY2NjfS5yYy1zd2l0Y2gtZGlzYWJsZWQ6YWZ0ZXJ7YmFja2dyb3VuZDojOWU5ZTllOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6bm9uZTthbmltYXRpb24tbmFtZTpub25lO2N1cnNvcjpuby1kcm9wfS5yYy1zd2l0Y2gtZGlzYWJsZWQ6aG92ZXI6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6bm9uZTthbmltYXRpb24tbmFtZTpub25lfS5yYy1zd2l0Y2gtbGFiZWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7bGluZS1oZWlnaHQ6MjBweDtmb250LXNpemU6MTRweDtwYWRkaW5nLWxlZnQ6MTBweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7d2hpdGUtc3BhY2U6bm9ybWFsO3BvaW50ZXItZXZlbnRzOm5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0Oy1tb3otdXNlci1zZWxlY3Q6dGV4dDstbXMtdXNlci1zZWxlY3Q6dGV4dDt1c2VyLXNlbGVjdDp0ZXh0fUAtd2Via2l0LWtleWZyYW1lcyByY1N3aXRjaE9uezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4yNSk7dHJhbnNmb3JtOnNjYWxlKDEuMjUpfXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSk7dHJhbnNmb3JtOnNjYWxlKDEuMSl9fUBrZXlmcmFtZXMgcmNTd2l0Y2hPbnswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMjUpO3RyYW5zZm9ybTpzY2FsZSgxLjI1KX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgcmNTd2l0Y2hPZmZ7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fUBrZXlmcmFtZXMgcmNTd2l0Y2hPZmZ7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcbi8qIDM2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKlxyXG5cdFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRcdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuXHQqL1xyXG5cdC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBsaXN0ID0gW107XHJcblx0XHJcblx0XHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0XHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0XHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRyZXR1cm4gbGlzdDtcclxuXHR9O1xyXG5cblxuLyoqKi8gfSxcbi8qIDM3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXHRcblx0dmFyIFJlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIGNsYXNzTmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0ZnVuY3Rpb24gbm9vcCgpIHt9XG5cdFxuXHR2YXIgU3dpdGNoID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnU3dpdGNoJyxcblx0XG5cdCAgcHJvcFR5cGVzOiB7XG5cdCAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBwcmVmaXhDbHM6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBkaXNhYmxlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cdCAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0ICAgIGNoZWNrZWRDaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLmFueSxcblx0ICAgIHVuQ2hlY2tlZENoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMuYW55LFxuXHQgICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG5cdCAgfSxcblx0ICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHByZWZpeENsczogJ3JjLXN3aXRjaCcsXG5cdCAgICAgIHN0eWxlOiB7fSxcblx0ICAgICAgY2hlY2tlZENoaWxkcmVuOiBudWxsLFxuXHQgICAgICB1bkNoZWNrZWRDaGlsZHJlbjogbnVsbCxcblx0ICAgICAgY2xhc3NOYW1lOiAnJyxcblx0ICAgICAgZGVmYXVsdENoZWNrZWQ6IGZhbHNlLFxuXHQgICAgICBvbkNoYW5nZTogbm9vcFxuXHQgICAgfTtcblx0ICB9LFxuXHQgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHQgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciBjaGVja2VkID0gZmFsc2U7XG5cdCAgICBpZiAoJ2NoZWNrZWQnIGluIHByb3BzKSB7XG5cdCAgICAgIGNoZWNrZWQgPSAhIXByb3BzLmNoZWNrZWQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBjaGVja2VkID0gISFwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcblx0ICAgIH1cblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGNoZWNrZWQ6IGNoZWNrZWRcblx0ICAgIH07XG5cdCAgfSxcblx0ICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHQgICAgaWYgKCdjaGVja2VkJyBpbiBuZXh0UHJvcHMpIHtcblx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgY2hlY2tlZDogISFuZXh0UHJvcHMuY2hlY2tlZFxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKCkge1xuXHQgICAgdmFyIGNoZWNrZWQgPSAhdGhpcy5zdGF0ZS5jaGVja2VkO1xuXHQgICAgaWYgKCEoJ2NoZWNrZWQnIGluIHRoaXMucHJvcHMpKSB7XG5cdCAgICAgIHRoaXMuc2V0U3RhdGUoe1xuXHQgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWRcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNoZWNrZWQpO1xuXHQgIH0sXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICB2YXIgX2NsYXNzTmFtZXM7XG5cdFxuXHQgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdCAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcblx0ICAgIHZhciBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzO1xuXHQgICAgdmFyIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkO1xuXHQgICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXHQgICAgdmFyIGNoZWNrZWRDaGlsZHJlbiA9IF9wcm9wcy5jaGVja2VkQ2hpbGRyZW47XG5cdCAgICB2YXIgdW5DaGVja2VkQ2hpbGRyZW4gPSBfcHJvcHMudW5DaGVja2VkQ2hpbGRyZW47XG5cdFxuXHQgICAgdmFyIGNoZWNrZWQgPSB0aGlzLnN0YXRlLmNoZWNrZWQ7XG5cdCAgICB2YXIgc3dpdGNoQ2xhc3NOYW1lID0gY2xhc3NOYW1lcygoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBjbGFzc05hbWUsICEhY2xhc3NOYW1lKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBwcmVmaXhDbHMsIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscyArICctY2hlY2tlZCcsIGNoZWNrZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscyArICctZGlzYWJsZWQnLCBkaXNhYmxlZCksIF9jbGFzc05hbWVzKSk7XG5cdCAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0ICAgICAgJ3NwYW4nLFxuXHQgICAgICB7IGNsYXNzTmFtZTogc3dpdGNoQ2xhc3NOYW1lLFxuXHQgICAgICAgIG9uQ2xpY2s6IGRpc2FibGVkID8gbm9vcCA6IHRoaXMudG9nZ2xlLFxuXHQgICAgICAgIHN0eWxlOiBzdHlsZSB9LFxuXHQgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdzcGFuJyxcblx0ICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1pbm5lcicgfSxcblx0ICAgICAgICBjaGVja2VkID8gY2hlY2tlZENoaWxkcmVuIDogdW5DaGVja2VkQ2hpbGRyZW5cblx0ICAgICAgKVxuXHQgICAgKTtcblx0ICB9XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTd2l0Y2g7XG5cbi8qKiovIH0sXG4vKiAzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX1NlbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9TZWxlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2VsZWN0KTtcblx0XG5cdHZhciBfdXRpbHNTdHJpcERpYWNyaXRpY3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0XG5cdHZhciBfdXRpbHNTdHJpcERpYWNyaXRpY3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNTdHJpcERpYWNyaXRpY3MpO1xuXHRcblx0dmFyIHJlcXVlc3RJZCA9IDA7XG5cdFxuXHRmdW5jdGlvbiBpbml0Q2FjaGUoY2FjaGUpIHtcblx0XHRpZiAoY2FjaGUgJiYgdHlwZW9mIGNhY2hlICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0Y2FjaGUgPSB7fTtcblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlID8gY2FjaGUgOiBudWxsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVDYWNoZShjYWNoZSwgaW5wdXQsIGRhdGEpIHtcblx0XHRpZiAoIWNhY2hlKSByZXR1cm47XG5cdFx0Y2FjaGVbaW5wdXRdID0gZGF0YTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0RnJvbUNhY2hlKGNhY2hlLCBpbnB1dCkge1xuXHRcdGlmICghY2FjaGUpIHJldHVybjtcblx0XHRmb3IgKHZhciBpID0gaW5wdXQubGVuZ3RoOyBpID49IDA7IC0taSkge1xuXHRcdFx0dmFyIGNhY2hlS2V5ID0gaW5wdXQuc2xpY2UoMCwgaSk7XG5cdFx0XHRpZiAoY2FjaGVbY2FjaGVLZXldICYmIChpbnB1dCA9PT0gY2FjaGVLZXkgfHwgY2FjaGVbY2FjaGVLZXldLmNvbXBsZXRlKSkge1xuXHRcdFx0XHRyZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gdGhlblByb21pc2UocHJvbWlzZSwgY2FsbGJhY2spIHtcblx0XHRpZiAoIXByb21pc2UgfHwgdHlwZW9mIHByb21pc2UudGhlbiAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXHRcdHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuXHRcdH0sIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdGNhbGxiYWNrKGVycik7XG5cdFx0fSk7XG5cdH1cblx0XG5cdHZhciBzdHJpbmdPck5vZGUgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9uZU9mVHlwZShbX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubm9kZV0pO1xuXHRcblx0dmFyIEFzeW5jID0gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUNsYXNzKHtcblx0XHRkaXNwbGF5TmFtZTogJ0FzeW5jJyxcblx0XG5cdFx0cHJvcFR5cGVzOiB7XG5cdFx0XHRjYWNoZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hbnksIC8vIG9iamVjdCB0byB1c2UgdG8gY2FjaGUgcmVzdWx0cywgY2FuIGJlIG51bGwgdG8gZGlzYWJsZSBjYWNoZVxuXHRcdFx0aWdub3JlQWNjZW50czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRvIHN0cmlwIGRpYWNyaXRpY3Mgd2hlbiBmaWx0ZXJpbmcgKHNoYXJlZCB3aXRoIFNlbGVjdClcblx0XHRcdGlnbm9yZUNhc2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBwZXJmb3JtIGNhc2UtaW5zZW5zaXRpdmUgZmlsdGVyaW5nIChzaGFyZWQgd2l0aCBTZWxlY3QpXG5cdFx0XHRpc0xvYWRpbmc6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gb3ZlcnJpZGVzIHRoZSBpc0xvYWRpbmcgc3RhdGUgd2hlbiBzZXQgdG8gdHJ1ZVxuXHRcdFx0bG9hZE9wdGlvbnM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCAvLyBmdW5jdGlvbiB0byBjYWxsIHRvIGxvYWQgb3B0aW9ucyBhc3luY2hyb25vdXNseVxuXHRcdFx0bG9hZGluZ1BsYWNlaG9sZGVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gcmVwbGFjZXMgdGhlIHBsYWNlaG9sZGVyIHdoaWxlIG9wdGlvbnMgYXJlIGxvYWRpbmdcblx0XHRcdG1pbmltdW1JbnB1dDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsIC8vIHRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgdHJpZ2dlciBsb2FkT3B0aW9uc1xuXHRcdFx0bm9SZXN1bHRzVGV4dDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBzZWFyY2ggcmVzdWx0cyAoc2hhcmVkIHdpdGggU2VsZWN0KVxuXHRcdFx0cGxhY2Vob2xkZXI6IHN0cmluZ09yTm9kZSwgLy8gZmllbGQgcGxhY2Vob2xkZXIsIGRpc3BsYXllZCB3aGVuIHRoZXJlJ3Mgbm8gdmFsdWUgKHNoYXJlZCB3aXRoIFNlbGVjdClcblx0XHRcdHNlYXJjaFByb21wdFRleHQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBsYWJlbCB0byBwcm9tcHQgZm9yIHNlYXJjaCBpbnB1dFxuXHRcdFx0c2VhcmNoaW5nVGV4dDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcgfSxcblx0XHQvLyBtZXNzYWdlIHRvIGRpc3BsYXkgd2hpbGUgb3B0aW9ucyBhcmUgbG9hZGluZ1xuXHRcdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2FjaGU6IHRydWUsXG5cdFx0XHRcdGlnbm9yZUFjY2VudHM6IHRydWUsXG5cdFx0XHRcdGlnbm9yZUNhc2U6IHRydWUsXG5cdFx0XHRcdGxvYWRpbmdQbGFjZWhvbGRlcjogJ0xvYWRpbmcuLi4nLFxuXHRcdFx0XHRtaW5pbXVtSW5wdXQ6IDAsXG5cdFx0XHRcdHNlYXJjaGluZ1RleHQ6ICdTZWFyY2hpbmcuLi4nLFxuXHRcdFx0XHRzZWFyY2hQcm9tcHRUZXh0OiAnVHlwZSB0byBzZWFyY2gnXG5cdFx0XHR9O1xuXHRcdH0sXG5cdFx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjYWNoZTogaW5pdENhY2hlKHRoaXMucHJvcHMuY2FjaGUpLFxuXHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRvcHRpb25zOiBbXVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuXHRcdFx0dGhpcy5fbGFzdElucHV0ID0gJyc7XG5cdFx0fSxcblx0XHRjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0XHR0aGlzLmxvYWRPcHRpb25zKCcnKTtcblx0XHR9LFxuXHRcdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG5cdFx0XHRpZiAobmV4dFByb3BzLmNhY2hlICE9PSB0aGlzLnByb3BzLmNhY2hlKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGNhY2hlOiBpbml0Q2FjaGUobmV4dFByb3BzLmNhY2hlKVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHRcdHRoaXMucmVmcy5zZWxlY3QuZm9jdXMoKTtcblx0XHR9LFxuXHRcdHJlc2V0U3RhdGU6IGZ1bmN0aW9uIHJlc2V0U3RhdGUoKSB7XG5cdFx0XHR0aGlzLl9jdXJyZW50UmVxdWVzdElkID0gLTE7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdFx0b3B0aW9uczogW11cblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0Z2V0UmVzcG9uc2VIYW5kbGVyOiBmdW5jdGlvbiBnZXRSZXNwb25zZUhhbmRsZXIoaW5wdXQpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHRcdFx0dmFyIF9yZXF1ZXN0SWQgPSB0aGlzLl9jdXJyZW50UmVxdWVzdElkID0gcmVxdWVzdElkKys7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHRcdFx0XHRpZiAoZXJyKSB0aHJvdyBlcnI7XG5cdFx0XHRcdGlmICghX3RoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcblx0XHRcdFx0dXBkYXRlQ2FjaGUoX3RoaXMuc3RhdGUuY2FjaGUsIGlucHV0LCBkYXRhKTtcblx0XHRcdFx0aWYgKF9yZXF1ZXN0SWQgIT09IF90aGlzLl9jdXJyZW50UmVxdWVzdElkKSByZXR1cm47XG5cdFx0XHRcdF90aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRcdG9wdGlvbnM6IGRhdGEgJiYgZGF0YS5vcHRpb25zIHx8IFtdXG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGxvYWRPcHRpb25zOiBmdW5jdGlvbiBsb2FkT3B0aW9ucyhpbnB1dCkge1xuXHRcdFx0aWYgKHRoaXMucHJvcHMuaWdub3JlQWNjZW50cykgaW5wdXQgPSAoMCwgX3V0aWxzU3RyaXBEaWFjcml0aWNzMlsnZGVmYXVsdCddKShpbnB1dCk7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5pZ25vcmVDYXNlKSBpbnB1dCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG5cdFx0XHR0aGlzLl9sYXN0SW5wdXQgPSBpbnB1dDtcblx0XHRcdGlmIChpbnB1dC5sZW5ndGggPCB0aGlzLnByb3BzLm1pbmltdW1JbnB1dCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5yZXNldFN0YXRlKCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY2FjaGVSZXN1bHQgPSBnZXRGcm9tQ2FjaGUodGhpcy5zdGF0ZS5jYWNoZSwgaW5wdXQpO1xuXHRcdFx0aWYgKGNhY2hlUmVzdWx0KSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRvcHRpb25zOiBjYWNoZVJlc3VsdC5vcHRpb25zXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzTG9hZGluZzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0XHR2YXIgcmVzcG9uc2VIYW5kbGVyID0gdGhpcy5nZXRSZXNwb25zZUhhbmRsZXIoaW5wdXQpO1xuXHRcdFx0cmV0dXJuIHRoZW5Qcm9taXNlKHRoaXMucHJvcHMubG9hZE9wdGlvbnMoaW5wdXQsIHJlc3BvbnNlSGFuZGxlciksIHJlc3BvbnNlSGFuZGxlcik7XG5cdFx0fSxcblx0XHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHRcdHZhciBub1Jlc3VsdHNUZXh0ID0gdGhpcy5wcm9wcy5ub1Jlc3VsdHNUZXh0O1xuXHRcdFx0dmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGU7XG5cdFx0XHR2YXIgaXNMb2FkaW5nID0gX3N0YXRlLmlzTG9hZGluZztcblx0XHRcdHZhciBvcHRpb25zID0gX3N0YXRlLm9wdGlvbnM7XG5cdFxuXHRcdFx0aWYgKHRoaXMucHJvcHMuaXNMb2FkaW5nKSBpc0xvYWRpbmcgPSB0cnVlO1xuXHRcdFx0dmFyIHBsYWNlaG9sZGVyID0gaXNMb2FkaW5nID8gdGhpcy5wcm9wcy5sb2FkaW5nUGxhY2Vob2xkZXIgOiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyO1xuXHRcdFx0aWYgKCFvcHRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5fbGFzdElucHV0Lmxlbmd0aCA8IHRoaXMucHJvcHMubWluaW11bUlucHV0KSBub1Jlc3VsdHNUZXh0ID0gdGhpcy5wcm9wcy5zZWFyY2hQcm9tcHRUZXh0O1xuXHRcdFx0XHRpZiAoaXNMb2FkaW5nKSBub1Jlc3VsdHNUZXh0ID0gdGhpcy5wcm9wcy5zZWFyY2hpbmdUZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9TZWxlY3QyWydkZWZhdWx0J10sIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG5cdFx0XHRcdHJlZjogJ3NlbGVjdCcsXG5cdFx0XHRcdGlzTG9hZGluZzogaXNMb2FkaW5nLFxuXHRcdFx0XHRub1Jlc3VsdHNUZXh0OiBub1Jlc3VsdHNUZXh0LFxuXHRcdFx0XHRvbklucHV0Q2hhbmdlOiB0aGlzLmxvYWRPcHRpb25zLFxuXHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0XHRwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXJcblx0XHRcdH0pKTtcblx0XHR9XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBBc3luYztcblxuLyoqKi8gfSxcbi8qIDM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdHZhciBPcHRpb24gPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlQ2xhc3Moe1xuXHRcdGRpc3BsYXlOYW1lOiAnT3B0aW9uJyxcblx0XG5cdFx0cHJvcFR5cGVzOiB7XG5cdFx0XHRjaGlsZHJlbjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ub2RlLFxuXHRcdFx0Y2xhc3NOYW1lOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gY2xhc3NOYW1lIChiYXNlZCBvbiBtb3VzZSBwb3NpdGlvbilcblx0XHRcdGlzRGlzYWJsZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gdGhlIG9wdGlvbiBpcyBkaXNhYmxlZFxuXHRcdFx0aXNGb2N1c2VkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHRoZSBvcHRpb24gaXMgZm9jdXNlZFxuXHRcdFx0aXNTZWxlY3RlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB0aGUgb3B0aW9uIGlzIHNlbGVjdGVkXG5cdFx0XHRvbkZvY3VzOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgbW91c2VFbnRlciBvbiBvcHRpb24gZWxlbWVudFxuXHRcdFx0b25TZWxlY3Q6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBjbGljayBvbiBvcHRpb24gZWxlbWVudFxuXHRcdFx0b25VbmZvY3VzOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgbW91c2VMZWF2ZSBvbiBvcHRpb24gZWxlbWVudFxuXHRcdFx0b3B0aW9uOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkIH0sXG5cdFx0Ly8gb2JqZWN0IHRoYXQgaXMgYmFzZSBmb3IgdGhhdCBvcHRpb25cblx0XHRibG9ja0V2ZW50OiBmdW5jdGlvbiBibG9ja0V2ZW50KGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdBJyB8fCAhKCdocmVmJyBpbiBldmVudC50YXJnZXQpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmIChldmVudC50YXJnZXQudGFyZ2V0KSB7XG5cdFx0XHRcdHdpbmRvdy5vcGVuKGV2ZW50LnRhcmdldC5ocmVmLCBldmVudC50YXJnZXQudGFyZ2V0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZXZlbnQudGFyZ2V0LmhyZWY7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdHRoaXMucHJvcHMub25TZWxlY3QodGhpcy5wcm9wcy5vcHRpb24sIGV2ZW50KTtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKGV2ZW50KSB7XG5cdFx0XHR0aGlzLm9uRm9jdXMoZXZlbnQpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZU1vdXNlTW92ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGV2ZW50KSB7XG5cdFx0XHR0aGlzLm9uRm9jdXMoZXZlbnQpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChldmVudCkge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0XHQvLyB3ZSBkb24ndCB3YW50IHRvIGZpcmUgdGhlIGNsaWNrIGV2ZW50IChiZWNhdXNlIHRoZSB1c2VyIG9ubHkgd2FudHMgdG8gc2Nyb2xsKVxuXHRcdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblx0XG5cdFx0XHR0aGlzLmhhbmRsZU1vdXNlRG93bihldmVudCk7XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlVG91Y2hNb3ZlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZXZlbnQpIHtcblx0XHRcdC8vIFNldCBhIGZsYWcgdGhhdCB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkXG5cdFx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG5cdFx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgbm90IGJlaW5nIGRyYWdnZWRcblx0XHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblx0XHR9LFxuXHRcblx0XHRvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKGV2ZW50KSB7XG5cdFx0XHRpZiAoIXRoaXMucHJvcHMuaXNGb2N1c2VkKSB7XG5cdFx0XHRcdHRoaXMucHJvcHMub25Gb2N1cyh0aGlzLnByb3BzLm9wdGlvbiwgZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgb3B0aW9uID0gdGhpcy5wcm9wcy5vcHRpb247XG5cdFxuXHRcdFx0dmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkodGhpcy5wcm9wcy5jbGFzc05hbWUsIG9wdGlvbi5jbGFzc05hbWUpO1xuXHRcblx0XHRcdHJldHVybiBvcHRpb24uZGlzYWJsZWQgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG5cdFx0XHRcdFx0b25Nb3VzZURvd246IHRoaXMuYmxvY2tFdmVudCxcblx0XHRcdFx0XHRvbkNsaWNrOiB0aGlzLmJsb2NrRXZlbnQgfSxcblx0XHRcdFx0dGhpcy5wcm9wcy5jaGlsZHJlblxuXHRcdFx0KSA6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdFx0XHRzdHlsZTogb3B0aW9uLnN0eWxlLFxuXHRcdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcblx0XHRcdFx0XHRvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcblx0XHRcdFx0XHRvbk1vdXNlTW92ZTogdGhpcy5oYW5kbGVNb3VzZU1vdmUsXG5cdFx0XHRcdFx0b25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG5cdFx0XHRcdFx0b25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlLFxuXHRcdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG5cdFx0XHRcdFx0dGl0bGU6IG9wdGlvbi50aXRsZSB9LFxuXHRcdFx0XHR0aGlzLnByb3BzLmNoaWxkcmVuXG5cdFx0XHQpO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IE9wdGlvbjtcblxuLyoqKi8gfSxcbi8qIDQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdHZhciBWYWx1ZSA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVDbGFzcyh7XG5cdFxuXHRcdGRpc3BsYXlOYW1lOiAnVmFsdWUnLFxuXHRcblx0XHRwcm9wVHlwZXM6IHtcblx0XHRcdGNoaWxkcmVuOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm5vZGUsXG5cdFx0XHRkaXNhYmxlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyBkaXNhYmxlZCBwcm9wIHBhc3NlZCB0byBSZWFjdFNlbGVjdFxuXHRcdFx0b25DbGljazogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIGNsaWNrIG9uIHZhbHVlIGxhYmVsXG5cdFx0XHRvblJlbW92ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIHJlbW92YWwgb2YgdGhlIHZhbHVlXG5cdFx0XHR2YWx1ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCB9LFxuXHRcblx0XHQvLyB0aGUgb3B0aW9uIG9iamVjdCBmb3IgdGhpcyB2YWx1ZVxuXHRcdGhhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG5cdFx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHtcblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLnZhbHVlLCBldmVudCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnByb3BzLnZhbHVlLmhyZWYpIHtcblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0b25SZW1vdmU6IGZ1bmN0aW9uIG9uUmVtb3ZlKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR0aGlzLnByb3BzLm9uUmVtb3ZlKHRoaXMucHJvcHMudmFsdWUpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVRvdWNoRW5kUmVtb3ZlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZFJlbW92ZShldmVudCkge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0XHQvLyB3ZSBkb24ndCB3YW50IHRvIGZpcmUgdGhlIGNsaWNrIGV2ZW50IChiZWNhdXNlIHRoZSB1c2VyIG9ubHkgd2FudHMgdG8gc2Nyb2xsKVxuXHRcdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblx0XG5cdFx0XHQvLyBGaXJlIHRoZSBtb3VzZSBldmVudHNcblx0XHRcdHRoaXMub25SZW1vdmUoZXZlbnQpO1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZFxuXHRcdFx0dGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cdFx0fSxcblx0XG5cdFx0aGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldmVudCkge1xuXHRcdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIG5vdCBiZWluZyBkcmFnZ2VkXG5cdFx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cdFx0fSxcblx0XG5cdFx0cmVuZGVyUmVtb3ZlSWNvbjogZnVuY3Rpb24gcmVuZGVyUmVtb3ZlSWNvbigpIHtcblx0XHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8ICF0aGlzLnByb3BzLm9uUmVtb3ZlKSByZXR1cm47XG5cdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdzcGFuJyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtdmFsdWUtaWNvbicsXG5cdFx0XHRcdFx0b25Nb3VzZURvd246IHRoaXMub25SZW1vdmUsXG5cdFx0XHRcdFx0b25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZFJlbW92ZSxcblx0XHRcdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdFx0XHRvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUgfSxcblx0XHRcdFx0J8OXJ1xuXHRcdFx0KTtcblx0XHR9LFxuXHRcblx0XHRyZW5kZXJMYWJlbDogZnVuY3Rpb24gcmVuZGVyTGFiZWwoKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lID0gJ1NlbGVjdC12YWx1ZS1sYWJlbCc7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrIHx8IHRoaXMucHJvcHMudmFsdWUuaHJlZiA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnYScsXG5cdFx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIGhyZWY6IHRoaXMucHJvcHMudmFsdWUuaHJlZiwgdGFyZ2V0OiB0aGlzLnByb3BzLnZhbHVlLnRhcmdldCwgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLCBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZU1vdXNlRG93biB9LFxuXHRcdFx0XHR0aGlzLnByb3BzLmNoaWxkcmVuXG5cdFx0XHQpIDogX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdzcGFuJyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzTmFtZSB9LFxuXHRcdFx0XHR0aGlzLnByb3BzLmNoaWxkcmVuXG5cdFx0XHQpO1xuXHRcdH0sXG5cdFxuXHRcdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NlbGVjdC12YWx1ZScsIHRoaXMucHJvcHMudmFsdWUuY2xhc3NOYW1lKSxcblx0XHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy52YWx1ZS5zdHlsZSxcblx0XHRcdFx0XHR0aXRsZTogdGhpcy5wcm9wcy52YWx1ZS50aXRsZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGlzLnJlbmRlclJlbW92ZUljb24oKSxcblx0XHRcdFx0dGhpcy5yZW5kZXJMYWJlbCgpXG5cdFx0XHQpO1xuXHRcdH1cblx0XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBWYWx1ZTtcblxuLyoqKi8gfSxcbi8qIDQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXHRcblx0dmFyIFJlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBzaXplclN0eWxlID0geyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdmlzaWJpbGl0eTogJ2hpZGRlbicsIGhlaWdodDogMCwgd2lkdGg6IDAsIG92ZXJmbG93OiAnc2Nyb2xsJywgd2hpdGVTcGFjZTogJ25vd3JhcCcgfTtcblx0XG5cdHZhciBuZXh0RnJhbWUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IChmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG5cdFx0fTtcblx0fSkoKS5iaW5kKHdpbmRvdykgOiB1bmRlZmluZWQ7IC8vIElmIHdpbmRvdyBpcyB1bmRlZmluZWQsIHRoZW4gd2UgY2FuJ3QgZGVmaW5lIGEgbmV4dEZyYW1lIGZ1bmN0aW9uXG5cdFxuXHR2YXIgQXV0b3NpemVJbnB1dCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0XHRkaXNwbGF5TmFtZTogJ0F1dG9zaXplSW5wdXQnLFxuXHRcblx0XHRwcm9wVHlwZXM6IHtcblx0XHRcdHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuYW55LCAvLyBmaWVsZCB2YWx1ZVxuXHRcdFx0ZGVmYXVsdFZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuYW55LCAvLyBkZWZhdWx0IGZpZWxkIHZhbHVlXG5cdFx0XHRvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQ2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7fVxuXHRcdFx0c3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdFx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIGNsYXNzTmFtZSBmb3IgdGhlIG91dGVyIGVsZW1lbnRcblx0XHRcdG1pbldpZHRoOiBSZWFjdC5Qcm9wVHlwZXMub25lT2ZUeXBlKFsvLyBtaW5pbXVtIHdpZHRoIGZvciBpbnB1dCBlbGVtZW50XG5cdFx0XHRSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLCBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXSksXG5cdFx0XHRpbnB1dFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuXHRcdFx0aW5wdXRDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcgLy8gY2xhc3NOYW1lIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuXHRcdH0sXG5cdFx0Z2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRtaW5XaWR0aDogMVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0aW5wdXRXaWR0aDogdGhpcy5wcm9wcy5taW5XaWR0aFxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRcdHRoaXMuY29weUlucHV0U3R5bGVzKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcblx0XHR9LFxuXHRcdGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuXHRcdFx0dGhpcy5xdWV1ZVVwZGF0ZUlucHV0V2lkdGgoKTtcblx0XHR9LFxuXHRcdGNvcHlJbnB1dFN0eWxlczogZnVuY3Rpb24gY29weUlucHV0U3R5bGVzKCkge1xuXHRcdFx0aWYgKCF0aGlzLmlzTW91bnRlZCgpIHx8ICF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgaW5wdXRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMucmVmcy5pbnB1dCk7XG5cdFx0XHR2YXIgd2lkdGhOb2RlID0gdGhpcy5yZWZzLnNpemVyO1xuXHRcdFx0d2lkdGhOb2RlLnN0eWxlLmZvbnRTaXplID0gaW5wdXRTdHlsZS5mb250U2l6ZTtcblx0XHRcdHdpZHRoTm9kZS5zdHlsZS5mb250RmFtaWx5ID0gaW5wdXRTdHlsZS5mb250RmFtaWx5O1xuXHRcdFx0d2lkdGhOb2RlLnN0eWxlLmZvbnRXZWlnaHQgPSBpbnB1dFN0eWxlLmZvbnRXZWlnaHQ7XG5cdFx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFN0eWxlID0gaW5wdXRTdHlsZS5mb250U3R5bGU7XG5cdFx0XHR3aWR0aE5vZGUuc3R5bGUubGV0dGVyU3BhY2luZyA9IGlucHV0U3R5bGUubGV0dGVyU3BhY2luZztcblx0XHRcdGlmICh0aGlzLnByb3BzLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdHZhciBwbGFjZWhvbGRlck5vZGUgPSB0aGlzLnJlZnMucGxhY2Vob2xkZXJTaXplcjtcblx0XHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmZvbnRTaXplID0gaW5wdXRTdHlsZS5mb250U2l6ZTtcblx0XHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmZvbnRGYW1pbHkgPSBpbnB1dFN0eWxlLmZvbnRGYW1pbHk7XG5cdFx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gaW5wdXRTdHlsZS5mb250V2VpZ2h0O1xuXHRcdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUuZm9udFN0eWxlID0gaW5wdXRTdHlsZS5mb250U3R5bGU7XG5cdFx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gaW5wdXRTdHlsZS5sZXR0ZXJTcGFjaW5nO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cXVldWVVcGRhdGVJbnB1dFdpZHRoOiBmdW5jdGlvbiBxdWV1ZVVwZGF0ZUlucHV0V2lkdGgoKSB7XG5cdFx0XHRuZXh0RnJhbWUodGhpcy51cGRhdGVJbnB1dFdpZHRoKTtcblx0XHR9LFxuXHRcdHVwZGF0ZUlucHV0V2lkdGg6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0V2lkdGgoKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNNb3VudGVkKCkgfHwgdHlwZW9mIHRoaXMucmVmcy5zaXplci5zY3JvbGxXaWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIG5ld0lucHV0V2lkdGggPSB1bmRlZmluZWQ7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHRuZXdJbnB1dFdpZHRoID0gTWF0aC5tYXgodGhpcy5yZWZzLnNpemVyLnNjcm9sbFdpZHRoLCB0aGlzLnJlZnMucGxhY2Vob2xkZXJTaXplci5zY3JvbGxXaWR0aCkgKyAyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMucmVmcy5zaXplci5zY3JvbGxXaWR0aCArIDI7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmV3SW5wdXRXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMucHJvcHMubWluV2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmV3SW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGlucHV0V2lkdGg6IG5ld0lucHV0V2lkdGhcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXRJbnB1dDogZnVuY3Rpb24gZ2V0SW5wdXQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZWZzLmlucHV0O1xuXHRcdH0sXG5cdFx0Zm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHRcdFx0dGhpcy5yZWZzLmlucHV0LmZvY3VzKCk7XG5cdFx0fSxcblx0XHRibHVyOiBmdW5jdGlvbiBibHVyKCkge1xuXHRcdFx0dGhpcy5yZWZzLmlucHV0LmJsdXIoKTtcblx0XHR9LFxuXHRcdHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KCkge1xuXHRcdFx0dGhpcy5yZWZzLmlucHV0LnNlbGVjdCgpO1xuXHRcdH0sXG5cdFx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgZXNjYXBlZFZhbHVlID0gKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlIHx8IHRoaXMucHJvcHMudmFsdWUgfHwgJycpLnJlcGxhY2UoL1xcJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8gL2csICcmbmJzcDsnKS5yZXBsYWNlKC9cXDwvZywgJyZsdDsnKS5yZXBsYWNlKC9cXD4vZywgJyZndDsnKTtcblx0XHRcdHZhciB3cmFwcGVyU3R5bGUgPSB0aGlzLnByb3BzLnN0eWxlIHx8IHt9O1xuXHRcdFx0aWYgKCF3cmFwcGVyU3R5bGUuZGlzcGxheSkgd3JhcHBlclN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcblx0XHRcdHZhciBpbnB1dFN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRTdHlsZSk7XG5cdFx0XHRpbnB1dFN0eWxlLndpZHRoID0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoO1xuXHRcdFx0aW5wdXRTdHlsZS5ib3hTaXppbmcgPSAnY29udGVudC1ib3gnO1xuXHRcdFx0dmFyIHBsYWNlaG9sZGVyID0gdGhpcy5wcm9wcy5wbGFjZWhvbGRlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHR7IHJlZjogJ3BsYWNlaG9sZGVyU2l6ZXInLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0XHR0aGlzLnByb3BzLnBsYWNlaG9sZGVyXG5cdFx0XHQpIDogbnVsbDtcblx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLCBzdHlsZTogd3JhcHBlclN0eWxlIH0sXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgcmVmOiAnaW5wdXQnLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuaW5wdXRDbGFzc05hbWUsIHN0eWxlOiBpbnB1dFN0eWxlIH0pKSxcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdzaXplcicsIHN0eWxlOiBzaXplclN0eWxlLCBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IGVzY2FwZWRWYWx1ZSB9IH0pLFxuXHRcdFx0XHRwbGFjZWhvbGRlclxuXHRcdFx0KTtcblx0XHR9XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBBdXRvc2l6ZUlucHV0O1xuXG4vKioqLyB9LFxuLyogNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0QWRkb25zVXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHR2YXIgX3JlYWN0QWRkb25zVXBkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0QWRkb25zVXBkYXRlKTtcblx0XG5cdHZhciBfVG9hc3RNZXNzYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdFxuXHR2YXIgX1RvYXN0TWVzc2FnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub2FzdE1lc3NhZ2UpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBUb2FzdENvbnRhaW5lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdCAgX2luaGVyaXRzKFRvYXN0Q29udGFpbmVyLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gVG9hc3RDb250YWluZXIoKSB7XG5cdCAgICB2YXIgX09iamVjdCRnZXRQcm90b3R5cGVPO1xuXHRcblx0ICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cdFxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvYXN0Q29udGFpbmVyKTtcblx0XG5cdCAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9PYmplY3QkZ2V0UHJvdG90eXBlTyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb2FzdENvbnRhaW5lcikpLmNhbGwuYXBwbHkoX09iamVjdCRnZXRQcm90b3R5cGVPLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG5cdCAgICAgIHRvYXN0czogW10sXG5cdCAgICAgIHRvYXN0SWQ6IDAsXG5cdCAgICAgIHByZXZpb3VzTWVzc2FnZTogbnVsbFxuXHQgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoVG9hc3RDb250YWluZXIsIFt7XG5cdCAgICBrZXk6IFwiZXJyb3JcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKSB7XG5cdCAgICAgIHRoaXMuX25vdGlmeSh0aGlzLnByb3BzLnRvYXN0VHlwZS5lcnJvciwgbWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImluZm9cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIHRpdGxlLCBvcHRpb25zT3ZlcnJpZGUpIHtcblx0ICAgICAgdGhpcy5fbm90aWZ5KHRoaXMucHJvcHMudG9hc3RUeXBlLmluZm8sIG1lc3NhZ2UsIHRpdGxlLCBvcHRpb25zT3ZlcnJpZGUpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzdWNjZXNzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKSB7XG5cdCAgICAgIHRoaXMuX25vdGlmeSh0aGlzLnByb3BzLnRvYXN0VHlwZS5zdWNjZXNzLCBtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwid2FybmluZ1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSkge1xuXHQgICAgICB0aGlzLl9ub3RpZnkodGhpcy5wcm9wcy50b2FzdFR5cGUud2FybmluZywgbWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImNsZWFyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXHRcblx0ICAgICAgT2JqZWN0LmtleXModGhpcy5yZWZzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgICBfdGhpczIucmVmc1trZXldLmhpZGVUb2FzdChmYWxzZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfbm90aWZ5XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX25vdGlmeSh0eXBlLCBtZXNzYWdlLCB0aXRsZSkge1xuXHQgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICAgIHZhciBvcHRpb25zT3ZlcnJpZGUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1szXTtcblx0XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLnByZXZlbnREdXBsaWNhdGVzKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuc3RhdGUucHJldmlvdXNNZXNzYWdlID09PSBtZXNzYWdlKSB7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHZhciBrZXkgPSB0aGlzLnN0YXRlLnRvYXN0SWQrKztcblx0ICAgICAgdmFyIHRvYXN0SWQgPSBrZXk7XG5cdCAgICAgIHZhciBuZXdUb2FzdCA9ICgwLCBfcmVhY3RBZGRvbnNVcGRhdGUyLmRlZmF1bHQpKG9wdGlvbnNPdmVycmlkZSwge1xuXHQgICAgICAgICRtZXJnZToge1xuXHQgICAgICAgICAgdHlwZTogdHlwZSxcblx0ICAgICAgICAgIHRpdGxlOiB0aXRsZSxcblx0ICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdCAgICAgICAgICB0b2FzdElkOiB0b2FzdElkLFxuXHQgICAgICAgICAga2V5OiBrZXksXG5cdCAgICAgICAgICByZWY6IFwidG9hc3RzX19cIiArIGtleSxcblx0ICAgICAgICAgIGhhbmRsZU9uQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZU9uQ2xpY2soZSkge1xuXHQgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb3B0aW9uc092ZXJyaWRlLmhhbmRsZU9uQ2xpY2spIHtcblx0ICAgICAgICAgICAgICBvcHRpb25zT3ZlcnJpZGUuaGFuZGxlT25DbGljaygpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBfdGhpczMuX2hhbmRsZV90b2FzdF9vbl9jbGljayhlKTtcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBoYW5kbGVSZW1vdmU6IHRoaXMuX2hhbmRsZV90b2FzdF9yZW1vdmUuYmluZCh0aGlzKVxuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHZhciB0b2FzdE9wZXJhdGlvbiA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIiArICh0aGlzLnByb3BzLm5ld2VzdE9uVG9wID8gXCIkdW5zaGlmdFwiIDogXCIkcHVzaFwiKSwgW25ld1RvYXN0XSk7XG5cdFxuXHQgICAgICB2YXIgbmV4dFN0YXRlID0gKDAsIF9yZWFjdEFkZG9uc1VwZGF0ZTIuZGVmYXVsdCkodGhpcy5zdGF0ZSwge1xuXHQgICAgICAgIHRvYXN0czogdG9hc3RPcGVyYXRpb24sXG5cdCAgICAgICAgcHJldmlvdXNNZXNzYWdlOiB7ICRzZXQ6IG1lc3NhZ2UgfVxuXHQgICAgICB9KTtcblx0ICAgICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfaGFuZGxlX3RvYXN0X29uX2NsaWNrXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZV90b2FzdF9vbl9jbGljayhldmVudCkge1xuXHQgICAgICB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXHQgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2hhbmRsZV90b2FzdF9yZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlX3RvYXN0X3JlbW92ZSh0b2FzdElkKSB7XG5cdCAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXHRcblx0ICAgICAgdmFyIG9wZXJhdGlvbk5hbWUgPSBcIlwiICsgKHRoaXMucHJvcHMubmV3ZXN0T25Ub3AgPyBcInJlZHVjZVJpZ2h0XCIgOiBcInJlZHVjZVwiKTtcblx0ICAgICAgdGhpcy5zdGF0ZS50b2FzdHNbb3BlcmF0aW9uTmFtZV0oZnVuY3Rpb24gKGZvdW5kLCB0b2FzdCwgaW5kZXgpIHtcblx0ICAgICAgICBpZiAoZm91bmQgfHwgdG9hc3QudG9hc3RJZCAhPT0gdG9hc3RJZCkge1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBfdGhpczQuc2V0U3RhdGUoKDAsIF9yZWFjdEFkZG9uc1VwZGF0ZTIuZGVmYXVsdCkoX3RoaXM0LnN0YXRlLCB7XG5cdCAgICAgICAgICB0b2FzdHM6IHsgJHNwbGljZTogW1tpbmRleCwgMV1dIH1cblx0ICAgICAgICB9KSk7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH0sIGZhbHNlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblx0XG5cdCAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICBcImRpdlwiLFxuXHQgICAgICAgIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCIsIHJvbGU6IFwiYWxlcnRcIiB9KSxcblx0ICAgICAgICB0aGlzLnN0YXRlLnRvYXN0cy5tYXAoZnVuY3Rpb24gKHRvYXN0KSB7XG5cdCAgICAgICAgICByZXR1cm4gX3RoaXM1LnByb3BzLnRvYXN0TWVzc2FnZUZhY3RvcnkodG9hc3QpO1xuXHQgICAgICAgIH0pXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gVG9hc3RDb250YWluZXI7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cdFxuXHRUb2FzdENvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG5cdCAgdG9hc3RUeXBlOiBfcmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcblx0ICAgIGVycm9yOiBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0ICAgIGluZm86IF9yZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgc3VjY2VzczogX3JlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICB3YXJuaW5nOiBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuXHQgIH0pLmlzUmVxdWlyZWQsXG5cdCAgaWQ6IF9yZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdCAgdG9hc3RNZXNzYWdlRmFjdG9yeTogX3JlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdCAgcHJldmVudER1cGxpY2F0ZXM6IF9yZWFjdC5Qcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXHQgIG5ld2VzdE9uVG9wOiBfcmVhY3QuUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblx0ICBvbkNsaWNrOiBfcmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuXHR9O1xuXHRUb2FzdENvbnRhaW5lci5kZWZhdWx0UHJvcHMgPSB7XG5cdCAgdG9hc3RUeXBlOiB7XG5cdCAgICBlcnJvcjogXCJlcnJvclwiLFxuXHQgICAgaW5mbzogXCJpbmZvXCIsXG5cdCAgICBzdWNjZXNzOiBcInN1Y2Nlc3NcIixcblx0ICAgIHdhcm5pbmc6IFwid2FybmluZ1wiXG5cdCAgfSxcblx0ICBpZDogXCJ0b2FzdC1jb250YWluZXJcIixcblx0ICB0b2FzdE1lc3NhZ2VGYWN0b3J5OiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRmFjdG9yeShfVG9hc3RNZXNzYWdlMi5kZWZhdWx0KSxcblx0ICBwcmV2ZW50RHVwbGljYXRlczogZmFsc2UsXG5cdCAgbmV3ZXN0T25Ub3A6IHRydWUsXG5cdCAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHt9XG5cdH07XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFRvYXN0Q29udGFpbmVyO1xuXG4vKioqLyB9LFxuLyogNDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX1JlYWN0VHJhbnNpdGlvbkV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHRcblx0dmFyIF9SZWFjdFRyYW5zaXRpb25FdmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVhY3RUcmFuc2l0aW9uRXZlbnRzKTtcblx0XG5cdHZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0dmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cdFxuXHR2YXIgX2VsZW1lbnRDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHRcblx0dmFyIF9lbGVtZW50Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudENsYXNzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgVElDSyA9IDE3O1xuXHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHRleHBvcnRzLmRlZmF1bHQgPSB7XG5cdCAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICB0cmFuc2l0aW9uOiBudWxsLCAvLyBzb21lIGV4YW1wbGVzIGRlZmluZWQgaW4gaW5kZXguc2NzcyAoc2NhbGUsIGZhZGVJbk91dCwgcm90YXRlKVxuXHQgICAgICBzaG93QW5pbWF0aW9uOiBcImFuaW1hdGVkIGJvdW5jZUluXCIsIC8vIG9yIG90aGVyIGFuaW1hdGlvbnMgZnJvbSBhbmltYXRlLmNzc1xuXHQgICAgICBoaWRlQW5pbWF0aW9uOiBcImFuaW1hdGVkIGJvdW5jZU91dFwiLFxuXHQgICAgICB0aW1lT3V0OiA1MDAwLFxuXHQgICAgICBleHRlbmRlZFRpbWVPdXQ6IDEwMDBcblx0ICAgIH07XG5cdCAgfSxcblx0ICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcblx0ICAgIHRoaXMuY2xhc3NOYW1lUXVldWUgPSBbXTtcblx0ICAgIHRoaXMuaXNIaWRpbmcgPSBmYWxzZTtcblx0ICAgIHRoaXMuaW50ZXJ2YWxJZCA9IG51bGw7XG5cdCAgfSxcblx0ICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgIHRoaXMuX2lzX21vdW50ZWQgPSB0cnVlO1xuXHQgICAgdGhpcy5fc2hvdygpO1xuXHQgICAgdmFyIG5vZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG5cdFxuXHQgICAgdmFyIG9uSGlkZUNvbXBsZXRlID0gZnVuY3Rpb24gb25IaWRlQ29tcGxldGUoKSB7XG5cdCAgICAgIGlmIChfdGhpcy5pc0hpZGluZykge1xuXHQgICAgICAgIF90aGlzLl9zZXRfaXNfaGlkaW5nKGZhbHNlKTtcblx0ICAgICAgICBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMi5kZWZhdWx0LnJlbW92ZUVuZEV2ZW50TGlzdGVuZXIobm9kZSwgb25IaWRlQ29tcGxldGUpO1xuXHQgICAgICAgIF90aGlzLl9oYW5kbGVfcmVtb3ZlKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMi5kZWZhdWx0LmFkZEVuZEV2ZW50TGlzdGVuZXIobm9kZSwgb25IaWRlQ29tcGxldGUpO1xuXHRcblx0ICAgIGlmICh0aGlzLnByb3BzLnRpbWVPdXQgPiAwKSB7XG5cdCAgICAgIHRoaXMuX3NldF9pbnRlcnZhbF9pZChzZXRUaW1lb3V0KHRoaXMuaGlkZVRvYXN0LCB0aGlzLnByb3BzLnRpbWVPdXQpKTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0ICAgIHRoaXMuX2lzX21vdW50ZWQgPSBmYWxzZTtcblx0ICAgIGlmICh0aGlzLmludGVydmFsSWQpIHtcblx0ICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaW50ZXJ2YWxJZCk7XG5cdCAgICB9XG5cdCAgfSxcblx0ICBfc2V0X3RyYW5zaXRpb246IGZ1bmN0aW9uIF9zZXRfdHJhbnNpdGlvbihoaWRlKSB7XG5cdCAgICB2YXIgYW5pbWF0aW9uVHlwZSA9IGhpZGUgPyBcImxlYXZlXCIgOiBcImVudGVyXCI7XG5cdCAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblx0ICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLnByb3BzLnRyYW5zaXRpb24gKyBcIi1cIiArIGFuaW1hdGlvblR5cGU7XG5cdCAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gY2xhc3NOYW1lICsgXCItYWN0aXZlXCI7XG5cdFxuXHQgICAgdmFyIGVuZExpc3RlbmVyID0gZnVuY3Rpb24gZW5kTGlzdGVuZXIoZSkge1xuXHQgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gbm9kZSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGNsYXNzTGlzdCA9ICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKTtcblx0ICAgICAgY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuXHQgICAgICBjbGFzc0xpc3QucmVtb3ZlKGFjdGl2ZUNsYXNzTmFtZSk7XG5cdFxuXHQgICAgICBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMi5kZWZhdWx0LnJlbW92ZUVuZEV2ZW50TGlzdGVuZXIobm9kZSwgZW5kTGlzdGVuZXIpO1xuXHQgICAgfTtcblx0XG5cdCAgICBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMi5kZWZhdWx0LmFkZEVuZEV2ZW50TGlzdGVuZXIobm9kZSwgZW5kTGlzdGVuZXIpO1xuXHRcblx0ICAgICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKS5hZGQoY2xhc3NOYW1lKTtcblx0XG5cdCAgICAvLyBOZWVkIHRvIGRvIHRoaXMgdG8gYWN0dWFsbHkgdHJpZ2dlciBhIHRyYW5zaXRpb24uXG5cdCAgICB0aGlzLl9xdWV1ZV9jbGFzcyhhY3RpdmVDbGFzc05hbWUpO1xuXHQgIH0sXG5cdCAgX2NsZWFyX3RyYW5zaXRpb246IGZ1bmN0aW9uIF9jbGVhcl90cmFuc2l0aW9uKGhpZGUpIHtcblx0ICAgIHZhciBub2RlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXHQgICAgdmFyIGFuaW1hdGlvblR5cGUgPSBoaWRlID8gXCJsZWF2ZVwiIDogXCJlbnRlclwiO1xuXHQgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMudHJhbnNpdGlvbiArIFwiLVwiICsgYW5pbWF0aW9uVHlwZTtcblx0ICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBjbGFzc05hbWUgKyBcIi1hY3RpdmVcIjtcblx0XG5cdCAgICB2YXIgY2xhc3NMaXN0ID0gKDAsIF9lbGVtZW50Q2xhc3MyLmRlZmF1bHQpKG5vZGUpO1xuXHQgICAgY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuXHQgICAgY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbGFzc05hbWUpO1xuXHQgIH0sXG5cdCAgX3NldF9hbmltYXRpb246IGZ1bmN0aW9uIF9zZXRfYW5pbWF0aW9uKGhpZGUpIHtcblx0ICAgIHZhciBub2RlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXHQgICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLl9nZXRfYW5pbWF0aW9uX2NsYXNzZXMoaGlkZSk7XG5cdCAgICB2YXIgZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBlbmRMaXN0ZW5lcihlKSB7XG5cdCAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBub2RlKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBhbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW0pIHtcblx0ICAgICAgICByZXR1cm4gKDAsIF9lbGVtZW50Q2xhc3MyLmRlZmF1bHQpKG5vZGUpLnJlbW92ZShhbmltKTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMi5kZWZhdWx0LnJlbW92ZUVuZEV2ZW50TGlzdGVuZXIobm9kZSwgZW5kTGlzdGVuZXIpO1xuXHQgICAgfTtcblx0XG5cdCAgICBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMi5kZWZhdWx0LmFkZEVuZEV2ZW50TGlzdGVuZXIobm9kZSwgZW5kTGlzdGVuZXIpO1xuXHRcblx0ICAgIGFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbSkge1xuXHQgICAgICByZXR1cm4gKDAsIF9lbGVtZW50Q2xhc3MyLmRlZmF1bHQpKG5vZGUpLmFkZChhbmltKTtcblx0ICAgIH0pO1xuXHQgIH0sXG5cdCAgX2dldF9hbmltYXRpb25fY2xhc3NlczogZnVuY3Rpb24gX2dldF9hbmltYXRpb25fY2xhc3NlcyhoaWRlKSB7XG5cdCAgICB2YXIgYW5pbWF0aW9ucyA9IGhpZGUgPyB0aGlzLnByb3BzLmhpZGVBbmltYXRpb24gOiB0aGlzLnByb3BzLnNob3dBbmltYXRpb247XG5cdCAgICBpZiAoXCJbb2JqZWN0IEFycmF5XVwiID09PSB0b1N0cmluZy5jYWxsKGFuaW1hdGlvbnMpKSB7XG5cdCAgICAgIHJldHVybiBhbmltYXRpb25zO1xuXHQgICAgfSBlbHNlIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYW5pbWF0aW9ucykge1xuXHQgICAgICByZXR1cm4gYW5pbWF0aW9ucy5zcGxpdChcIiBcIik7XG5cdCAgICB9XG5cdCAgfSxcblx0ICBfY2xlYXJfYW5pbWF0aW9uOiBmdW5jdGlvbiBfY2xlYXJfYW5pbWF0aW9uKGhpZGUpIHtcblx0ICAgIHZhciBub2RlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXHQgICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLl9nZXRfYW5pbWF0aW9uX2NsYXNzZXMoaGlkZSk7XG5cdCAgICBhbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuXHQgICAgICByZXR1cm4gKDAsIF9lbGVtZW50Q2xhc3MyLmRlZmF1bHQpKG5vZGUpLnJlbW92ZShhbmltYXRpb24pO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0ICBfcXVldWVfY2xhc3M6IGZ1bmN0aW9uIF9xdWV1ZV9jbGFzcyhjbGFzc05hbWUpIHtcblx0ICAgIHRoaXMuY2xhc3NOYW1lUXVldWUucHVzaChjbGFzc05hbWUpO1xuXHRcblx0ICAgIGlmICghdGhpcy50aW1lb3V0KSB7XG5cdCAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fZmx1c2hfY2xhc3NfbmFtZV9xdWV1ZSwgVElDSyk7XG5cdCAgICB9XG5cdCAgfSxcblx0ICBfZmx1c2hfY2xhc3NfbmFtZV9xdWV1ZTogZnVuY3Rpb24gX2ZsdXNoX2NsYXNzX25hbWVfcXVldWUoKSB7XG5cdCAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICBpZiAodGhpcy5faXNfbW91bnRlZCkge1xuXHQgICAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzMik7XG5cdCAgICAgICAgX3RoaXMyLmNsYXNzTmFtZVF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuXHQgICAgICAgICAgcmV0dXJuICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKS5hZGQoY2xhc3NOYW1lKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSkoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuY2xhc3NOYW1lUXVldWUubGVuZ3RoID0gMDtcblx0ICAgIHRoaXMudGltZW91dCA9IG51bGw7XG5cdCAgfSxcblx0ICBfc2hvdzogZnVuY3Rpb24gX3Nob3coKSB7XG5cdCAgICBpZiAodGhpcy5wcm9wcy50cmFuc2l0aW9uKSB7XG5cdCAgICAgIHRoaXMuX3NldF90cmFuc2l0aW9uKCk7XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuc2hvd0FuaW1hdGlvbikge1xuXHQgICAgICB0aGlzLl9zZXRfYW5pbWF0aW9uKCk7XG5cdCAgICB9XG5cdCAgfSxcblx0ICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCkge1xuXHQgICAgY2xlYXJUaW1lb3V0KHRoaXMuaW50ZXJ2YWxJZCk7XG5cdCAgICB0aGlzLl9zZXRfaW50ZXJ2YWxfaWQobnVsbCk7XG5cdCAgICBpZiAodGhpcy5pc0hpZGluZykge1xuXHQgICAgICB0aGlzLl9zZXRfaXNfaGlkaW5nKGZhbHNlKTtcblx0XG5cdCAgICAgIGlmICh0aGlzLnByb3BzLmhpZGVBbmltYXRpb24pIHtcblx0ICAgICAgICB0aGlzLl9jbGVhcl9hbmltYXRpb24odHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy50cmFuc2l0aW9uKSB7XG5cdCAgICAgICAgdGhpcy5fY2xlYXJfdHJhbnNpdGlvbih0cnVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcblx0ICAgIGlmICghdGhpcy5pc0hpZGluZyAmJiAodGhpcy5wcm9wcy50aW1lT3V0ID4gMCB8fCB0aGlzLnByb3BzLmV4dGVuZGVkVGltZU91dCA+IDApKSB7XG5cdCAgICAgIHRoaXMuX3NldF9pbnRlcnZhbF9pZChzZXRUaW1lb3V0KHRoaXMuaGlkZVRvYXN0LCB0aGlzLnByb3BzLmV4dGVuZGVkVGltZU91dCkpO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgaGlkZVRvYXN0OiBmdW5jdGlvbiBoaWRlVG9hc3Qob3ZlcnJpZGUpIHtcblx0ICAgIGlmICh0aGlzLmlzSGlkaW5nIHx8IHRoaXMuaW50ZXJ2YWxJZCA9PT0gbnVsbCAmJiAhb3ZlcnJpZGUpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuX3NldF9pc19oaWRpbmcodHJ1ZSk7XG5cdCAgICBpZiAodGhpcy5wcm9wcy50cmFuc2l0aW9uKSB7XG5cdCAgICAgIHRoaXMuX3NldF90cmFuc2l0aW9uKHRydWUpO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmhpZGVBbmltYXRpb24pIHtcblx0ICAgICAgdGhpcy5fc2V0X2FuaW1hdGlvbih0cnVlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMuX2hhbmRsZV9yZW1vdmUoKTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIF9zZXRfaW50ZXJ2YWxfaWQ6IGZ1bmN0aW9uIF9zZXRfaW50ZXJ2YWxfaWQoaW50ZXJ2YWxJZCkge1xuXHQgICAgdGhpcy5pbnRlcnZhbElkID0gaW50ZXJ2YWxJZDtcblx0ICB9LFxuXHQgIF9zZXRfaXNfaGlkaW5nOiBmdW5jdGlvbiBfc2V0X2lzX2hpZGluZyhpc0hpZGluZykge1xuXHQgICAgdGhpcy5pc0hpZGluZyA9IGlzSGlkaW5nO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDQ0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBjYWxsX3Nob3dfbWV0aG9kKCRub2RlLCBwcm9wcykge1xuXHQgICRub2RlW3Byb3BzLnNob3dNZXRob2RdKHtcblx0ICAgIGR1cmF0aW9uOiBwcm9wcy5zaG93RHVyYXRpb24sXG5cdCAgICBlYXNpbmc6IHByb3BzLnNob3dFYXNpbmdcblx0ICB9KTtcblx0fVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0ge1xuXHQgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgc3R5bGU6IHtcblx0ICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIiB9LFxuXHQgICAgICAvLyBlZmZlY3RpdmUgJC5oaWRlKClcblx0ICAgICAgc2hvd01ldGhvZDogXCJmYWRlSW5cIiwgLy8gc2xpZGVEb3duLCBhbmQgc2hvdyBhcmUgYnVpbHQgaW50byBqUXVlcnlcblx0ICAgICAgc2hvd0R1cmF0aW9uOiAzMDAsXG5cdCAgICAgIHNob3dFYXNpbmc6IFwic3dpbmdcIiwgLy8gYW5kIGxpbmVhciBhcmUgYnVpbHQgaW50byBqUXVlcnlcblx0ICAgICAgaGlkZU1ldGhvZDogXCJmYWRlT3V0XCIsXG5cdCAgICAgIGhpZGVEdXJhdGlvbjogMTAwMCxcblx0ICAgICAgaGlkZUVhc2luZzogXCJzd2luZ1wiLFxuXHQgICAgICAvL1xuXHQgICAgICB0aW1lT3V0OiA1MDAwLFxuXHQgICAgICBleHRlbmRlZFRpbWVPdXQ6IDEwMDBcblx0ICAgIH07XG5cdCAgfSxcblx0ICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGludGVydmFsSWQ6IG51bGwsXG5cdCAgICAgIGlzSGlkaW5nOiBmYWxzZVxuXHQgICAgfTtcblx0ICB9LFxuXHQgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgIGNhbGxfc2hvd19tZXRob2QodGhpcy5fZ2V0XyRfbm9kZSgpLCB0aGlzLnByb3BzKTtcblx0ICAgIGlmICh0aGlzLnByb3BzLnRpbWVPdXQgPiAwKSB7XG5cdCAgICAgIHRoaXMuX3NldF9pbnRlcnZhbF9pZChzZXRUaW1lb3V0KHRoaXMuaGlkZVRvYXN0LCB0aGlzLnByb3BzLnRpbWVPdXQpKTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIGhhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG5cdCAgICBjbGVhclRpbWVvdXQodGhpcy5zdGF0ZS5pbnRlcnZhbElkKTtcblx0ICAgIHRoaXMuX3NldF9pbnRlcnZhbF9pZChudWxsKTtcblx0ICAgIHRoaXMuX3NldF9pc19oaWRpbmcoZmFsc2UpO1xuXHRcblx0ICAgIGNhbGxfc2hvd19tZXRob2QodGhpcy5fZ2V0XyRfbm9kZSgpLnN0b3AodHJ1ZSwgdHJ1ZSksIHRoaXMucHJvcHMpO1xuXHQgIH0sXG5cdCAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcblx0ICAgIGlmICghdGhpcy5zdGF0ZS5pc0hpZGluZyAmJiAodGhpcy5wcm9wcy50aW1lT3V0ID4gMCB8fCB0aGlzLnByb3BzLmV4dGVuZGVkVGltZU91dCA+IDApKSB7XG5cdCAgICAgIHRoaXMuX3NldF9pbnRlcnZhbF9pZChzZXRUaW1lb3V0KHRoaXMuaGlkZVRvYXN0LCB0aGlzLnByb3BzLmV4dGVuZGVkVGltZU91dCkpO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgaGlkZVRvYXN0OiBmdW5jdGlvbiBoaWRlVG9hc3Qob3ZlcnJpZGUpIHtcblx0ICAgIGlmICh0aGlzLnN0YXRlLmlzSGlkaW5nIHx8IHRoaXMuc3RhdGUuaW50ZXJ2YWxJZCA9PT0gbnVsbCAmJiAhb3ZlcnJpZGUpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdGhpcy5zZXRTdGF0ZSh7IGlzSGlkaW5nOiB0cnVlIH0pO1xuXHRcblx0ICAgIHRoaXMuX2dldF8kX25vZGUoKVt0aGlzLnByb3BzLmhpZGVNZXRob2RdKHtcblx0ICAgICAgZHVyYXRpb246IHRoaXMucHJvcHMuaGlkZUR1cmF0aW9uLFxuXHQgICAgICBlYXNpbmc6IHRoaXMucHJvcHMuaGlkZUVhc2luZyxcblx0ICAgICAgY29tcGxldGU6IHRoaXMuX2hhbmRsZV9yZW1vdmVcblx0ICAgIH0pO1xuXHQgIH0sXG5cdCAgX2dldF8kX25vZGU6IGZ1bmN0aW9uIF9nZXRfJF9ub2RlKCkge1xuXHQgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cblx0ICAgIHJldHVybiBqUXVlcnkoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpKTtcblx0ICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cblx0ICB9LFxuXHQgIF9zZXRfaW50ZXJ2YWxfaWQ6IGZ1bmN0aW9uIF9zZXRfaW50ZXJ2YWxfaWQoaW50ZXJ2YWxJZCkge1xuXHQgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgIGludGVydmFsSWQ6IGludGVydmFsSWRcblx0ICAgIH0pO1xuXHQgIH0sXG5cdCAgX3NldF9pc19oaWRpbmc6IGZ1bmN0aW9uIF9zZXRfaXNfaGlkaW5nKGlzSGlkaW5nKSB7XG5cdCAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgaXNIaWRpbmc6IGlzSGlkaW5nXG5cdCAgICB9KTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiA0NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5Ub2FzdE1lc3NhZ2UgPSBleHBvcnRzLlRvYXN0Q29udGFpbmVyID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9Ub2FzdENvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHRcblx0dmFyIF9Ub2FzdENvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub2FzdENvbnRhaW5lcik7XG5cdFxuXHR2YXIgX1RvYXN0TWVzc2FnZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRcblx0dmFyIF9Ub2FzdE1lc3NhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVG9hc3RNZXNzYWdlKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLlRvYXN0Q29udGFpbmVyID0gX1RvYXN0Q29udGFpbmVyMi5kZWZhdWx0O1xuXHRleHBvcnRzLlRvYXN0TWVzc2FnZSA9IF9Ub2FzdE1lc3NhZ2UyLmRlZmF1bHQ7XG5cbi8qKiovIH0sXG4vKiA0NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRzKSB7XG5cdCAgcmV0dXJuIG5ldyBFbGVtZW50Q2xhc3Mob3B0cylcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW5kZXhPZihhcnIsIHByb3ApIHtcblx0ICBpZiAoYXJyLmluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihwcm9wKVxuXHQgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspXG5cdCAgICBpZiAoYXJyW2ldID09PSBwcm9wKSByZXR1cm4gaVxuXHQgIHJldHVybiAtMVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBFbGVtZW50Q2xhc3Mob3B0cykge1xuXHQgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFbGVtZW50Q2xhc3MpKSByZXR1cm4gbmV3IEVsZW1lbnRDbGFzcyhvcHRzKVxuXHQgIHZhciBzZWxmID0gdGhpc1xuXHQgIGlmICghb3B0cykgb3B0cyA9IHt9XG5cdFxuXHQgIC8vIHNpbWlsYXIgZG9pbmcgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCBidXQgd29ya3MgaW4gSUU4XG5cdCAgaWYgKG9wdHMubm9kZVR5cGUpIG9wdHMgPSB7ZWw6IG9wdHN9XG5cdFxuXHQgIHRoaXMub3B0cyA9IG9wdHNcblx0ICB0aGlzLmVsID0gb3B0cy5lbCB8fCBkb2N1bWVudC5ib2R5XG5cdCAgaWYgKHR5cGVvZiB0aGlzLmVsICE9PSAnb2JqZWN0JykgdGhpcy5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5lbClcblx0fVxuXHRcblx0RWxlbWVudENsYXNzLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0ICB2YXIgZWwgPSB0aGlzLmVsXG5cdCAgaWYgKCFlbCkgcmV0dXJuXG5cdCAgaWYgKGVsLmNsYXNzTmFtZSA9PT0gXCJcIikgcmV0dXJuIGVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZVxuXHQgIHZhciBjbGFzc2VzID0gZWwuY2xhc3NOYW1lLnNwbGl0KCcgJylcblx0ICBpZiAoaW5kZXhPZihjbGFzc2VzLCBjbGFzc05hbWUpID4gLTEpIHJldHVybiBjbGFzc2VzXG5cdCAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcblx0ICBlbC5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oJyAnKVxuXHQgIHJldHVybiBjbGFzc2VzXG5cdH1cblx0XG5cdEVsZW1lbnRDbGFzcy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG5cdCAgdmFyIGVsID0gdGhpcy5lbFxuXHQgIGlmICghZWwpIHJldHVyblxuXHQgIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVyblxuXHQgIHZhciBjbGFzc2VzID0gZWwuY2xhc3NOYW1lLnNwbGl0KCcgJylcblx0ICB2YXIgaWR4ID0gaW5kZXhPZihjbGFzc2VzLCBjbGFzc05hbWUpXG5cdCAgaWYgKGlkeCA+IC0xKSBjbGFzc2VzLnNwbGljZShpZHgsIDEpXG5cdCAgZWwuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJylcblx0ICByZXR1cm4gY2xhc3Nlc1xuXHR9XG5cdFxuXHRFbGVtZW50Q2xhc3MucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuXHQgIHZhciBlbCA9IHRoaXMuZWxcblx0ICBpZiAoIWVsKSByZXR1cm5cblx0ICB2YXIgY2xhc3NlcyA9IGVsLmNsYXNzTmFtZS5zcGxpdCgnICcpXG5cdCAgcmV0dXJuIGluZGV4T2YoY2xhc3NlcywgY2xhc3NOYW1lKSA+IC0xXG5cdH1cblx0XG5cdEVsZW1lbnRDbGFzcy5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG5cdCAgdmFyIGVsID0gdGhpcy5lbFxuXHQgIGlmICghZWwpIHJldHVyblxuXHQgIGlmICh0aGlzLmhhcyhjbGFzc05hbWUpKSB0aGlzLnJlbW92ZShjbGFzc05hbWUpXG5cdCAgZWxzZSB0aGlzLmFkZChjbGFzc05hbWUpXG5cdH1cblxuXG4vKioqLyB9LFxuLyogNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgT2JqZWN0LmFzc2lnblxuXHQgKi9cblx0XG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuYXNzaWduXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2VzKSB7XG5cdCAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIHRhcmdldCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcblx0ICB9XG5cdFxuXHQgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuXHQgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdFxuXHQgIGZvciAodmFyIG5leHRJbmRleCA9IDE7IG5leHRJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG5cdCAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tuZXh0SW5kZXhdO1xuXHQgICAgaWYgKG5leHRTb3VyY2UgPT0gbnVsbCkge1xuXHQgICAgICBjb250aW51ZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZnJvbSA9IE9iamVjdChuZXh0U291cmNlKTtcblx0XG5cdCAgICAvLyBXZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydCBhY2Nlc3NvcnMgbm9yIHByb3hpZXMuIFRoZXJlZm9yZSB0aGlzXG5cdCAgICAvLyBjb3B5IGNhbm5vdCB0aHJvdy4gSWYgd2UgZXZlciBzdXBwb3J0ZWQgdGhpcyB0aGVuIHdlIG11c3QgaGFuZGxlXG5cdCAgICAvLyBleGNlcHRpb25zIGFuZCBzaWRlLWVmZmVjdHMuIFdlIGRvbid0IHN1cHBvcnQgc3ltYm9scyBzbyB0aGV5IHdvbid0XG5cdCAgICAvLyBiZSB0cmFuc2ZlcnJlZC5cblx0XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHQgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdCAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRvO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcblxuLyoqKi8gfSxcbi8qIDQ4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VHJhbnNpdGlvbkV2ZW50c1xuXHQgKi9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXHRcblx0LyoqXG5cdCAqIEVWRU5UX05BTUVfTUFQIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGV2ZW50IGZpcmVkIHdoZW4gYVxuXHQgKiB0cmFuc2l0aW9uL2FuaW1hdGlvbiBlbmRzLCBiYXNlZCBvbiB0aGUgc3R5bGUgcHJvcGVydHkgdXNlZCB0b1xuXHQgKiBkZWZpbmUgdGhhdCBldmVudC5cblx0ICovXG5cdHZhciBFVkVOVF9OQU1FX01BUCA9IHtcblx0ICB0cmFuc2l0aW9uZW5kOiB7XG5cdCAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcblx0ICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuXHQgICAgJ01velRyYW5zaXRpb24nOiAnbW96VHJhbnNpdGlvbkVuZCcsXG5cdCAgICAnT1RyYW5zaXRpb24nOiAnb1RyYW5zaXRpb25FbmQnLFxuXHQgICAgJ21zVHJhbnNpdGlvbic6ICdNU1RyYW5zaXRpb25FbmQnXG5cdCAgfSxcblx0XG5cdCAgYW5pbWF0aW9uZW5kOiB7XG5cdCAgICAnYW5pbWF0aW9uJzogJ2FuaW1hdGlvbmVuZCcsXG5cdCAgICAnV2Via2l0QW5pbWF0aW9uJzogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG5cdCAgICAnTW96QW5pbWF0aW9uJzogJ21vekFuaW1hdGlvbkVuZCcsXG5cdCAgICAnT0FuaW1hdGlvbic6ICdvQW5pbWF0aW9uRW5kJyxcblx0ICAgICdtc0FuaW1hdGlvbic6ICdNU0FuaW1hdGlvbkVuZCdcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgZW5kRXZlbnRzID0gW107XG5cdFxuXHRmdW5jdGlvbiBkZXRlY3RFdmVudHMoKSB7XG5cdCAgdmFyIHRlc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgIHZhciBzdHlsZSA9IHRlc3RFbC5zdHlsZTtcblx0XG5cdCAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcblx0ICAvLyB0aGUgdW4tcHJlZml4ZWQgXCJhbmltYXRpb25cIiBhbmQgXCJ0cmFuc2l0aW9uXCIgcHJvcGVydGllcyBhcmUgZGVmaW5lZCBvbiB0aGVcblx0ICAvLyBzdHlsZSBvYmplY3QgYnV0IHRoZSBldmVudHMgdGhhdCBmaXJlIHdpbGwgc3RpbGwgYmUgcHJlZml4ZWQsIHNvIHdlIG5lZWRcblx0ICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2VhYmxlLCBhbmQgaWYgbm90IHJlbW92ZSB0aGVtXG5cdCAgLy8gZnJvbSB0aGUgbWFwXG5cdCAgaWYgKCEoJ0FuaW1hdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG5cdCAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcblx0ICB9XG5cdFxuXHQgIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcblx0ICAgIGRlbGV0ZSBFVkVOVF9OQU1FX01BUC50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb247XG5cdCAgfVxuXHRcblx0ICBmb3IgKHZhciBiYXNlRXZlbnROYW1lIGluIEVWRU5UX05BTUVfTUFQKSB7XG5cdCAgICB2YXIgYmFzZUV2ZW50cyA9IEVWRU5UX05BTUVfTUFQW2Jhc2VFdmVudE5hbWVdO1xuXHQgICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIGJhc2VFdmVudHMpIHtcblx0ICAgICAgaWYgKHN0eWxlTmFtZSBpbiBzdHlsZSkge1xuXHQgICAgICAgIGVuZEV2ZW50cy5wdXNoKGJhc2VFdmVudHNbc3R5bGVOYW1lXSk7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcblx0ICBkZXRlY3RFdmVudHMoKTtcblx0fVxuXHRcblx0Ly8gV2UgdXNlIHRoZSByYXcge2FkZHxyZW1vdmV9RXZlbnRMaXN0ZW5lcigpIGNhbGwgYmVjYXVzZSBFdmVudExpc3RlbmVyXG5cdC8vIGRvZXMgbm90IGtub3cgaG93IHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgYW5kIHdlIHJlYWxseSBzaG91bGRcblx0Ly8gY2xlYW4gdXAuIEFsc28sIHRoZXNlIGV2ZW50cyBhcmUgbm90IHRyaWdnZXJlZCBpbiBvbGRlciBicm93c2Vyc1xuXHQvLyBzbyB3ZSBzaG91bGQgYmUgQS1PSyBoZXJlLlxuXHRcblx0ZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIpIHtcblx0ICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBldmVudExpc3RlbmVyKSB7XG5cdCAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuXHR9XG5cdFxuXHR2YXIgUmVhY3RUcmFuc2l0aW9uRXZlbnRzID0ge1xuXHQgIGFkZEVuZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChub2RlLCBldmVudExpc3RlbmVyKSB7XG5cdCAgICBpZiAoZW5kRXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAvLyBJZiBDU1MgdHJhbnNpdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHRyaWdnZXIgYW4gXCJlbmQgYW5pbWF0aW9uXCJcblx0ICAgICAgLy8gZXZlbnQgaW1tZWRpYXRlbHkuXG5cdCAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGV2ZW50TGlzdGVuZXIsIDApO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBlbmRFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZW5kRXZlbnQpIHtcblx0ICAgICAgYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRFdmVudCwgZXZlbnRMaXN0ZW5lcik7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICByZW1vdmVFbmRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAobm9kZSwgZXZlbnRMaXN0ZW5lcikge1xuXHQgICAgaWYgKGVuZEV2ZW50cy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgZW5kRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGVuZEV2ZW50KSB7XG5cdCAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZW5kRXZlbnQsIGV2ZW50TGlzdGVuZXIpO1xuXHQgICAgfSk7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdFRyYW5zaXRpb25FdmVudHM7XG5cbi8qKiovIH0sXG4vKiA0OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIHVwZGF0ZVxuXHQgKi9cblx0XG5cdC8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cdHZhciBrZXlPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9ICh7fSkuaGFzT3duUHJvcGVydHk7XG5cdFxuXHRmdW5jdGlvbiBzaGFsbG93Q29weSh4KSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcblx0ICAgIHJldHVybiB4LmNvbmNhdCgpO1xuXHQgIH0gZWxzZSBpZiAoeCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybiBhc3NpZ24obmV3IHguY29uc3RydWN0b3IoKSwgeCk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiB4O1xuXHQgIH1cblx0fVxuXHRcblx0dmFyIENPTU1BTkRfUFVTSCA9IGtleU9mKHsgJHB1c2g6IG51bGwgfSk7XG5cdHZhciBDT01NQU5EX1VOU0hJRlQgPSBrZXlPZih7ICR1bnNoaWZ0OiBudWxsIH0pO1xuXHR2YXIgQ09NTUFORF9TUExJQ0UgPSBrZXlPZih7ICRzcGxpY2U6IG51bGwgfSk7XG5cdHZhciBDT01NQU5EX1NFVCA9IGtleU9mKHsgJHNldDogbnVsbCB9KTtcblx0dmFyIENPTU1BTkRfTUVSR0UgPSBrZXlPZih7ICRtZXJnZTogbnVsbCB9KTtcblx0dmFyIENPTU1BTkRfQVBQTFkgPSBrZXlPZih7ICRhcHBseTogbnVsbCB9KTtcblx0XG5cdHZhciBBTExfQ09NTUFORFNfTElTVCA9IFtDT01NQU5EX1BVU0gsIENPTU1BTkRfVU5TSElGVCwgQ09NTUFORF9TUExJQ0UsIENPTU1BTkRfU0VULCBDT01NQU5EX01FUkdFLCBDT01NQU5EX0FQUExZXTtcblx0XG5cdHZhciBBTExfQ09NTUFORFNfU0VUID0ge307XG5cdFxuXHRBTExfQ09NTUFORFNfTElTVC5mb3JFYWNoKGZ1bmN0aW9uIChjb21tYW5kKSB7XG5cdCAgQUxMX0NPTU1BTkRTX1NFVFtjb21tYW5kXSA9IHRydWU7XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gaW52YXJpYW50QXJyYXlDYXNlKHZhbHVlLCBzcGVjLCBjb21tYW5kKSB7XG5cdCAgIUFycmF5LmlzQXJyYXkodmFsdWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZSgpOiBleHBlY3RlZCB0YXJnZXQgb2YgJXMgdG8gYmUgYW4gYXJyYXk7IGdvdCAlcy4nLCBjb21tYW5kLCB2YWx1ZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXHQgIHZhciBzcGVjVmFsdWUgPSBzcGVjW2NvbW1hbmRdO1xuXHQgICFBcnJheS5pc0FycmF5KHNwZWNWYWx1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXk7IGdvdCAlcy4gJyArICdEaWQgeW91IGZvcmdldCB0byB3cmFwIHlvdXIgcGFyYW1ldGVyIGluIGFuIGFycmF5PycsIGNvbW1hbmQsIHNwZWNWYWx1ZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB1cGRhdGUodmFsdWUsIHNwZWMpIHtcblx0ICAhKHR5cGVvZiBzcGVjID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlKCk6IFlvdSBwcm92aWRlZCBhIGtleSBwYXRoIHRvIHVwZGF0ZSgpIHRoYXQgZGlkIG5vdCBjb250YWluIG9uZSAnICsgJ29mICVzLiBEaWQgeW91IGZvcmdldCB0byBpbmNsdWRlIHslczogLi4ufT8nLCBBTExfQ09NTUFORFNfTElTVC5qb2luKCcsICcpLCBDT01NQU5EX1NFVCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXHRcblx0ICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1NFVCkpIHtcblx0ICAgICEoT2JqZWN0LmtleXMoc3BlYykubGVuZ3RoID09PSAxKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGtleSBpbiBhbiBvYmplY3Qgd2l0aCAlcycsIENPTU1BTkRfU0VUKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cdFxuXHQgICAgcmV0dXJuIHNwZWNbQ09NTUFORF9TRVRdO1xuXHQgIH1cblx0XG5cdCAgdmFyIG5leHRWYWx1ZSA9IHNoYWxsb3dDb3B5KHZhbHVlKTtcblx0XG5cdCAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9NRVJHRSkpIHtcblx0ICAgIHZhciBtZXJnZU9iaiA9IHNwZWNbQ09NTUFORF9NRVJHRV07XG5cdCAgICAhKG1lcmdlT2JqICYmIHR5cGVvZiBtZXJnZU9iaiA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZSgpOiAlcyBleHBlY3RzIGEgc3BlYyBvZiB0eXBlIFxcJ29iamVjdFxcJzsgZ290ICVzJywgQ09NTUFORF9NRVJHRSwgbWVyZ2VPYmopIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblx0ICAgICEobmV4dFZhbHVlICYmIHR5cGVvZiBuZXh0VmFsdWUgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGUoKTogJXMgZXhwZWN0cyBhIHRhcmdldCBvZiB0eXBlIFxcJ29iamVjdFxcJzsgZ290ICVzJywgQ09NTUFORF9NRVJHRSwgbmV4dFZhbHVlKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cdCAgICBhc3NpZ24obmV4dFZhbHVlLCBzcGVjW0NPTU1BTkRfTUVSR0VdKTtcblx0ICB9XG5cdFxuXHQgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNwZWMsIENPTU1BTkRfUFVTSCkpIHtcblx0ICAgIGludmFyaWFudEFycmF5Q2FzZSh2YWx1ZSwgc3BlYywgQ09NTUFORF9QVVNIKTtcblx0ICAgIHNwZWNbQ09NTUFORF9QVVNIXS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgIG5leHRWYWx1ZS5wdXNoKGl0ZW0pO1xuXHQgICAgfSk7XG5cdCAgfVxuXHRcblx0ICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1VOU0hJRlQpKSB7XG5cdCAgICBpbnZhcmlhbnRBcnJheUNhc2UodmFsdWUsIHNwZWMsIENPTU1BTkRfVU5TSElGVCk7XG5cdCAgICBzcGVjW0NPTU1BTkRfVU5TSElGVF0uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICBuZXh0VmFsdWUudW5zaGlmdChpdGVtKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9TUExJQ0UpKSB7XG5cdCAgICAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgJXMgdGFyZ2V0IHRvIGJlIGFuIGFycmF5OyBnb3QgJXMnLCBDT01NQU5EX1NQTElDRSwgdmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblx0ICAgICFBcnJheS5pc0FycmF5KHNwZWNbQ09NTUFORF9TUExJQ0VdKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGUoKTogZXhwZWN0ZWQgc3BlYyBvZiAlcyB0byBiZSBhbiBhcnJheSBvZiBhcnJheXM7IGdvdCAlcy4gJyArICdEaWQgeW91IGZvcmdldCB0byB3cmFwIHlvdXIgcGFyYW1ldGVycyBpbiBhbiBhcnJheT8nLCBDT01NQU5EX1NQTElDRSwgc3BlY1tDT01NQU5EX1NQTElDRV0pIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblx0ICAgIHNwZWNbQ09NTUFORF9TUExJQ0VdLmZvckVhY2goZnVuY3Rpb24gKGFyZ3MpIHtcblx0ICAgICAgIUFycmF5LmlzQXJyYXkoYXJncykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXkgb2YgYXJyYXlzOyBnb3QgJXMuICcgKyAnRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIHBhcmFtZXRlcnMgaW4gYW4gYXJyYXk/JywgQ09NTUFORF9TUExJQ0UsIHNwZWNbQ09NTUFORF9TUExJQ0VdKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cdCAgICAgIG5leHRWYWx1ZS5zcGxpY2UuYXBwbHkobmV4dFZhbHVlLCBhcmdzKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9BUFBMWSkpIHtcblx0ICAgICEodHlwZW9mIHNwZWNbQ09NTUFORF9BUFBMWV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZSgpOiBleHBlY3RlZCBzcGVjIG9mICVzIHRvIGJlIGEgZnVuY3Rpb247IGdvdCAlcy4nLCBDT01NQU5EX0FQUExZLCBzcGVjW0NPTU1BTkRfQVBQTFldKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cdCAgICBuZXh0VmFsdWUgPSBzcGVjW0NPTU1BTkRfQVBQTFldKG5leHRWYWx1ZSk7XG5cdCAgfVxuXHRcblx0ICBmb3IgKHZhciBrIGluIHNwZWMpIHtcblx0ICAgIGlmICghKEFMTF9DT01NQU5EU19TRVQuaGFzT3duUHJvcGVydHkoaykgJiYgQUxMX0NPTU1BTkRTX1NFVFtrXSkpIHtcblx0ICAgICAgbmV4dFZhbHVlW2tdID0gdXBkYXRlKHZhbHVlW2tdLCBzcGVjW2tdKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiBuZXh0VmFsdWU7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gdXBkYXRlO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxNSkpKVxuXG4vKioqLyB9LFxuLyogNTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcblx0ICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblx0XG5cdC8qKlxuXHQgKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG5cdCAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcblx0ICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG5cdCAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cblx0ICovXG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblx0XG5cdCAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cdFxuXHQgIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXHRcblx0ICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cdFxuXHQgIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXHRcblx0ICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cbi8qKiovIH0sXG4vKiA1MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuXHQgKi9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qKlxuXHQgKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG5cdCAqXG5cdCAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG5cdCAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuXHQgKiBleHBlY3RpbmcuXG5cdCAqXG5cdCAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG5cdCAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cblx0ICovXG5cdFxuXHRmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcblx0ICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGlmICghY29uZGl0aW9uKSB7XG5cdCAgICB2YXIgZXJyb3I7XG5cdCAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuXHQgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuXHQgICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuXHQgICAgICB9KSk7XG5cdCAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG5cdCAgICB9XG5cdFxuXHQgICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuXHQgICAgdGhyb3cgZXJyb3I7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTUpKSlcblxuLyoqKi8gfSxcbi8qIDUyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGtleU9mXG5cdCAqL1xuXHRcblx0LyoqXG5cdCAqIEFsbG93cyBleHRyYWN0aW9uIG9mIGEgbWluaWZpZWQga2V5LiBMZXQncyB0aGUgYnVpbGQgc3lzdGVtIG1pbmlmeSBrZXlzXG5cdCAqIHdpdGhvdXQgbG9zaW5nIHRoZSBhYmlsaXR5IHRvIGR5bmFtaWNhbGx5IHVzZSBrZXkgc3RyaW5ncyBhcyB2YWx1ZXNcblx0ICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG5cdCAqIHlvdSB0aGUgc3RyaW5nIGtleSBvZiB0aGF0IHNpbmdsZSByZWNvcmQuIFN1cHBvc2UgeW91IHdhbnQgdG8gZ3JhYiB0aGVcblx0ICogdmFsdWUgZm9yIGEga2V5ICdjbGFzc05hbWUnIGluc2lkZSBvZiBhbiBvYmplY3QuIEtleS92YWwgbWluaWZpY2F0aW9uIG1heVxuXHQgKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cblx0ICogJ3hhMTInIGluIHRoYXQgY2FzZS4gUmVzb2x2ZSBrZXlzIHlvdSB3YW50IHRvIHVzZSBvbmNlIGF0IHN0YXJ0dXAgdGltZSwgdGhlblxuXHQgKiByZXVzZSB0aG9zZSByZXNvbHV0aW9ucy5cblx0ICovXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGtleU9mID0gZnVuY3Rpb24gKG9uZUtleU9iaikge1xuXHQgIHZhciBrZXk7XG5cdCAgZm9yIChrZXkgaW4gb25lS2V5T2JqKSB7XG5cdCAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgIGNvbnRpbnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGtleTtcblx0ICB9XG5cdCAgcmV0dXJuIG51bGw7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGtleU9mO1xuXG4vKioqLyB9LFxuLyogNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qXHJcblx0XHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdFx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG5cdCovXHJcblx0dmFyIHN0eWxlc0luRG9tID0ge30sXHJcblx0XHRtZW1vaXplID0gZnVuY3Rpb24oZm4pIHtcclxuXHRcdFx0dmFyIG1lbW87XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblx0XHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIC9tc2llIFs2LTldXFxiLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xyXG5cdFx0fSksXHJcblx0XHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcblx0XHR9KSxcclxuXHRcdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdFx0c2luZ2xldG9uQ291bnRlciA9IDAsXHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xyXG5cdFxyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xyXG5cdFx0aWYoZmFsc2UpIHtcclxuXHRcdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0XHR9XHJcblx0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxyXG5cdFx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XHJcblx0XHJcblx0XHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcclxuXHRcclxuXHRcdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0XHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHRcdHZhciBzdHlsZXMgPSBbXTtcclxuXHRcdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3R5bGVzO1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0XHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0XHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcFtzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcclxuXHRcdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRcdGlmKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xyXG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5maXJzdENoaWxkKTtcclxuXHRcdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGVFbGVtZW50KTtcclxuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdFx0aWYoaWR4ID49IDApIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRcdHJldHVybiBzdHlsZUVsZW1lbnQ7XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcclxuXHRcdHZhciBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG5cdFx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xyXG5cdFx0cmV0dXJuIGxpbmtFbGVtZW50O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHRcdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cdFxyXG5cdFx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHRcdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXHJcblx0XHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xyXG5cdFx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXHJcblx0XHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdFx0fTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dXBkYXRlKG9iaik7XHJcblx0XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRcdGlmKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcClcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZW1vdmUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0dmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHRcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XHJcblx0XHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XHJcblx0XHR9O1xyXG5cdH0pKCk7XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cdFxyXG5cdFx0aWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcclxuXHRcdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0XHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0XHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHRcclxuXHRcdGlmKG1lZGlhKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR3aGlsZShzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG5cdFx0XHRcdHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiB1cGRhdGVMaW5rKGxpbmtFbGVtZW50LCBvYmopIHtcclxuXHRcdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdFx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XHJcblx0XHJcblx0XHRpZihzb3VyY2VNYXApIHtcclxuXHRcdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcclxuXHRcdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XHJcblx0XHJcblx0XHR2YXIgb2xkU3JjID0gbGlua0VsZW1lbnQuaHJlZjtcclxuXHRcclxuXHRcdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cdFxyXG5cdFx0aWYob2xkU3JjKVxyXG5cdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcblx0fVxyXG5cblxuLyoqKi8gfSxcbi8qIDU0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cdGlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXHQvLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG5cdHZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKShjb250ZW50LCB7fSk7XG5cdGlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXHQvLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5cdGlmKGZhbHNlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguY3NzXCIpO1xuXHRcdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcblx0fVxuXG4vKioqLyB9LFxuLyogNTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcImRlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdFwiKTsgfTtcclxuXG5cbi8qKiovIH0sXG4vKiA1NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKF9fd2VicGFja19hbWRfb3B0aW9uc19fKSB7bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIHt9KSlcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHJlYWN0LWJvb3RzdHJhcC10YWJsZS5qc1xuICoqLyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgZTg2NDZlZDAyNTA4MjFhNTAzZWFcbiAqKi8iLCJpbXBvcnQgQm9vdHN0cmFwVGFibGUgZnJvbSAnLi9Cb290c3RyYXBUYWJsZSc7XHJcbmltcG9ydCBUYWJsZUhlYWRlckNvbHVtbiBmcm9tICcuL1RhYmxlSGVhZGVyQ29sdW1uJztcclxuaW1wb3J0IHtUYWJsZURhdGFTZXR9IGZyb20gJy4vc3RvcmUvVGFibGVEYXRhU3RvcmUnO1xyXG5cclxuaWYodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpe1xyXG4gIHdpbmRvdy5Cb290c3RyYXBUYWJsZSA9IEJvb3RzdHJhcFRhYmxlO1xyXG4gIHdpbmRvdy5UYWJsZUhlYWRlckNvbHVtbiA9IFRhYmxlSGVhZGVyQ29sdW1uO1xyXG4gIHdpbmRvdy5UYWJsZURhdGFTZXQgPSBUYWJsZURhdGFTZXQ7XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIEJvb3RzdHJhcFRhYmxlLFxyXG4gIFRhYmxlSGVhZGVyQ29sdW1uLFxyXG4gIFRhYmxlRGF0YVNldFxyXG59O1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9pbmRleC5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX187XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdFwiLFwiY29tbW9uanMyXCI6XCJyZWFjdFwiLFwiY29tbW9uanNcIjpcInJlYWN0XCIsXCJhbWRcIjpcInJlYWN0XCJ9XG4gKiogbW9kdWxlIGlkID0gMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIFNPUlRfREVTQzogXCJkZXNjXCIsXHJcbiAgU09SVF9BU0M6IFwiYXNjXCIsXHJcbiAgU0laRV9QRVJfUEFHRTogMTAsXHJcbiAgTkVYVF9QQUdFOiBcIj5cIixcclxuICBMQVNUX1BBR0U6IFwiPj5cIixcclxuICBQUkVfUEFHRTogXCI8XCIsXHJcbiAgRklSU1RfUEFHRTogXCI8PFwiLFxyXG4gIFJPV19TRUxFQ1RfQkdfQ09MT1I6IFwiXCIsXHJcbiAgUk9XX1NFTEVDVF9OT05FOiBcIm5vbmVcIixcclxuICBST1dfU0VMRUNUX1NJTkdMRTogXCJyYWRpb1wiLFxyXG4gIFJPV19TRUxFQ1RfTVVMVEk6IFwiY2hlY2tib3hcIixcclxuICBDRUxMX0VESVRfTk9ORTogXCJub25lXCIsXHJcbiAgQ0VMTF9FRElUX0NMSUNLOiBcImNsaWNrXCIsXHJcbiAgQ0VMTF9FRElUX0RCQ0xJQ0s6IFwiZGJjbGlja1wiLFxyXG4gIFNJWkVfUEVSX1BBR0VfTElTVDogWzEwLCAyNSwgMzAsIDUwXSxcclxuICBQQUdJTkFUSU9OX1NJWkU6IDUsXHJcbiAgTk9fREFUQV9URVhUOiBcIlRoZXJlIGlzIG5vIGRhdGEgdG8gZGlzcGxheVwiLFxyXG4gIFNIT1dfT05MWV9TRUxFQ1Q6IFwiU2hvdyBTZWxlY3RlZCBPbmx5XCIsXHJcbiAgU0hPV19BTEw6IFwiU2hvdyBBbGxcIixcclxuICBGSUxURVJfREVMQVk6IDUwMCxcclxuICBGSUxURVJfVFlQRToge1xyXG4gICAgVEVYVDogXCJUZXh0RmlsdGVyXCIsXHJcbiAgICBTRUxFQ1Q6IFwiU2VsZWN0RmlsdGVyXCIsXHJcbiAgICBOVU1CRVI6IFwiTnVtYmVyRmlsdGVyXCIsXHJcbiAgICBEQVRFOiBcIkRhdGVGaWx0ZXJcIixcclxuICAgIENVU1RPTTogXCJDdXN0b21GaWx0ZXJcIlxyXG4gIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9Db25zdC5qc1xuICoqLyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY2xhc3NuYW1lcy9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV80X187XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdERPTVwiLFwiY29tbW9uanMyXCI6XCJyZWFjdC1kb21cIixcImNvbW1vbmpzXCI6XCJyZWFjdC1kb21cIixcImFtZFwiOlwicmVhY3QtZG9tXCJ9XG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4vQ29uc3QnO1xyXG5pbXBvcnQgY2xhc3NTZXQgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbiAgcmVuZGVyU29ydENhcmV0KG9yZGVyKSB7XHJcbiAgICB2YXIgd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgd3JhcC5jbGFzc05hbWUgPSBcIm9yZGVyXCI7XHJcbiAgICBpZihvcmRlciA9PSBDb25zdC5TT1JUX0FTQykgd3JhcC5jbGFzc05hbWUgKz0gXCIgZHJvcHVwXCI7XHJcbiAgICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgIGlubmVyLmNsYXNzTmFtZSA9IFwiY2FyZXRcIjtcclxuICAgIGlubmVyLnN0eWxlLm1hcmdpbiA9IFwiMTBweCA1cHhcIjtcclxuICAgIHdyYXAuYXBwZW5kQ2hpbGQoaW5uZXIpO1xyXG4gICAgcmV0dXJuIHdyYXA7XHJcbiAgfSxcclxuXHJcbiAgcmVuZGVyUmVhY3RTb3J0Q2FyZXQob3JkZXIpe1xyXG4gICAgdmFyIG9yZGVyQ2xhc3MgPSBjbGFzc1NldChcIm9yZGVyXCIsIHtcclxuICAgICAgJ2Ryb3B1cCc6IG9yZGVyID09IENvbnN0LlNPUlRfQVNDXHJcbiAgICB9KTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17b3JkZXJDbGFzc30+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZXRcIiBzdHlsZT17e21hcmdpbjogJzEwcHggNXB4J319Pjwvc3Bhbj5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICBnZXRTY3JvbGxCYXJXaWR0aCgpe1xyXG4gICAgdmFyIGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgaW5uZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuICAgIGlubmVyLnN0eWxlLmhlaWdodCA9IFwiMjAwcHhcIjtcclxuXHJcbiAgICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG91dGVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgb3V0ZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcclxuICAgIG91dGVyLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xyXG4gICAgb3V0ZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICBvdXRlci5zdHlsZS53aWR0aCA9IFwiMjAwcHhcIjtcclxuICAgIG91dGVyLnN0eWxlLmhlaWdodCA9IFwiMTUwcHhcIjtcclxuICAgIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuICAgIG91dGVyLmFwcGVuZENoaWxkIChpbm5lcik7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCAob3V0ZXIpO1xyXG4gICAgdmFyIHcxID0gaW5uZXIub2Zmc2V0V2lkdGg7XHJcbiAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xyXG4gICAgdmFyIHcyID0gaW5uZXIub2Zmc2V0V2lkdGg7XHJcbiAgICBpZiAodzEgPT0gdzIpIHcyID0gb3V0ZXIuY2xpZW50V2lkdGg7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCAob3V0ZXIpO1xyXG5cclxuICAgIHJldHVybiAodzEgLSB3Mik7XHJcbiAgfVxyXG5cclxufTtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbC5qc1xuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBTd2l0Y2ggZnJvbSAncmMtc3dpdGNoJztcclxuaW1wb3J0ICdyYy1zd2l0Y2gvYXNzZXRzL2luZGV4LmNzcyc7XHJcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcclxuXHJcbnZhciBFZGl0b3IgPSBmdW5jdGlvbiAoZWRpdGFibGUsIGF0dHIsIGZvcm1hdCwgZWRpdG9yQ2xhc3MsIGRlZmF1bHRWYWx1ZSkge1xyXG5cclxuXHJcbiAgICBpZiAoZWRpdGFibGUgPT09IHRydWUgfHwgdHlwZW9mIGVkaXRhYmxlID09PSBcInN0cmluZ1wiKSB7Ly9zaW1wbGUgZGVjbGFyZVxyXG4gICAgICAgIHZhciB0eXBlID0gZWRpdGFibGUgPT09IHRydWUgPyAndGV4dCcgOiBlZGl0YWJsZTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8aW5wdXQgey4uLmF0dHJ9IHR5cGU9e3R5cGV9IGRlZmF1bHRWYWx1ZT17ZGVmYXVsdFZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17KGVkaXRvckNsYXNzfHxcIlwiKStcIiBmb3JtLWNvbnRyb2wgZWRpdG9yIGVkaXQtdGV4dFwifS8+XHJcbiAgICAgICAgKVxyXG4gICAgfSBlbHNlIGlmICghZWRpdGFibGUpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IGVkaXRhYmxlID09PSB0cnVlID8gJ3RleHQnIDogZWRpdGFibGU7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGlucHV0IHsuLi5hdHRyfSB0eXBlPXt0eXBlfSBkZWZhdWx0VmFsdWU9e2RlZmF1bHRWYWx1ZX0gZGlzYWJsZWQ9J2Rpc2FibGVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17KGVkaXRvckNsYXNzfHxcIlwiKStcIiBmb3JtLWNvbnRyb2wgZWRpdG9yIGVkaXQtdGV4dFwifS8+XHJcbiAgICAgICAgKVxyXG4gICAgfSBlbHNlIGlmIChlZGl0YWJsZS50eXBlKSB7Ly9zdGFuZGFyZCBkZWNsYXJlXHJcbiAgICAgICAgLy9wdXQgc3R5bGUgaWYgZXhpc3RcclxuICAgICAgICBlZGl0YWJsZS5zdHlsZSAmJiAoYXR0ci5zdHlsZSA9IGVkaXRhYmxlLnN0eWxlKTtcclxuXHJcbiAgICAgICAgLy9wdXQgY2xhc3MgaWYgZXhpc3RcclxuICAgICAgICBhdHRyLmNsYXNzTmFtZSA9IChlZGl0b3JDbGFzcyB8fCBcIlwiKSArXHJcbiAgICAgICAgICAgIFwiIGZvcm0tY29udHJvbCBlZGl0b3IgZWRpdC1cIiArXHJcbiAgICAgICAgICAgIGVkaXRhYmxlLnR5cGUgK1xyXG4gICAgICAgICAgICAoZWRpdGFibGUuY2xhc3NOYW1lID8gKFwiIFwiICsgZWRpdGFibGUuY2xhc3NOYW1lKSA6IFwiXCIpO1xyXG5cclxuICAgICAgICBpZiAoZWRpdGFibGUudHlwZSA9PT0gJ3NlbGVjdCcpIHsvL3Byb2Nlc3Mgc2VsZWN0IGlucHV0XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gW10sIHZhbHVlcyA9IGVkaXRhYmxlLm9wdGlvbnMudmFsdWVzO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7Ly9vbmx5IGNhbiB1c2UgYXJycmF5IGRhdGEgZm9yIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgIHZhciByb3dWYWx1ZTtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93VmFsdWUgPSBmb3JtYXQgPyBmb3JtYXQoZCkgOiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXsnb3B0aW9uJytpfSB2YWx1ZT17ZH0+e3Jvd1ZhbHVlfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IHsuLi5hdHRyfSBkZWZhdWx0VmFsdWU9e2RlZmF1bHRWYWx1ZX0+e29wdGlvbnN9PC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlZGl0YWJsZS50eXBlID09PSAndGV4dGFyZWEnKSB7Ly9wcm9jZXNzIHRleHRhcmVhIGlucHV0XHJcbiAgICAgICAgICAgIC8vcHV0ICBvdGhlciBpZiBleGlzdFxyXG4gICAgICAgICAgICBlZGl0YWJsZS5jb2xzICYmIChhdHRyLmNvbHMgPSBlZGl0YWJsZS5jb2xzKTtcclxuICAgICAgICAgICAgZWRpdGFibGUucm93cyAmJiAoYXR0ci5yb3dzID0gZWRpdGFibGUucm93cyk7XHJcbiAgICAgICAgICAgIHZhciBrZXlVcEhhbmRsZXIgPSBhdHRyLm9uS2V5RG93biwgc2F2ZUJ0biA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChrZXlVcEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIGF0dHIub25LZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlICE9IDEzKSB7IC8vbm90IFByZXNzZWQgRU5URVJcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5VXBIYW5kbGVyKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBzYXZlQnRuID0gPGJ1dHRvIGNsYXNzTmFtZT1cImJ0biBidG4taW5mbyBidG4teHMgdGV4dGFyZWEtc2F2ZS1idG5cIiBvbkNsaWNrPXtrZXlVcEhhbmRsZXJ9PnNhdmU8L2J1dHRvPlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgey4uLmF0dHJ9IGRlZmF1bHRWYWx1ZT17ZGVmYXVsdFZhbHVlfT48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgICAgIHtzYXZlQnRufVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZWRpdGFibGUudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gJ3RydWU6ZmFsc2UnO1xyXG4gICAgICAgICAgICBpZiAoZWRpdGFibGUub3B0aW9ucyAmJiBlZGl0YWJsZS5vcHRpb25zLnZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgLy8gdmFsdWVzID0gZWRpdGFibGUub3B0aW9ucy52YWx1ZXMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IGVkaXRhYmxlLm9wdGlvbnMudmFsdWVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF0dHIuY2xhc3NOYW1lID0gYXR0ci5jbGFzc05hbWUucmVwbGFjZSgnZm9ybS1jb250cm9sJywgJycpO1xyXG4gICAgICAgICAgICBhdHRyLmNsYXNzTmFtZSArPSAnIGNoZWNrYm94IHB1bGwtcmlnaHQnO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBkZWZhdWx0VmFsdWUgJiYgZGVmYXVsdFZhbHVlLnRvU3RyaW5nKCkgPT0gdmFsdWVzLnNwbGl0KCc6JylbMF0gPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHsuLi5hdHRyfSB0eXBlPSdjaGVja2JveCcgdmFsdWU9e3ZhbHVlc30gZGVmYXVsdENoZWNrZWQ9e2NoZWNrZWR9Lz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVkaXRhYmxlLnR5cGUgPT09ICdzd2l0Y2gnKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSAndHJ1ZTpmYWxzZSc7XHJcbiAgICAgICAgICAgIGF0dHIuY2xhc3NOYW1lID0gYXR0ci5jbGFzc05hbWUucmVwbGFjZSgnZm9ybS1jb250cm9sJywgJycpO1xyXG4gICAgICAgICAgICBhdHRyLmNsYXNzTmFtZSArPSAnIGNoZWNrYm94IHB1bGwtcmlnaHQnO1xyXG4gICAgICAgICAgICBsZXQgY2hlY2tlZCA9IGRlZmF1bHRWYWx1ZSAmJiBkZWZhdWx0VmFsdWUudG9TdHJpbmcoKSA9PSB2YWx1ZXMuc3BsaXQoJzonKVswXSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxTd2l0Y2ggY2xhc3NOYW1lPXthdHRyLmNsYXNzTmFtZX0gZGVmYXVsdENoZWNrZWQ9e2NoZWNrZWR9Lz5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZWRpdGFibGUudHlwZSA9PT0gJ3JlYWN0LXNlbGVjdCcpIHtcclxuICAgICAgICAgICAgbGV0IG11bHRpT3B0ID0gdHlwZW9mIGVkaXRhYmxlLm9wdGlvbnMubXVsdGkgIT09ICd1bmRlZmluZWQnID8gZWRpdGFibGUub3B0aW9ucy5tdWx0aSA6IGZhbHNlXHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0IGNsYXNzTmFtZT1cInB1bGwtcmlnaHRcIiBvcHRpb25zPXtlZGl0YWJsZS5vcHRpb25zLnZhbHVlc30gbXVsdGk9e211bHRpT3B0fSBzaW1wbGVWYWx1ZT17dHJ1ZX0vPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIHsvL3Byb2Nlc3Mgb3RoZXIgaW5wdXQgdHlwZS4gYXMgcGFzc3dvcmQsdXJsLGVtYWlsLi4uXHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgey4uLmF0dHJ9IHR5cGU9e3R5cGV9IGRlZmF1bHRWYWx1ZT17ZGVmYXVsdFZhbHVlfS8+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL2RlZmF1bHQgcmV0dXJuIGZvciBvdGhlciBjYXNlIG9mIGVkaXRhYmxlXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxpbnB1dCB7Li4uYXR0cn0gdHlwZT1cInRleHRcIiBjbGFzc05hbWU9eyhlZGl0b3JDbGFzc3x8XCJcIikrXCIgZm9ybS1jb250cm9sIGVkaXRvciBlZGl0LXRleHRcIn0vPlxyXG4gICAgKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9FZGl0b3IuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi9Db25zdCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIFRvYXN0Q29udGFpbmVyLFxyXG4gIFRvYXN0TWVzc2FnZSxcclxufSBmcm9tIFwicmVhY3QtdG9hc3RyXCI7XHJcblxyXG5cclxudmFyIFRvYXN0ck1lc3NhZ2VGYWN0b3J5PVJlYWN0LmNyZWF0ZUZhY3RvcnkoVG9hc3RNZXNzYWdlLmFuaW1hdGlvbik7XHJcblxyXG5jbGFzcyBOb3RpZmljYXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcbiAgLy8gYWxsb3cgdHlwZSBpcyBzdWNjZXNzLGluZm8sd2FybmluZyxlcnJvclxyXG4gIG5vdGljZSh0eXBlLG1zZyx0aXRsZSl7XHJcbiAgICB0aGlzLnJlZnMudG9hc3RyW3R5cGVdKFxyXG4gICAgICAgIG1zZyx0aXRsZSwge1xyXG4gICAgICAgICAgbW9kZTonc2luZ2xlJyxcclxuICAgICAgICAgIHRpbWVPdXQ6IDUwMDAsXHJcbiAgICAgICAgICBleHRlbmRlZFRpbWVPdXQ6IDEwMDAsXHJcbiAgICAgICAgICBzaG93QW5pbWF0aW9uOiBcImFuaW1hdGVkICBib3VuY2VJblwiLFxyXG4gICAgICAgICAgaGlkZUFuaW1hdGlvbjogXCJhbmltYXRlZCBib3VuY2VPdXRcIlxyXG4gICAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCl7XHJcbiAgICByZXR1cm4oXHJcbiAgICAgICAgPFRvYXN0Q29udGFpbmVyIHJlZj1cInRvYXN0clwiIHRvYXN0TWVzc2FnZUZhY3Rvcnk9e1RvYXN0ck1lc3NhZ2VGYWN0b3J5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ0b2FzdC1jb250YWluZXJcIiAgY2xhc3NOYW1lPVwidG9hc3QtdG9wLXJpZ2h0XCI+PC9Ub2FzdENvbnRhaW5lcj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWNhdGlvbjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvTm90aWZpY2F0aW9uLmpzXG4gKiovIiwiaW1wb3J0IENvbnN0IGZyb20gXCIuLi9Db25zdFwiO1xyXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xyXG5cclxuZnVuY3Rpb24gX3NvcnQoYXJyLCBzb3J0RmllbGQsIG9yZGVyLCBzb3J0RnVuYykge1xyXG4gIG9yZGVyID0gb3JkZXIudG9Mb3dlckNhc2UoKTtcclxuICBhcnIuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgaWYgKHNvcnRGdW5jKSB7XHJcbiAgICAgIHJldHVybiBzb3J0RnVuYyhhLCBiLCBvcmRlciwgc29ydEZpZWxkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvcmRlciA9PSBDb25zdC5TT1JUX0RFU0MpIHtcclxuICAgICAgICByZXR1cm4gYVtzb3J0RmllbGRdID4gYltzb3J0RmllbGRdID8gLTEgOiAoKGFbc29ydEZpZWxkXSA8IGJbc29ydEZpZWxkXSkgPyAxIDogMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGFbc29ydEZpZWxkXSA8IGJbc29ydEZpZWxkXSA/IC0xIDogKChhW3NvcnRGaWVsZF0gPiBiW3NvcnRGaWVsZF0pID8gMSA6IDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBhcnI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUYWJsZURhdGFTZXQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgIHN1cGVyKGRhdGEpO1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICB9XHJcblxyXG4gIHNldERhdGEoZGF0YSkge1xyXG4gICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5kYXRhID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldERhdGEoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlRGF0YVN0b3JlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIHRoaXMuY29sSW5mb3MgPSBudWxsO1xyXG4gICAgdGhpcy5maWx0ZXJlZERhdGEgPSBudWxsO1xyXG4gICAgdGhpcy5pc09uRmlsdGVyID0gZmFsc2U7XHJcbiAgICB0aGlzLmZpbHRlck9iaiA9IG51bGw7XHJcbiAgICB0aGlzLnNlYXJjaFRleHQgPSBudWxsO1xyXG4gICAgdGhpcy5zb3J0T2JqID0gbnVsbDtcclxuICAgIHRoaXMucGFnZU9iaiA9IHt9O1xyXG4gICAgdGhpcy5zZWxlY3RlZCA9IFtdO1xyXG4gICAgdGhpcy5tdWx0aUNvbHVtblNlYXJjaCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zaG93T25seVNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnJlbW90ZSA9IGZhbHNlOyAvLyByZW1vdGUgZGF0YVxyXG4gIH1cclxuXHJcbiAgc2V0UHJvcHMocHJvcHMpIHtcclxuICAgIHRoaXMua2V5RmllbGQgPSBwcm9wcy5rZXlGaWVsZDtcclxuICAgIHRoaXMuZW5hYmxlUGFnaW5hdGlvbiA9IHByb3BzLmlzUGFnaW5hdGlvbjtcclxuICAgIHRoaXMuY29sSW5mb3MgPSBwcm9wcy5jb2xJbmZvcztcclxuICAgIHRoaXMucmVtb3RlID0gcHJvcHMucmVtb3RlO1xyXG4gICAgdGhpcy5tdWx0aUNvbHVtblNlYXJjaCA9IHByb3BzLm11bHRpQ29sdW1uU2VhcmNoO1xyXG4gIH1cclxuXHJcbiAgc2V0RGF0YShkYXRhKSB7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgaWYgKHRoaXMuaXNPbkZpbHRlcikge1xyXG4gICAgICBpZiAobnVsbCAhPT0gdGhpcy5maWx0ZXJPYmopIHRoaXMuZmlsdGVyKHRoaXMuZmlsdGVyT2JqKTtcclxuICAgICAgaWYgKG51bGwgIT09IHRoaXMuc2VhcmNoVGV4dCkgdGhpcy5zZWFyY2godGhpcy5zZWFyY2hUZXh0KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnNvcnRPYmopIHtcclxuICAgICAgdGhpcy5zb3J0KHRoaXMuc29ydE9iai5vcmRlciwgdGhpcy5zb3J0T2JqLnNvcnRGaWVsZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRTb3J0SW5mbygpIHtcclxuICAgIHJldHVybiB0aGlzLnNvcnRPYmo7XHJcbiAgfVxyXG5cclxuICBzZXRTZWxlY3RlZFJvd0tleShzZWxlY3RlZFJvd0tleXMpIHtcclxuICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZFJvd0tleXM7XHJcbiAgfVxyXG5cclxuICBnZXRTZWxlY3RlZFJvd0tleXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZDtcclxuICB9XHJcblxyXG4gIGdldEN1cnJlbnREaXNwbGF5RGF0YSgpIHtcclxuICAgIGlmICh0aGlzLmlzT25GaWx0ZXIpIHJldHVybiB0aGlzLmZpbHRlcmVkRGF0YTtcclxuICAgIGVsc2UgcmV0dXJuIHRoaXMuZGF0YTtcclxuICB9XHJcblxyXG4gIGlnbm9yZU5vblNlbGVjdGVkKCkge1xyXG4gICAgdGhpcy5zaG93T25seVNlbGVjdGVkID0gIXRoaXMuc2hvd09ubHlTZWxlY3RlZDtcclxuICAgIGlmKHRoaXMuc2hvd09ubHlTZWxlY3RlZCl7XHJcbiAgICAgIHRoaXMuaXNPbkZpbHRlciA9IHRydWU7XHJcbiAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gdGhpcy5kYXRhLmZpbHRlciggcm93ID0+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5zZWxlY3RlZC5maW5kKHggPT4gcm93W3RoaXMua2V5RmllbGRdID09PSB4KVxyXG4gICAgICAgIHJldHVybiB0eXBlb2YgcmVzdWx0ICE9PSAndW5kZWZpbmVkJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmlzT25GaWx0ZXIgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNvcnQob3JkZXIsIHNvcnRGaWVsZCkge1xyXG4gICAgdGhpcy5zb3J0T2JqID0ge1xyXG4gICAgICBvcmRlcjogb3JkZXIsXHJcbiAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBjdXJyZW50RGlzcGxheURhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xyXG4gICAgaWYoIXRoaXMuY29sSW5mb3Nbc29ydEZpZWxkXSkgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgY29uc3QgeyBzb3J0RnVuYyB9ID0gdGhpcy5jb2xJbmZvc1tzb3J0RmllbGRdO1xyXG4gICAgY3VycmVudERpc3BsYXlEYXRhID0gX3NvcnQoY3VycmVudERpc3BsYXlEYXRhLCBzb3J0RmllbGQsIG9yZGVyLCBzb3J0RnVuYyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwYWdlKHBhZ2UsIHNpemVQZXJQYWdlKSB7XHJcbiAgICB0aGlzLnBhZ2VPYmouZW5kID0gcGFnZSAqIHNpemVQZXJQYWdlIC0gMTtcclxuICAgIHRoaXMucGFnZU9iai5zdGFydCA9IHRoaXMucGFnZU9iai5lbmQgLSAoc2l6ZVBlclBhZ2UgLSAxKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZWRpdChuZXdWYWwsIHJvd0luZGV4LCBmaWVsZE5hbWUpIHtcclxuICAgIGxldCBjdXJyZW50RGlzcGxheURhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xyXG4gICAgbGV0IHJvd0tleUNhY2hlO1xyXG4gICAgaWYgKCF0aGlzLmVuYWJsZVBhZ2luYXRpb24pIHtcclxuICAgICAgY3VycmVudERpc3BsYXlEYXRhW3Jvd0luZGV4XVtmaWVsZE5hbWVdID0gbmV3VmFsO1xyXG4gICAgICByb3dLZXlDYWNoZSA9IGN1cnJlbnREaXNwbGF5RGF0YVtyb3dJbmRleF1bdGhpcy5rZXlGaWVsZF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdXJyZW50RGlzcGxheURhdGFbdGhpcy5wYWdlT2JqLnN0YXJ0ICsgcm93SW5kZXhdW2ZpZWxkTmFtZV0gPSBuZXdWYWw7XHJcbiAgICAgIHJvd0tleUNhY2hlID0gY3VycmVudERpc3BsYXlEYXRhW3RoaXMucGFnZU9iai5zdGFydCArIHJvd0luZGV4XVt0aGlzLmtleUZpZWxkXTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmlzT25GaWx0ZXIpIHtcclxuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgIGlmIChyb3dbdGhpcy5rZXlGaWVsZF0gPT09IHJvd0tleUNhY2hlKSB7XHJcbiAgICAgICAgICByb3dbZmllbGROYW1lXSA9IG5ld1ZhbDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHRoaXMpO1xyXG4gICAgICBpZiAobnVsbCAhPT0gdGhpcy5maWx0ZXJPYmopIHRoaXMuZmlsdGVyKHRoaXMuZmlsdGVyT2JqKTtcclxuICAgICAgaWYgKG51bGwgIT09IHRoaXMuc2VhcmNoVGV4dCkgdGhpcy5zZWFyY2godGhpcy5zZWFyY2hUZXh0KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgYWRkQXRCZWdpbihuZXdPYmopIHtcclxuICAgIGlmICghbmV3T2JqW3RoaXMua2V5RmllbGRdIHx8IG5ld09ialt0aGlzLmtleUZpZWxkXS50b1N0cmluZygpID09PSAnJykge1xyXG4gICAgICB0aHJvdyB0aGlzLmtleUZpZWxkICsgXCIgY2FuJ3QgYmUgZW1wdHkgdmFsdWUuXCI7XHJcbiAgICB9XHJcbiAgICBsZXQgY3VycmVudERpc3BsYXlEYXRhID0gdGhpcy5nZXRDdXJyZW50RGlzcGxheURhdGEoKTtcclxuICAgIGN1cnJlbnREaXNwbGF5RGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgaWYgKHJvd1t0aGlzLmtleUZpZWxkXS50b1N0cmluZygpID09PSBuZXdPYmpbdGhpcy5rZXlGaWVsZF0udG9TdHJpbmcoKSkge1xyXG4gICAgICAgIHRocm93IHRoaXMua2V5RmllbGQgKyBcIiBcIiArIG5ld09ialt0aGlzLmtleUZpZWxkXSArIFwiIGFscmVhZHkgZXhpc3RzXCI7XHJcbiAgICAgIH1cclxuICAgIH0sIHRoaXMpO1xyXG4gICAgY29uc29sZS5sb2coJ0BAJyk7XHJcbiAgICBjdXJyZW50RGlzcGxheURhdGEudW5zaGlmdChuZXdPYmopO1xyXG4gICAgaWYgKHRoaXMuaXNPbkZpbHRlcikge1xyXG4gICAgICB0aGlzLmRhdGEudW5zaGlmdChuZXdPYmopO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkKG5ld09iaikge1xyXG4gICAgaWYgKCFuZXdPYmpbdGhpcy5rZXlGaWVsZF0gfHwgbmV3T2JqW3RoaXMua2V5RmllbGRdLnRvU3RyaW5nKCkgPT09ICcnKSB7XHJcbiAgICAgIHRocm93IHRoaXMua2V5RmllbGQgKyBcIiBjYW4ndCBiZSBlbXB0eSB2YWx1ZS5cIjtcclxuICAgIH1cclxuICAgIGxldCBjdXJyZW50RGlzcGxheURhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xyXG4gICAgY3VycmVudERpc3BsYXlEYXRhLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICBpZiAocm93W3RoaXMua2V5RmllbGRdLnRvU3RyaW5nKCkgPT09IG5ld09ialt0aGlzLmtleUZpZWxkXS50b1N0cmluZygpKSB7XHJcbiAgICAgICAgdGhyb3cgdGhpcy5rZXlGaWVsZCArIFwiIFwiICsgbmV3T2JqW3RoaXMua2V5RmllbGRdICsgXCIgYWxyZWFkeSBleGlzdHNcIjtcclxuICAgICAgfVxyXG4gICAgfSwgdGhpcyk7XHJcblxyXG4gICAgY3VycmVudERpc3BsYXlEYXRhLnB1c2gobmV3T2JqKTtcclxuICAgIGlmICh0aGlzLmlzT25GaWx0ZXIpIHtcclxuICAgICAgdGhpcy5kYXRhLnB1c2gobmV3T2JqKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZShyb3dLZXkpIHtcclxuICAgIGxldCBjdXJyZW50RGlzcGxheURhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xyXG4gICAgbGV0IHJlc3VsdCA9IGN1cnJlbnREaXNwbGF5RGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICByZXR1cm4gcm93S2V5LmluZGV4T2Yocm93W3RoaXMua2V5RmllbGRdKSA9PSAtMTtcclxuICAgIH0sIHRoaXMpO1xyXG5cclxuICAgIGlmICh0aGlzLmlzT25GaWx0ZXIpIHtcclxuICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgcmV0dXJuIHJvd0tleS5pbmRleE9mKHJvd1t0aGlzLmtleUZpZWxkXSkgPT0gLTE7XHJcbiAgICAgIH0sIHRoaXMpO1xyXG4gICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHJlc3VsdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZGF0YSA9IHJlc3VsdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbHRlcihmaWx0ZXJPYmopIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhmaWx0ZXJPYmopLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gbnVsbDtcclxuICAgICAgdGhpcy5pc09uRmlsdGVyID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZmlsdGVyT2JqID0gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZmlsdGVyT2JqID0gZmlsdGVyT2JqO1xyXG4gICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoIHJvdyA9PiB7XHJcbiAgICAgICAgbGV0IHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICBsZXQgZmlsdGVyVmFsO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBmaWx0ZXJPYmopIHtcclxuICAgICAgICAgIGxldCB0YXJnZXRWYWwgPSByb3dba2V5XTtcclxuXHJcbiAgICAgICAgICBzd2l0Y2ggKGZpbHRlck9ialtrZXldLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDb25zdC5GSUxURVJfVFlQRS5OVU1CRVI6XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBmaWx0ZXJWYWwgPSBmaWx0ZXJPYmpba2V5XS52YWx1ZS5udW1iZXI7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBDb25zdC5GSUxURVJfVFlQRS5DVVNUT006XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBmaWx0ZXJWYWwgPSAodHlwZW9mIGZpbHRlck9ialtrZXldLnZhbHVlID09PSBcIm9iamVjdFwiKSA/XHJcbiAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XHJcbiAgICAgICAgICAgICAgICAgICh0eXBlb2YgZmlsdGVyT2JqW2tleV0udmFsdWUgPT09IFwic3RyaW5nXCIpID8gZmlsdGVyT2JqW2tleV0udmFsdWUudG9Mb3dlckNhc2UoKSA6IGZpbHRlck9ialtrZXldLnZhbHVlO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICBmaWx0ZXJWYWwgPSAodHlwZW9mIGZpbHRlck9ialtrZXldLnZhbHVlID09PSBcInN0cmluZ1wiKSA/IGZpbHRlck9ialtrZXldLnZhbHVlLnRvTG93ZXJDYXNlKCkgOiBmaWx0ZXJPYmpba2V5XS52YWx1ZTtcclxuICAgICAgICAgICAgICBpZiAoZmlsdGVyVmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgb2xkIGZpbHRlclxyXG4gICAgICAgICAgICAgICAgZmlsdGVyVmFsID0gZmlsdGVyT2JqW2tleV0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5jb2xJbmZvc1trZXldKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZm9ybWF0LCBmaWx0ZXJGb3JtYXR0ZWQsIGZvcm1hdEV4dHJhRGF0YSB9ID0gdGhpcy5jb2xJbmZvc1trZXldO1xyXG4gICAgICAgICAgICBpZihmaWx0ZXJGb3JtYXR0ZWQgJiYgZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgdGFyZ2V0VmFsID0gZm9ybWF0KHJvd1trZXldLCByb3csIGZvcm1hdEV4dHJhRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzd2l0Y2ggKGZpbHRlck9ialtrZXldLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDb25zdC5GSUxURVJfVFlQRS5OVU1CRVI6XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB2YWxpZCA9IHRoaXMuZmlsdGVyTnVtYmVyKHRhcmdldFZhbCwgZmlsdGVyVmFsLCBmaWx0ZXJPYmpba2V5XS52YWx1ZS5jb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIENvbnN0LkZJTFRFUl9UWVBFLkRBVEU6XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB2YWxpZCA9IHRoaXMuZmlsdGVyRGF0ZSh0YXJnZXRWYWwsIGZpbHRlclZhbCk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBDb25zdC5GSUxURVJfVFlQRS5DVVNUT006XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB2YWxpZCA9IHRoaXMuZmlsdGVyQ3VzdG9tKHRhcmdldFZhbCwgZmlsdGVyVmFsLCBmaWx0ZXJPYmpba2V5XS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgIHZhbGlkID0gdGhpcy5maWx0ZXJUZXh0KHRhcmdldFZhbCwgZmlsdGVyVmFsKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCF2YWxpZCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5pc09uRmlsdGVyID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbHRlck51bWJlcih0YXJnZXRWYWwsIGZpbHRlclZhbCwgY29tcGFyYXRvcikge1xyXG4gICAgbGV0IHZhbGlkID0gdHJ1ZTtcclxuICAgIHN3aXRjaCAoY29tcGFyYXRvcikge1xyXG4gICAgICBjYXNlIFwiPVwiOlxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKHRhcmdldFZhbCAhPSBmaWx0ZXJWYWwpIHtcclxuICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgXCI+XCI6XHJcbiAgICAgIHtcclxuICAgICAgICBpZiAodGFyZ2V0VmFsIDw9IGZpbHRlclZhbCkge1xyXG4gICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBcIj49XCI6XHJcbiAgICAgIHtcclxuICAgICAgICBpZiAodGFyZ2V0VmFsIDwgZmlsdGVyVmFsKSB7XHJcbiAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKHRhcmdldFZhbCA+PSBmaWx0ZXJWYWwpIHtcclxuICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgXCI8PVwiOlxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKHRhcmdldFZhbCA+IGZpbHRlclZhbCkge1xyXG4gICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBcIiE9XCI6XHJcbiAgICAgIHtcclxuICAgICAgICBpZiAodGFyZ2V0VmFsID09IGZpbHRlclZhbCkge1xyXG4gICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJOdW1iZXIgY29tcGFyYXRvciBwcm92aWRlZCBpcyBub3Qgc3VwcG9ydGVkXCIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsaWQ7XHJcbiAgfVxyXG5cclxuICBmaWx0ZXJEYXRlKHRhcmdldFZhbCwgZmlsdGVyVmFsKSB7XHJcbiAgICByZXR1cm4gKHRhcmdldFZhbC5nZXREYXRlKCkgPT0gZmlsdGVyVmFsLmdldERhdGUoKSAmJlxyXG4gICAgICAgIHRhcmdldFZhbC5nZXRNb250aCgpID09IGZpbHRlclZhbC5nZXRNb250aCgpICYmXHJcbiAgICAgICAgdGFyZ2V0VmFsLmdldEZ1bGxZZWFyKCkgPT0gZmlsdGVyVmFsLmdldEZ1bGxZZWFyKCkpO1xyXG4gIH1cclxuXHJcbiAgZmlsdGVyQ3VzdG9tKHRhcmdldFZhbCwgZmlsdGVyVmFsLCBjYWxsYmFja0luZm8pIHtcclxuICAgIGlmIChjYWxsYmFja0luZm8gIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2tJbmZvID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIHJldHVybiBjYWxsYmFja0luZm8uY2FsbGJhY2sodGFyZ2V0VmFsLCBjYWxsYmFja0luZm8uY2FsbGJhY2tQYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmlsdGVyVGV4dCh0YXJnZXRWYWwsIGZpbHRlclZhbCk7XHJcbiAgfVxyXG5cclxuICBmaWx0ZXJUZXh0KHRhcmdldFZhbCwgZmlsdGVyVmFsKSB7XHJcbiAgICBpZiAodGFyZ2V0VmFsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlclZhbCkgPT0gLTEpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyogR2VuZXJhbCBzZWFyY2ggZnVuY3Rpb25cclxuICAgKiBJdCB3aWxsIHNlYXJjaCBmb3IgdGhlIHRleHQgaWYgdGhlIGlucHV0IGluY2x1ZGVzIHRoYXQgdGV4dDtcclxuICAgKiBJdCB3aWxsIHNlYXJjaCBmb3IgZXhhY3QgbnVtYmVyIGlmIHRoZSBpbnB1dCBpcyB0aGF0IG51bWJlclxyXG4gICAqL1xyXG4gIHNlYXJjaChzZWFyY2hUZXh0KSB7XHJcbiAgICBpZiAoc2VhcmNoVGV4dC50cmltKCkgPT09IFwiXCIpIHtcclxuICAgICAgdGhpcy5maWx0ZXJlZERhdGEgPSBudWxsO1xyXG4gICAgICB0aGlzLmlzT25GaWx0ZXIgPSBmYWxzZTtcclxuICAgICAgdGhpcy5zZWFyY2hUZXh0ID0gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2VhcmNoVGV4dCA9IHNlYXJjaFRleHQ7XHJcbiAgICAgIGxldCBzZWFyY2hUZXh0QXJyYXkgPSBbXTtcclxuXHJcbiAgICAgIGlmICh0aGlzLm11bHRpQ29sdW1uU2VhcmNoKSB7XHJcbiAgICAgICAgc2VhcmNoVGV4dEFycmF5ID0gc2VhcmNoVGV4dC5zcGxpdCgnICcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlYXJjaFRleHRBcnJheS5wdXNoKHNlYXJjaFRleHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoIHJvdyA9PiB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJvdyk7XHJcbiAgICAgICAgbGV0IHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gZm9yIGxvb3BzIGFyZSB1Z2x5LCBidXQgcGVyZm9ybWFuY2UgbWF0dGVycyBoZXJlLlxyXG4gICAgICAgIC8vIEFuZCB5b3UgY2FudCBicmVhayBmcm9tIGEgZm9yRWFjaC5cclxuICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9mb3ItdnMtZm9yZWFjaC82NlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBrZXlzTGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBrZXlzTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICBpZiAodGhpcy5jb2xJbmZvc1trZXldICYmIHJvd1trZXldKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZm9ybWF0LCBmaWx0ZXJGb3JtYXR0ZWQsIGZvcm1hdEV4dHJhRGF0YSwgc2VhcmNoYWJsZSwgaGlkZGVuIH0gPSB0aGlzLmNvbEluZm9zW2tleV07XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRWYWwgPSByb3dba2V5XTtcclxuICAgICAgICAgICAgaWYgKHNlYXJjaGFibGUpIHtcclxuICAgICAgICAgICAgICBpZiAoZmlsdGVyRm9ybWF0dGVkICYmIGZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0VmFsID0gZm9ybWF0KHRhcmdldFZhbCwgcm93LCBmb3JtYXRFeHRyYURhdGEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgdGV4dExlbmd0aCA9IHNlYXJjaFRleHRBcnJheS5sZW5ndGg7IGogPCB0ZXh0TGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlclZhbCA9IHNlYXJjaFRleHRBcnJheVtqXS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFZhbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJWYWwpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsaWQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmlzT25GaWx0ZXIgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YUlnbm9yaW5nUGFnaW5hdGlvbigpIHtcclxuICAgIGxldCBfZGF0YSA9IHRoaXMuZ2V0Q3VycmVudERpc3BsYXlEYXRhKCk7XHJcbiAgICByZXR1cm4gX2RhdGE7XHJcbiAgfVxyXG5cclxuICBnZXQoKSB7XHJcbiAgICBsZXQgX2RhdGEgPSB0aGlzLmdldEN1cnJlbnREaXNwbGF5RGF0YSgpO1xyXG5cclxuICAgIGlmIChfZGF0YS5sZW5ndGggPT0gMCkgcmV0dXJuIF9kYXRhO1xyXG5cclxuICAgIGlmICh0aGlzLnJlbW90ZSB8fCAhdGhpcy5lbmFibGVQYWdpbmF0aW9uKSB7XHJcbiAgICAgIHJldHVybiBfZGF0YTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMucGFnZU9iai5zdGFydDsgaSA8PSB0aGlzLnBhZ2VPYmouZW5kOyBpKyspIHtcclxuICAgICAgICByZXN1bHQucHVzaChfZGF0YVtpXSk7XHJcbiAgICAgICAgaWYgKGkgKyAxID09IF9kYXRhLmxlbmd0aClicmVhaztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0S2V5RmllbGQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5rZXlGaWVsZDtcclxuICB9XHJcblxyXG4gIGdldERhdGFOdW0oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50RGlzcGxheURhdGEoKS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBpc0NoYW5nZWRQYWdlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZU9iai5zdGFydCAmJiB0aGlzLnBhZ2VPYmouZW5kID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxsUm93a2V5KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0YS5tYXAoZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICByZXR1cm4gcm93W3RoaXMua2V5RmllbGRdO1xyXG4gICAgfSwgdGhpcyk7XHJcbiAgfVxyXG5cclxufVxyXG47XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3N0b3JlL1RhYmxlRGF0YVN0b3JlLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vU3dpdGNoJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmMtc3dpdGNoL2xpYi9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3JlYWN0SW5wdXRBdXRvc2l6ZSA9IHJlcXVpcmUoJ3JlYWN0LWlucHV0LWF1dG9zaXplJyk7XG5cbnZhciBfcmVhY3RJbnB1dEF1dG9zaXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0SW5wdXRBdXRvc2l6ZSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3V0aWxzU3RyaXBEaWFjcml0aWNzID0gcmVxdWlyZSgnLi91dGlscy9zdHJpcERpYWNyaXRpY3MnKTtcblxudmFyIF91dGlsc1N0cmlwRGlhY3JpdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc1N0cmlwRGlhY3JpdGljcyk7XG5cbnZhciBfQXN5bmMgPSByZXF1aXJlKCcuL0FzeW5jJyk7XG5cbnZhciBfQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXN5bmMpO1xuXG52YXIgX09wdGlvbiA9IHJlcXVpcmUoJy4vT3B0aW9uJyk7XG5cbnZhciBfT3B0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09wdGlvbik7XG5cbnZhciBfVmFsdWUgPSByZXF1aXJlKCcuL1ZhbHVlJyk7XG5cbnZhciBfVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmFsdWUpO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlWYWx1ZSh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG59XG5cbnZhciBzdHJpbmdPck5vZGUgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9uZU9mVHlwZShbX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubm9kZV0pO1xuXG52YXIgU2VsZWN0ID0gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUNsYXNzKHtcblxuXHRkaXNwbGF5TmFtZTogJ1NlbGVjdCcsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0YWRkTGFiZWxUZXh0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gcGxhY2Vob2xkZXIgZGlzcGxheWVkIHdoZW4geW91IHdhbnQgdG8gYWRkIGEgbGFiZWwgb24gYSBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdGFsbG93Q3JlYXRlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdG8gYWxsb3cgY3JlYXRpb24gb2YgbmV3IGVudHJpZXNcblx0XHRhdXRvQmx1cjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLFxuXHRcdGF1dG9mb2N1czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyBhdXRvZm9jdXMgdGhlIGNvbXBvbmVudCBvbiBtb3VudFxuXHRcdGJhY2tzcGFjZVJlbW92ZXM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciBiYWNrc3BhY2UgcmVtb3ZlcyBhbiBpdGVtIGlmIHRoZXJlIGlzIG5vIHRleHQgaW5wdXRcblx0XHRjbGFzc05hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdFx0Y2xlYXJBbGxUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHRpdGxlIGZvciB0aGUgXCJjbGVhclwiIGNvbnRyb2wgd2hlbiBtdWx0aTogdHJ1ZVxuXHRcdGNsZWFyVmFsdWVUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHRpdGxlIGZvciB0aGUgXCJjbGVhclwiIGNvbnRyb2xcblx0XHRjbGVhcmFibGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gc2hvdWxkIGl0IGJlIHBvc3NpYmxlIHRvIHJlc2V0IHZhbHVlXG5cdFx0ZGVsaW1pdGVyOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gZGVsaW1pdGVyIHRvIHVzZSB0byBqb2luIG11bHRpcGxlIHZhbHVlcyBmb3IgdGhlIGhpZGRlbiBmaWVsZCB2YWx1ZVxuXHRcdGRpc2FibGVkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdGhlIFNlbGVjdCBpcyBkaXNhYmxlZCBvciBub3Rcblx0XHRlc2NhcGVDbGVhcnNWYWx1ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIGVzY2FwZSBjbGVhcnMgdGhlIHZhbHVlIHdoZW4gdGhlIG1lbnUgaXMgY2xvc2VkXG5cdFx0ZmlsdGVyT3B0aW9uOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBmaWx0ZXIgYSBzaW5nbGUgb3B0aW9uIChvcHRpb24sIGZpbHRlclN0cmluZylcblx0XHRmaWx0ZXJPcHRpb25zOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmFueSwgLy8gYm9vbGVhbiB0byBlbmFibGUgZGVmYXVsdCBmaWx0ZXJpbmcgb3IgZnVuY3Rpb24gdG8gZmlsdGVyIHRoZSBvcHRpb25zIGFycmF5IChbb3B0aW9uc10sIGZpbHRlclN0cmluZywgW3ZhbHVlc10pXG5cdFx0aWdub3JlQWNjZW50czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRvIHN0cmlwIGRpYWNyaXRpY3Mgd2hlbiBmaWx0ZXJpbmdcblx0XHRpZ25vcmVDYXNlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdG8gcGVyZm9ybSBjYXNlLWluc2Vuc2l0aXZlIGZpbHRlcmluZ1xuXHRcdGlucHV0UHJvcHM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub2JqZWN0LCAvLyBjdXN0b20gYXR0cmlidXRlcyBmb3IgdGhlIElucHV0XG5cdFx0aXNMb2FkaW5nOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdGhlIFNlbGVjdCBpcyBsb2FkaW5nIGV4dGVybmFsbHkgb3Igbm90IChzdWNoIGFzIG9wdGlvbnMgYmVpbmcgbG9hZGVkKVxuXHRcdGxhYmVsS2V5OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gcGF0aCBvZiB0aGUgbGFiZWwgdmFsdWUgaW4gb3B0aW9uIG9iamVjdHNcblx0XHRtYXRjaFBvczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIC8vIChhbnl8c3RhcnQpIG1hdGNoIHRoZSBzdGFydCBvciBlbnRpcmUgc3RyaW5nIHdoZW4gZmlsdGVyaW5nXG5cdFx0bWF0Y2hQcm9wOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZywgLy8gKGFueXxsYWJlbHx2YWx1ZSkgd2hpY2ggb3B0aW9uIHByb3BlcnR5IHRvIGZpbHRlciBvblxuXHRcdG1lbnVCdWZmZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLCAvLyBvcHRpb25hbCBidWZmZXIgKGluIHB4KSBiZXR3ZWVuIHRoZSBib3R0b20gb2YgdGhlIHZpZXdwb3J0IGFuZCB0aGUgYm90dG9tIG9mIHRoZSBtZW51XG5cdFx0bWVudUNvbnRhaW5lclN0eWxlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdCwgLy8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIG1lbnUgY29udGFpbmVyXG5cdFx0bWVudVN0eWxlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdCwgLy8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIG1lbnVcblx0XHRtdWx0aTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdG5hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBnZW5lcmF0ZXMgYSBoaWRkZW4gPGlucHV0IC8+IHRhZyB3aXRoIHRoaXMgZmllbGQgbmFtZSBmb3IgaHRtbCBmb3Jtc1xuXHRcdG5ld09wdGlvbkNyZWF0b3I6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gZmFjdG9yeSB0byBjcmVhdGUgbmV3IG9wdGlvbnMgd2hlbiBhbGxvd0NyZWF0ZSBzZXRcblx0XHRub1Jlc3VsdHNUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBzZWFyY2ggcmVzdWx0c1xuXHRcdG9uQmx1cjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyBvbkJsdXIgaGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7fVxuXHRcdG9uQmx1clJlc2V0c0lucHV0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgaW5wdXQgaXMgY2xlYXJlZCBvbiBibHVyXG5cdFx0b25DaGFuZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7fVxuXHRcdG9uQ2xvc2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gZmlyZXMgd2hlbiB0aGUgbWVudSBpcyBjbG9zZWRcblx0XHRvbkZvY3VzOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG9uRm9jdXMgaGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7fVxuXHRcdG9uSW5wdXRDaGFuZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb25JbnB1dENoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge31cblx0XHRvbk1lbnVTY3JvbGxUb0JvdHRvbTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyBmaXJlcyB3aGVuIHRoZSBtZW51IGlzIHNjcm9sbGVkIHRvIHRoZSBib3R0b207IGNhbiBiZSB1c2VkIHRvIHBhZ2luYXRlIG9wdGlvbnNcblx0XHRvbk9wZW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gZmlyZXMgd2hlbiB0aGUgbWVudSBpcyBvcGVuZWRcblx0XHRvblZhbHVlQ2xpY2s6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb25DbGljayBoYW5kbGVyIGZvciB2YWx1ZSBsYWJlbHM6IGZ1bmN0aW9uICh2YWx1ZSwgZXZlbnQpIHt9XG5cdFx0b3B0aW9uQ29tcG9uZW50OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG9wdGlvbiBjb21wb25lbnQgdG8gcmVuZGVyIGluIGRyb3Bkb3duXG5cdFx0b3B0aW9uUmVuZGVyZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gb3B0aW9uUmVuZGVyZXI6IGZ1bmN0aW9uIChvcHRpb24pIHt9XG5cdFx0b3B0aW9uczogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hcnJheSwgLy8gYXJyYXkgb2Ygb3B0aW9uc1xuXHRcdHBsYWNlaG9sZGVyOiBzdHJpbmdPck5vZGUsIC8vIGZpZWxkIHBsYWNlaG9sZGVyLCBkaXNwbGF5ZWQgd2hlbiB0aGVyZSdzIG5vIHZhbHVlXG5cdFx0cmVxdWlyZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gYXBwbGllcyBIVE1MNSByZXF1aXJlZCBhdHRyaWJ1dGUgd2hlbiBuZWVkZWRcblx0XHRzY3JvbGxNZW51SW50b1ZpZXc6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gYm9vbGVhbiB0byBlbmFibGUgdGhlIHZpZXdwb3J0IHRvIHNoaWZ0IHNvIHRoYXQgdGhlIGZ1bGwgbWVudSBmdWxseSB2aXNpYmxlIHdoZW4gZW5nYWdlZFxuXHRcdHNlYXJjaGFibGU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBlbmFibGUgc2VhcmNoaW5nIGZlYXR1cmUgb3Igbm90XG5cdFx0c2ltcGxlVmFsdWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gcGFzcyB0aGUgdmFsdWUgdG8gb25DaGFuZ2UgYXMgYSBzaW1wbGUgdmFsdWUgKGxlZ2FjeSBwcmUgMS4wIG1vZGUpLCBkZWZhdWx0cyB0byBmYWxzZVxuXHRcdHN0eWxlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdCwgLy8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIGNvbnRyb2xcblx0XHR0YWJJbmRleDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIC8vIG9wdGlvbmFsIHRhYiBpbmRleCBvZiB0aGUgY29udHJvbFxuXHRcdHZhbHVlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmFueSwgLy8gaW5pdGlhbCBmaWVsZCB2YWx1ZVxuXHRcdHZhbHVlQ29tcG9uZW50OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIHZhbHVlIGNvbXBvbmVudCB0byByZW5kZXJcblx0XHR2YWx1ZUtleTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIC8vIHBhdGggb2YgdGhlIGxhYmVsIHZhbHVlIGluIG9wdGlvbiBvYmplY3RzXG5cdFx0dmFsdWVSZW5kZXJlcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jLCAvLyB2YWx1ZVJlbmRlcmVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHRcdHdyYXBwZXJTdHlsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QgfSxcblxuXHQvLyBvcHRpb25hbCBzdHlsZSB0byBhcHBseSB0byB0aGUgY29tcG9uZW50IHdyYXBwZXJcblx0c3RhdGljczogeyBBc3luYzogX0FzeW5jMlsnZGVmYXVsdCddIH0sXG5cblx0Z2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGFkZExhYmVsVGV4dDogJ0FkZCBcIntsYWJlbH1cIj8nLFxuXHRcdFx0YWxsb3dDcmVhdGU6IGZhbHNlLFxuXHRcdFx0YmFja3NwYWNlUmVtb3ZlczogdHJ1ZSxcblx0XHRcdGNsZWFyYWJsZTogdHJ1ZSxcblx0XHRcdGNsZWFyQWxsVGV4dDogJ0NsZWFyIGFsbCcsXG5cdFx0XHRjbGVhclZhbHVlVGV4dDogJ0NsZWFyIHZhbHVlJyxcblx0XHRcdGRlbGltaXRlcjogJywnLFxuXHRcdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXHRcdFx0ZXNjYXBlQ2xlYXJzVmFsdWU6IHRydWUsXG5cdFx0XHRmaWx0ZXJPcHRpb25zOiB0cnVlLFxuXHRcdFx0aWdub3JlQWNjZW50czogdHJ1ZSxcblx0XHRcdGlnbm9yZUNhc2U6IHRydWUsXG5cdFx0XHRpbnB1dFByb3BzOiB7fSxcblx0XHRcdGlzTG9hZGluZzogZmFsc2UsXG5cdFx0XHRsYWJlbEtleTogJ2xhYmVsJyxcblx0XHRcdG1hdGNoUG9zOiAnYW55Jyxcblx0XHRcdG1hdGNoUHJvcDogJ2FueScsXG5cdFx0XHRtZW51QnVmZmVyOiAwLFxuXHRcdFx0bXVsdGk6IGZhbHNlLFxuXHRcdFx0bm9SZXN1bHRzVGV4dDogJ05vIHJlc3VsdHMgZm91bmQnLFxuXHRcdFx0b25CbHVyUmVzZXRzSW5wdXQ6IHRydWUsXG5cdFx0XHRvcHRpb25Db21wb25lbnQ6IF9PcHRpb24yWydkZWZhdWx0J10sXG5cdFx0XHRwbGFjZWhvbGRlcjogJ1NlbGVjdC4uLicsXG5cdFx0XHRyZXF1aXJlZDogZmFsc2UsXG5cdFx0XHRzY3JvbGxNZW51SW50b1ZpZXc6IHRydWUsXG5cdFx0XHRzZWFyY2hhYmxlOiB0cnVlLFxuXHRcdFx0c2ltcGxlVmFsdWU6IGZhbHNlLFxuXHRcdFx0dmFsdWVDb21wb25lbnQ6IF9WYWx1ZTJbJ2RlZmF1bHQnXSxcblx0XHRcdHZhbHVlS2V5OiAndmFsdWUnXG5cdFx0fTtcblx0fSxcblxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5wdXRWYWx1ZTogJycsXG5cdFx0XHRpc0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0aXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0cmVxdWlyZWQ6IHRoaXMucHJvcHMucmVxdWlyZWQgJiYgdGhpcy5oYW5kbGVSZXF1aXJlZCh0aGlzLnByb3BzLnZhbHVlLCB0aGlzLnByb3BzLm11bHRpKVxuXHRcdH07XG5cdH0sXG5cblx0Y29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmF1dG9mb2N1cykge1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdH1cblx0fSxcblxuXHRjb21wb25lbnRXaWxsVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG5cdFx0aWYgKG5leHRTdGF0ZS5pc09wZW4gIT09IHRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHR2YXIgaGFuZGxlciA9IG5leHRTdGF0ZS5pc09wZW4gPyBuZXh0UHJvcHMub25PcGVuIDogbmV4dFByb3BzLm9uQ2xvc2U7XG5cdFx0XHRoYW5kbGVyICYmIGhhbmRsZXIoKTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcblx0XHQvLyBmb2N1cyB0byB0aGUgc2VsZWN0ZWQgb3B0aW9uXG5cdFx0aWYgKHRoaXMucmVmcy5tZW51ICYmIHRoaXMucmVmcy5mb2N1c2VkICYmIHRoaXMuc3RhdGUuaXNPcGVuICYmICF0aGlzLmhhc1Njcm9sbGVkVG9PcHRpb24pIHtcblx0XHRcdHZhciBmb2N1c2VkT3B0aW9uTm9kZSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLnJlZnMuZm9jdXNlZCk7XG5cdFx0XHR2YXIgbWVudU5vZGUgPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5yZWZzLm1lbnUpO1xuXHRcdFx0bWVudU5vZGUuc2Nyb2xsVG9wID0gZm9jdXNlZE9wdGlvbk5vZGUub2Zmc2V0VG9wO1xuXHRcdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHByZXZTdGF0ZS5pbnB1dFZhbHVlICE9PSB0aGlzLnN0YXRlLmlucHV0VmFsdWUgJiYgdGhpcy5wcm9wcy5vbklucHV0Q2hhbmdlKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UodGhpcy5zdGF0ZS5pbnB1dFZhbHVlKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX3Njcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlICYmIHRoaXMucmVmcy5mb2N1c2VkICYmIHRoaXMucmVmcy5tZW51KSB7XG5cdFx0XHR0aGlzLl9zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGZvY3VzZWRET00gPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5yZWZzLmZvY3VzZWQpO1xuXHRcdFx0dmFyIG1lbnVET00gPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5yZWZzLm1lbnUpO1xuXHRcdFx0dmFyIGZvY3VzZWRSZWN0ID0gZm9jdXNlZERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdHZhciBtZW51UmVjdCA9IG1lbnVET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRpZiAoZm9jdXNlZFJlY3QuYm90dG9tID4gbWVudVJlY3QuYm90dG9tIHx8IGZvY3VzZWRSZWN0LnRvcCA8IG1lbnVSZWN0LnRvcCkge1xuXHRcdFx0XHRtZW51RE9NLnNjcm9sbFRvcCA9IGZvY3VzZWRET00ub2Zmc2V0VG9wICsgZm9jdXNlZERPTS5jbGllbnRIZWlnaHQgLSBtZW51RE9NLm9mZnNldEhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHRoaXMucHJvcHMuc2Nyb2xsTWVudUludG9WaWV3ICYmIHRoaXMucmVmcy5tZW51Q29udGFpbmVyKSB7XG5cdFx0XHR2YXIgbWVudUNvbnRhaW5lclJlY3QgPSB0aGlzLnJlZnMubWVudUNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgPCBtZW51Q29udGFpbmVyUmVjdC5ib3R0b20gKyB0aGlzLnByb3BzLm1lbnVCdWZmZXIpIHtcblx0XHRcdFx0d2luZG93LnNjcm9sbFRvKDAsIHdpbmRvdy5zY3JvbGxZICsgbWVudUNvbnRhaW5lclJlY3QuYm90dG9tICsgdGhpcy5wcm9wcy5tZW51QnVmZmVyIC0gd2luZG93LmlubmVySGVpZ2h0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHByZXZQcm9wcy5kaXNhYmxlZCAhPT0gdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7IGlzRm9jdXNlZDogZmFsc2UgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tZGlkLXVwZGF0ZS1zZXQtc3RhdGVcblx0XHR9XG5cdH0sXG5cblx0Zm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHRcdGlmICghdGhpcy5yZWZzLmlucHV0KSByZXR1cm47XG5cdFx0dGhpcy5yZWZzLmlucHV0LmZvY3VzKCk7XG5cdH0sXG5cblx0Ymx1cklucHV0OiBmdW5jdGlvbiBibHVySW5wdXQoKSB7XG5cdFx0aWYgKCF0aGlzLnJlZnMuaW5wdXQpIHJldHVybjtcblx0XHR0aGlzLnJlZnMuaW5wdXQuYmx1cigpO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIG5vdCBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChldmVudCkge1xuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWQsIEluIHRoaXMgY2FzZVxuXHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblxuXHRcdC8vIEZpcmUgdGhlIG1vdXNlIGV2ZW50c1xuXHRcdHRoaXMuaGFuZGxlTW91c2VEb3duKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaEVuZENsZWFyVmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZShldmVudCkge1xuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWQsIEluIHRoaXMgY2FzZVxuXHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblxuXHRcdC8vIENsZWFyIHRoZSB2YWx1ZVxuXHRcdHRoaXMuY2xlYXJWYWx1ZShldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcblx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gcHJldmVudCBkZWZhdWx0IGV2ZW50IGhhbmRsZXJzXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdC8vIGZvciB0aGUgbm9uLXNlYXJjaGFibGUgc2VsZWN0LCB0b2dnbGUgdGhlIG1lbnVcblx0XHRpZiAoIXRoaXMucHJvcHMuc2VhcmNoYWJsZSkge1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc09wZW46ICF0aGlzLnN0YXRlLmlzT3BlblxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNGb2N1c2VkKSB7XG5cdFx0XHQvLyBpZiB0aGUgaW5wdXQgaXMgZm9jdXNlZCwgZW5zdXJlIHRoZSBtZW51IGlzIG9wZW5cblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogZmFsc2Vcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBvdGhlcndpc2UsIGZvY3VzIHRoZSBpbnB1dCBhbmQgb3BlbiB0aGUgbWVudVxuXHRcdFx0dGhpcy5fb3BlbkFmdGVyRm9jdXMgPSB0cnVlO1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdH1cblx0fSxcblxuXHRoYW5kbGVNb3VzZURvd25PbkFycm93OiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25PbkFycm93KGV2ZW50KSB7XG5cdFx0Ly8gaWYgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgYSBtb3VzZWRvd24gYW5kIG5vdCB0aGUgcHJpbWFyeVxuXHRcdC8vIGJ1dHRvbiwgb3IgaWYgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZCwgaWdub3JlIGl0LlxuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8IGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvLyBJZiB0aGUgbWVudSBpc24ndCBvcGVuLCBsZXQgdGhlIGV2ZW50IGJ1YmJsZSB0byB0aGUgbWFpbiBoYW5kbGVNb3VzZURvd25cblx0XHRpZiAoIXRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIHByZXZlbnQgZGVmYXVsdCBldmVudCBoYW5kbGVyc1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Ly8gY2xvc2UgdGhlIG1lbnVcblx0XHR0aGlzLmNsb3NlTWVudSgpO1xuXHR9LFxuXG5cdGhhbmRsZU1vdXNlRG93bk9uTWVudTogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duT25NZW51KGV2ZW50KSB7XG5cdFx0Ly8gaWYgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgYSBtb3VzZWRvd24gYW5kIG5vdCB0aGUgcHJpbWFyeVxuXHRcdC8vIGJ1dHRvbiwgb3IgaWYgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZCwgaWdub3JlIGl0LlxuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8IGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0dGhpcy5fb3BlbkFmdGVyRm9jdXMgPSB0cnVlO1xuXHRcdHRoaXMuZm9jdXMoKTtcblx0fSxcblxuXHRjbG9zZU1lbnU6IGZ1bmN0aW9uIGNsb3NlTWVudSgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IHRoaXMuc3RhdGUuaXNGb2N1c2VkICYmICF0aGlzLnByb3BzLm11bHRpLFxuXHRcdFx0aW5wdXRWYWx1ZTogJydcblx0XHR9KTtcblx0XHR0aGlzLmhhc1Njcm9sbGVkVG9PcHRpb24gPSBmYWxzZTtcblx0fSxcblxuXHRoYW5kbGVJbnB1dEZvY3VzOiBmdW5jdGlvbiBoYW5kbGVJbnB1dEZvY3VzKGV2ZW50KSB7XG5cdFx0dmFyIGlzT3BlbiA9IHRoaXMuc3RhdGUuaXNPcGVuIHx8IHRoaXMuX29wZW5BZnRlckZvY3VzO1xuXHRcdGlmICh0aGlzLnByb3BzLm9uRm9jdXMpIHtcblx0XHRcdHRoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNGb2N1c2VkOiB0cnVlLFxuXHRcdFx0aXNPcGVuOiBpc09wZW5cblx0XHR9KTtcblx0XHR0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IGZhbHNlO1xuXHR9LFxuXG5cdGhhbmRsZUlucHV0Qmx1cjogZnVuY3Rpb24gaGFuZGxlSW5wdXRCbHVyKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucmVmcy5tZW51ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaXNFcXVhbE5vZGUodGhpcy5yZWZzLm1lbnUpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJvcHMub25CbHVyKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG5cdFx0fVxuXHRcdHZhciBvbkJsdXJyZWRTdGF0ZSA9IHtcblx0XHRcdGlzRm9jdXNlZDogZmFsc2UsXG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiBmYWxzZVxuXHRcdH07XG5cdFx0aWYgKHRoaXMucHJvcHMub25CbHVyUmVzZXRzSW5wdXQpIHtcblx0XHRcdG9uQmx1cnJlZFN0YXRlLmlucHV0VmFsdWUgPSAnJztcblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZShvbkJsdXJyZWRTdGF0ZSk7XG5cdH0sXG5cblx0aGFuZGxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0aW5wdXRWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG5cdFx0fSk7XG5cdH0sXG5cblx0aGFuZGxlS2V5RG93bjogZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG5cdFx0c3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG5cdFx0XHRjYXNlIDg6XG5cdFx0XHRcdC8vIGJhY2tzcGFjZVxuXHRcdFx0XHRpZiAoIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSAmJiB0aGlzLnByb3BzLmJhY2tzcGFjZVJlbW92ZXMpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHRoaXMucG9wVmFsdWUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRjYXNlIDk6XG5cdFx0XHRcdC8vIHRhYlxuXHRcdFx0XHRpZiAoZXZlbnQuc2hpZnRLZXkgfHwgIXRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2VsZWN0Rm9jdXNlZE9wdGlvbigpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0XHQvLyBlbnRlclxuXHRcdFx0XHRpZiAoIXRoaXMuc3RhdGUuaXNPcGVuKSByZXR1cm47XG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHQvLyBlc2NhcGVcblx0XHRcdFx0aWYgKHRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRcdFx0dGhpcy5jbG9zZU1lbnUoKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLmNsZWFyYWJsZSAmJiB0aGlzLnByb3BzLmVzY2FwZUNsZWFyc1ZhbHVlKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGVhclZhbHVlKGV2ZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdC8vIHVwXG5cdFx0XHRcdHRoaXMuZm9jdXNQcmV2aW91c09wdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdC8vIGRvd25cblx0XHRcdFx0dGhpcy5mb2N1c05leHRPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHQvLyBjYXNlIDE4ODogLy8gLFxuXHRcdFx0Ly8gXHRpZiAodGhpcy5wcm9wcy5hbGxvd0NyZWF0ZSAmJiB0aGlzLnByb3BzLm11bHRpKSB7XG5cdFx0XHQvLyBcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdC8vIFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdC8vIFx0XHR0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcblx0XHRcdC8vIFx0fSBlbHNlIHtcblx0XHRcdC8vIFx0XHRyZXR1cm47XG5cdFx0XHQvLyBcdH1cblx0XHRcdC8vIGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9LFxuXG5cdGhhbmRsZVZhbHVlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZVZhbHVlQ2xpY2sob3B0aW9uLCBldmVudCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5vblZhbHVlQ2xpY2spIHJldHVybjtcblx0XHR0aGlzLnByb3BzLm9uVmFsdWVDbGljayhvcHRpb24sIGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVNZW51U2Nyb2xsOiBmdW5jdGlvbiBoYW5kbGVNZW51U2Nyb2xsKGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLm9uTWVudVNjcm9sbFRvQm90dG9tKSByZXR1cm47XG5cdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGlmICh0YXJnZXQuc2Nyb2xsSGVpZ2h0ID4gdGFyZ2V0Lm9mZnNldEhlaWdodCAmJiAhKHRhcmdldC5zY3JvbGxIZWlnaHQgLSB0YXJnZXQub2Zmc2V0SGVpZ2h0IC0gdGFyZ2V0LnNjcm9sbFRvcCkpIHtcblx0XHRcdHRoaXMucHJvcHMub25NZW51U2Nyb2xsVG9Cb3R0b20oKTtcblx0XHR9XG5cdH0sXG5cblx0aGFuZGxlUmVxdWlyZWQ6IGZ1bmN0aW9uIGhhbmRsZVJlcXVpcmVkKHZhbHVlLCBtdWx0aSkge1xuXHRcdGlmICghdmFsdWUpIHJldHVybiB0cnVlO1xuXHRcdHJldHVybiBtdWx0aSA/IHZhbHVlLmxlbmd0aCA9PT0gMCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG5cdH0sXG5cblx0Z2V0T3B0aW9uTGFiZWw6IGZ1bmN0aW9uIGdldE9wdGlvbkxhYmVsKG9wKSB7XG5cdFx0cmV0dXJuIG9wW3RoaXMucHJvcHMubGFiZWxLZXldO1xuXHR9LFxuXG5cdGdldFZhbHVlQXJyYXk6IGZ1bmN0aW9uIGdldFZhbHVlQXJyYXkoKSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHZhbHVlID0gdmFsdWUuc3BsaXQodGhpcy5wcm9wcy5kZWxpbWl0ZXIpO1xuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtdO1xuXHRcdFx0XHR2YWx1ZSA9IFt2YWx1ZV07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUubWFwKHRoaXMuZXhwYW5kVmFsdWUpLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR2YXIgZXhwYW5kZWRWYWx1ZSA9IHRoaXMuZXhwYW5kVmFsdWUodmFsdWUpO1xuXHRcdHJldHVybiBleHBhbmRlZFZhbHVlID8gW2V4cGFuZGVkVmFsdWVdIDogW107XG5cdH0sXG5cblx0ZXhwYW5kVmFsdWU6IGZ1bmN0aW9uIGV4cGFuZFZhbHVlKHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykgcmV0dXJuIHZhbHVlO1xuXHRcdHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuXHRcdHZhciBvcHRpb25zID0gX3Byb3BzLm9wdGlvbnM7XG5cdFx0dmFyIHZhbHVlS2V5ID0gX3Byb3BzLnZhbHVlS2V5O1xuXG5cdFx0aWYgKCFvcHRpb25zKSByZXR1cm47XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAob3B0aW9uc1tpXVt2YWx1ZUtleV0gPT09IHZhbHVlKSByZXR1cm4gb3B0aW9uc1tpXTtcblx0XHR9XG5cdH0sXG5cblx0c2V0VmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdGlmICh0aGlzLnByb3BzLmF1dG9CbHVyKSB7XG5cdFx0XHR0aGlzLmJsdXJJbnB1dCgpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMucHJvcHMub25DaGFuZ2UpIHJldHVybjtcblx0XHRpZiAodGhpcy5wcm9wcy5yZXF1aXJlZCkge1xuXHRcdFx0dmFyIHJlcXVpcmVkID0gdGhpcy5oYW5kbGVSZXF1aXJlZCh2YWx1ZSwgdGhpcy5wcm9wcy5tdWx0aSk7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgcmVxdWlyZWQ6IHJlcXVpcmVkIH0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5wcm9wcy5zaW1wbGVWYWx1ZSAmJiB2YWx1ZSkge1xuXHRcdFx0dmFsdWUgPSB0aGlzLnByb3BzLm11bHRpID8gdmFsdWUubWFwKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdHJldHVybiBpW190aGlzLnByb3BzLnZhbHVlS2V5XTtcblx0XHRcdH0pLmpvaW4odGhpcy5wcm9wcy5kZWxpbWl0ZXIpIDogdmFsdWVbdGhpcy5wcm9wcy52YWx1ZUtleV07XG5cdFx0fVxuXHRcdHRoaXMucHJvcHMub25DaGFuZ2UodmFsdWUpO1xuXHR9LFxuXG5cdHNlbGVjdFZhbHVlOiBmdW5jdGlvbiBzZWxlY3RWYWx1ZSh2YWx1ZSkge1xuXHRcdHRoaXMuaGFzU2Nyb2xsZWRUb09wdGlvbiA9IGZhbHNlO1xuXHRcdGlmICh0aGlzLnByb3BzLm11bHRpKSB7XG5cdFx0XHR0aGlzLmFkZFZhbHVlKHZhbHVlKTtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpbnB1dFZhbHVlOiAnJ1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IHRoaXMuc3RhdGUuaXNGb2N1c2VkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0YWRkVmFsdWU6IGZ1bmN0aW9uIGFkZFZhbHVlKHZhbHVlKSB7XG5cdFx0dmFyIHZhbHVlQXJyYXkgPSB0aGlzLmdldFZhbHVlQXJyYXkoKTtcblx0XHR0aGlzLnNldFZhbHVlKHZhbHVlQXJyYXkuY29uY2F0KHZhbHVlKSk7XG5cdH0sXG5cblx0cG9wVmFsdWU6IGZ1bmN0aW9uIHBvcFZhbHVlKCkge1xuXHRcdHZhciB2YWx1ZUFycmF5ID0gdGhpcy5nZXRWYWx1ZUFycmF5KCk7XG5cdFx0aWYgKCF2YWx1ZUFycmF5Lmxlbmd0aCkgcmV0dXJuO1xuXHRcdGlmICh2YWx1ZUFycmF5W3ZhbHVlQXJyYXkubGVuZ3RoIC0gMV0uY2xlYXJhYmxlVmFsdWUgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LnNsaWNlKDAsIHZhbHVlQXJyYXkubGVuZ3RoIC0gMSkpO1xuXHR9LFxuXG5cdHJlbW92ZVZhbHVlOiBmdW5jdGlvbiByZW1vdmVWYWx1ZSh2YWx1ZSkge1xuXHRcdHZhciB2YWx1ZUFycmF5ID0gdGhpcy5nZXRWYWx1ZUFycmF5KCk7XG5cdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LmZpbHRlcihmdW5jdGlvbiAoaSkge1xuXHRcdFx0cmV0dXJuIGkgIT09IHZhbHVlO1xuXHRcdH0pKTtcblx0XHR0aGlzLmZvY3VzKCk7XG5cdH0sXG5cblx0Y2xlYXJWYWx1ZTogZnVuY3Rpb24gY2xlYXJWYWx1ZShldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIGlnbm9yZSBpdC5cblx0XHRpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0dGhpcy5zZXRWYWx1ZShudWxsKTtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRpbnB1dFZhbHVlOiAnJ1xuXHRcdH0sIHRoaXMuZm9jdXMpO1xuXHR9LFxuXG5cdGZvY3VzT3B0aW9uOiBmdW5jdGlvbiBmb2N1c09wdGlvbihvcHRpb24pIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGZvY3VzZWRPcHRpb246IG9wdGlvblxuXHRcdH0pO1xuXHR9LFxuXG5cdGZvY3VzTmV4dE9wdGlvbjogZnVuY3Rpb24gZm9jdXNOZXh0T3B0aW9uKCkge1xuXHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbignbmV4dCcpO1xuXHR9LFxuXG5cdGZvY3VzUHJldmlvdXNPcHRpb246IGZ1bmN0aW9uIGZvY3VzUHJldmlvdXNPcHRpb24oKSB7XG5cdFx0dGhpcy5mb2N1c0FkamFjZW50T3B0aW9uKCdwcmV2aW91cycpO1xuXHR9LFxuXG5cdGZvY3VzQWRqYWNlbnRPcHRpb246IGZ1bmN0aW9uIGZvY3VzQWRqYWNlbnRPcHRpb24oZGlyKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl92aXNpYmxlT3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcblx0XHRcdHJldHVybiAhaS5kaXNhYmxlZDtcblx0XHR9KTtcblx0XHR0aGlzLl9zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9IHRydWU7XG5cdFx0aWYgKCF0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogJycsXG5cdFx0XHRcdGZvY3VzZWRPcHRpb246IHRoaXMuX2ZvY3VzZWRPcHRpb24gfHwgb3B0aW9uc1tkaXIgPT09ICduZXh0JyA/IDAgOiBvcHRpb25zLmxlbmd0aCAtIDFdXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCFvcHRpb25zLmxlbmd0aCkgcmV0dXJuO1xuXHRcdHZhciBmb2N1c2VkSW5kZXggPSAtMTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh0aGlzLl9mb2N1c2VkT3B0aW9uID09PSBvcHRpb25zW2ldKSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IGk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgZm9jdXNlZE9wdGlvbiA9IG9wdGlvbnNbMF07XG5cdFx0aWYgKGRpciA9PT0gJ25leHQnICYmIGZvY3VzZWRJbmRleCA+IC0xICYmIGZvY3VzZWRJbmRleCA8IG9wdGlvbnMubGVuZ3RoIC0gMSkge1xuXHRcdFx0Zm9jdXNlZE9wdGlvbiA9IG9wdGlvbnNbZm9jdXNlZEluZGV4ICsgMV07XG5cdFx0fSBlbHNlIGlmIChkaXIgPT09ICdwcmV2aW91cycpIHtcblx0XHRcdGlmIChmb2N1c2VkSW5kZXggPiAwKSB7XG5cdFx0XHRcdGZvY3VzZWRPcHRpb24gPSBvcHRpb25zW2ZvY3VzZWRJbmRleCAtIDFdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbiA9IG9wdGlvbnNbb3B0aW9ucy5sZW5ndGggLSAxXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uXG5cdFx0fSk7XG5cdH0sXG5cblx0c2VsZWN0Rm9jdXNlZE9wdGlvbjogZnVuY3Rpb24gc2VsZWN0Rm9jdXNlZE9wdGlvbigpIHtcblx0XHQvLyBpZiAodGhpcy5wcm9wcy5hbGxvd0NyZWF0ZSAmJiAhdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uKSB7XG5cdFx0Ly8gXHRyZXR1cm4gdGhpcy5zZWxlY3RWYWx1ZSh0aGlzLnN0YXRlLmlucHV0VmFsdWUpO1xuXHRcdC8vIH1cblx0XHRpZiAodGhpcy5fZm9jdXNlZE9wdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2VsZWN0VmFsdWUodGhpcy5fZm9jdXNlZE9wdGlvbik7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlckxvYWRpbmc6IGZ1bmN0aW9uIHJlbmRlckxvYWRpbmcoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzTG9hZGluZykgcmV0dXJuO1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWxvYWRpbmctem9uZScsICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9LFxuXHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1sb2FkaW5nJyB9KVxuXHRcdCk7XG5cdH0sXG5cblx0cmVuZGVyVmFsdWU6IGZ1bmN0aW9uIHJlbmRlclZhbHVlKHZhbHVlQXJyYXksIGlzT3Blbikge1xuXHRcdHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdFx0dmFyIHJlbmRlckxhYmVsID0gdGhpcy5wcm9wcy52YWx1ZVJlbmRlcmVyIHx8IHRoaXMuZ2V0T3B0aW9uTGFiZWw7XG5cdFx0dmFyIFZhbHVlQ29tcG9uZW50ID0gdGhpcy5wcm9wcy52YWx1ZUNvbXBvbmVudDtcblx0XHRpZiAoIXZhbHVlQXJyYXkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtcGxhY2Vob2xkZXInIH0sXG5cdFx0XHRcdHRoaXMucHJvcHMucGxhY2Vob2xkZXJcblx0XHRcdCkgOiBudWxsO1xuXHRcdH1cblx0XHR2YXIgb25DbGljayA9IHRoaXMucHJvcHMub25WYWx1ZUNsaWNrID8gdGhpcy5oYW5kbGVWYWx1ZUNsaWNrIDogbnVsbDtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlQXJyYXkubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0VmFsdWVDb21wb25lbnQsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZGlzYWJsZWQ6IF90aGlzMi5wcm9wcy5kaXNhYmxlZCB8fCB2YWx1ZS5jbGVhcmFibGVWYWx1ZSA9PT0gZmFsc2UsXG5cdFx0XHRcdFx0XHRrZXk6ICd2YWx1ZS0nICsgaSArICctJyArIHZhbHVlW190aGlzMi5wcm9wcy52YWx1ZUtleV0sXG5cdFx0XHRcdFx0XHRvbkNsaWNrOiBvbkNsaWNrLFxuXHRcdFx0XHRcdFx0b25SZW1vdmU6IF90aGlzMi5yZW1vdmVWYWx1ZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cmVuZGVyTGFiZWwodmFsdWUpXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmlucHV0VmFsdWUpIHtcblx0XHRcdGlmIChpc09wZW4pIG9uQ2xpY2sgPSBudWxsO1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRWYWx1ZUNvbXBvbmVudCxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0XHRcdG9uQ2xpY2s6IG9uQ2xpY2ssXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlQXJyYXlbMF1cblx0XHRcdFx0fSxcblx0XHRcdFx0cmVuZGVyTGFiZWwodmFsdWVBcnJheVswXSlcblx0XHRcdCk7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlcklucHV0OiBmdW5jdGlvbiByZW5kZXJJbnB1dCh2YWx1ZUFycmF5KSB7XG5cdFx0dmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NlbGVjdC1pbnB1dCcsIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpO1xuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8ICF0aGlzLnByb3BzLnNlYXJjaGFibGUpIHtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRQcm9wcywge1xuXHRcdFx0XHRjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdFx0dGFiSW5kZXg6IHRoaXMucHJvcHMudGFiSW5kZXggfHwgMCxcblx0XHRcdFx0b25CbHVyOiB0aGlzLmhhbmRsZUlucHV0Qmx1cixcblx0XHRcdFx0b25Gb2N1czogdGhpcy5oYW5kbGVJbnB1dEZvY3VzLFxuXHRcdFx0XHRyZWY6ICdpbnB1dCcsXG5cdFx0XHRcdHN0eWxlOiB7IGJvcmRlcjogMCwgd2lkdGg6IDEsIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snIH0gfSkpO1xuXHRcdH1cblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX3JlYWN0SW5wdXRBdXRvc2l6ZTJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRQcm9wcywge1xuXHRcdFx0Y2xhc3NOYW1lOiBjbGFzc05hbWUsXG5cdFx0XHR0YWJJbmRleDogdGhpcy5wcm9wcy50YWJJbmRleCxcblx0XHRcdG9uQmx1cjogdGhpcy5oYW5kbGVJbnB1dEJsdXIsXG5cdFx0XHRvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcblx0XHRcdG9uRm9jdXM6IHRoaXMuaGFuZGxlSW5wdXRGb2N1cyxcblx0XHRcdG1pbldpZHRoOiAnNScsXG5cdFx0XHRyZWY6ICdpbnB1dCcsXG5cdFx0XHRyZXF1aXJlZDogdGhpcy5zdGF0ZS5yZXF1aXJlZCxcblx0XHRcdHZhbHVlOiB0aGlzLnN0YXRlLmlucHV0VmFsdWVcblx0XHR9KSk7XG5cdH0sXG5cblx0cmVuZGVyQ2xlYXI6IGZ1bmN0aW9uIHJlbmRlckNsZWFyKCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5jbGVhcmFibGUgfHwgIXRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5wcm9wcy5tdWx0aSAmJiAhdGhpcy5wcm9wcy52YWx1ZS5sZW5ndGggfHwgdGhpcy5wcm9wcy5kaXNhYmxlZCB8fCB0aGlzLnByb3BzLmlzTG9hZGluZykgcmV0dXJuO1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyLXpvbmUnLCB0aXRsZTogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCxcblx0XHRcdFx0J2FyaWEtbGFiZWwnOiB0aGlzLnByb3BzLm11bHRpID8gdGhpcy5wcm9wcy5jbGVhckFsbFRleHQgOiB0aGlzLnByb3BzLmNsZWFyVmFsdWVUZXh0LFxuXHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5jbGVhclZhbHVlLFxuXHRcdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdFx0b25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlLFxuXHRcdFx0XHRvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZSB9LFxuXHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1jbGVhcicsIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogJyZ0aW1lczsnIH0gfSlcblx0XHQpO1xuXHR9LFxuXG5cdHJlbmRlckFycm93OiBmdW5jdGlvbiByZW5kZXJBcnJvdygpIHtcblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnc3BhbicsXG5cdFx0XHR7IGNsYXNzTmFtZTogJ1NlbGVjdC1hcnJvdy16b25lJywgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duT25BcnJvdyB9LFxuXHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1hcnJvdycsIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bk9uQXJyb3cgfSlcblx0XHQpO1xuXHR9LFxuXG5cdGZpbHRlck9wdGlvbnM6IGZ1bmN0aW9uIGZpbHRlck9wdGlvbnMoZXhjbHVkZU9wdGlvbnMpIHtcblx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdHZhciBmaWx0ZXJWYWx1ZSA9IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZTtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMucHJvcHMub3B0aW9ucyB8fCBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMucHJvcHMuZmlsdGVyT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJvcHMuZmlsdGVyT3B0aW9ucy5jYWxsKHRoaXMsIG9wdGlvbnMsIGZpbHRlclZhbHVlLCBleGNsdWRlT3B0aW9ucyk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLmZpbHRlck9wdGlvbnMpIHtcblx0XHRcdGlmICh0aGlzLnByb3BzLmlnbm9yZUFjY2VudHMpIHtcblx0XHRcdFx0ZmlsdGVyVmFsdWUgPSAoMCwgX3V0aWxzU3RyaXBEaWFjcml0aWNzMlsnZGVmYXVsdCddKShmaWx0ZXJWYWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5pZ25vcmVDYXNlKSB7XG5cdFx0XHRcdGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdH1cblx0XHRcdGlmIChleGNsdWRlT3B0aW9ucykgZXhjbHVkZU9wdGlvbnMgPSBleGNsdWRlT3B0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0cmV0dXJuIGlbX3RoaXMzLnByb3BzLnZhbHVlS2V5XTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb24pIHtcblx0XHRcdFx0aWYgKGV4Y2x1ZGVPcHRpb25zICYmIGV4Y2x1ZGVPcHRpb25zLmluZGV4T2Yob3B0aW9uW190aGlzMy5wcm9wcy52YWx1ZUtleV0pID4gLTEpIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5maWx0ZXJPcHRpb24pIHJldHVybiBfdGhpczMucHJvcHMuZmlsdGVyT3B0aW9uLmNhbGwoX3RoaXMzLCBvcHRpb24sIGZpbHRlclZhbHVlKTtcblx0XHRcdFx0aWYgKCFmaWx0ZXJWYWx1ZSkgcmV0dXJuIHRydWU7XG5cdFx0XHRcdHZhciB2YWx1ZVRlc3QgPSBTdHJpbmcob3B0aW9uW190aGlzMy5wcm9wcy52YWx1ZUtleV0pO1xuXHRcdFx0XHR2YXIgbGFiZWxUZXN0ID0gU3RyaW5nKG9wdGlvbltfdGhpczMucHJvcHMubGFiZWxLZXldKTtcblx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5pZ25vcmVBY2NlbnRzKSB7XG5cdFx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcpIHZhbHVlVGVzdCA9ICgwLCBfdXRpbHNTdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKHZhbHVlVGVzdCk7XG5cdFx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScpIGxhYmVsVGVzdCA9ICgwLCBfdXRpbHNTdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKGxhYmVsVGVzdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5pZ25vcmVDYXNlKSB7XG5cdFx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcpIHZhbHVlVGVzdCA9IHZhbHVlVGVzdC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmIChfdGhpczMucHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnKSBsYWJlbFRlc3QgPSBsYWJlbFRlc3QudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gX3RoaXMzLnByb3BzLm1hdGNoUG9zID09PSAnc3RhcnQnID8gX3RoaXMzLnByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJyAmJiB2YWx1ZVRlc3Quc3Vic3RyKDAsIGZpbHRlclZhbHVlLmxlbmd0aCkgPT09IGZpbHRlclZhbHVlIHx8IF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScgJiYgbGFiZWxUZXN0LnN1YnN0cigwLCBmaWx0ZXJWYWx1ZS5sZW5ndGgpID09PSBmaWx0ZXJWYWx1ZSA6IF90aGlzMy5wcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcgJiYgdmFsdWVUZXN0LmluZGV4T2YoZmlsdGVyVmFsdWUpID49IDAgfHwgX3RoaXMzLnByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJyAmJiBsYWJlbFRlc3QuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgPj0gMDtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucztcblx0XHR9XG5cdH0sXG5cblx0cmVuZGVyTWVudTogZnVuY3Rpb24gcmVuZGVyTWVudShvcHRpb25zLCB2YWx1ZUFycmF5LCBmb2N1c2VkT3B0aW9uKSB7XG5cdFx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCkge1xuXHRcdFx0dmFyIF9yZXQgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgT3B0aW9uID0gX3RoaXM0LnByb3BzLm9wdGlvbkNvbXBvbmVudDtcblx0XHRcdFx0dmFyIHJlbmRlckxhYmVsID0gX3RoaXM0LnByb3BzLm9wdGlvblJlbmRlcmVyIHx8IF90aGlzNC5nZXRPcHRpb25MYWJlbDtcblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHY6IG9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24sIGkpIHtcblx0XHRcdFx0XHRcdHZhciBpc1NlbGVjdGVkID0gdmFsdWVBcnJheSAmJiB2YWx1ZUFycmF5LmluZGV4T2Yob3B0aW9uKSA+IC0xO1xuXHRcdFx0XHRcdFx0dmFyIGlzRm9jdXNlZCA9IG9wdGlvbiA9PT0gZm9jdXNlZE9wdGlvbjtcblx0XHRcdFx0XHRcdHZhciBvcHRpb25SZWYgPSBpc0ZvY3VzZWQgPyAnZm9jdXNlZCcgOiBudWxsO1xuXHRcdFx0XHRcdFx0dmFyIG9wdGlvbkNsYXNzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSh7XG5cdFx0XHRcdFx0XHRcdCdTZWxlY3Qtb3B0aW9uJzogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0J2lzLXNlbGVjdGVkJzogaXNTZWxlY3RlZCxcblx0XHRcdFx0XHRcdFx0J2lzLWZvY3VzZWQnOiBpc0ZvY3VzZWQsXG5cdFx0XHRcdFx0XHRcdCdpcy1kaXNhYmxlZCc6IG9wdGlvbi5kaXNhYmxlZFxuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdFx0T3B0aW9uLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lOiBvcHRpb25DbGFzcyxcblx0XHRcdFx0XHRcdFx0XHRpc0Rpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsXG5cdFx0XHRcdFx0XHRcdFx0aXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG5cdFx0XHRcdFx0XHRcdFx0a2V5OiAnb3B0aW9uLScgKyBpICsgJy0nICsgb3B0aW9uW190aGlzNC5wcm9wcy52YWx1ZUtleV0sXG5cdFx0XHRcdFx0XHRcdFx0b25TZWxlY3Q6IF90aGlzNC5zZWxlY3RWYWx1ZSxcblx0XHRcdFx0XHRcdFx0XHRvbkZvY3VzOiBfdGhpczQuZm9jdXNPcHRpb24sXG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9uOiBvcHRpb24sXG5cdFx0XHRcdFx0XHRcdFx0aXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcblx0XHRcdFx0XHRcdFx0XHRyZWY6IG9wdGlvblJlZlxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRyZW5kZXJMYWJlbChvcHRpb24pXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH07XG5cdFx0XHR9KSgpO1xuXG5cdFx0XHRpZiAodHlwZW9mIF9yZXQgPT09ICdvYmplY3QnKSByZXR1cm4gX3JldC52O1xuXHRcdH0gZWxzZSBpZiAodGhpcy5wcm9wcy5ub1Jlc3VsdHNUZXh0KSB7XG5cdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHR7IGNsYXNzTmFtZTogJ1NlbGVjdC1ub3Jlc3VsdHMnIH0sXG5cdFx0XHRcdHRoaXMucHJvcHMubm9SZXN1bHRzVGV4dFxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlckhpZGRlbkZpZWxkOiBmdW5jdGlvbiByZW5kZXJIaWRkZW5GaWVsZCh2YWx1ZUFycmF5KSB7XG5cdFx0dmFyIF90aGlzNSA9IHRoaXM7XG5cblx0XHRpZiAoIXRoaXMucHJvcHMubmFtZSkgcmV0dXJuO1xuXHRcdHZhciB2YWx1ZSA9IHZhbHVlQXJyYXkubWFwKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRyZXR1cm4gc3RyaW5naWZ5VmFsdWUoaVtfdGhpczUucHJvcHMudmFsdWVLZXldKTtcblx0XHR9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKTtcblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAnaGlkZGVuJywgcmVmOiAndmFsdWUnLCBuYW1lOiB0aGlzLnByb3BzLm5hbWUsIHZhbHVlOiB2YWx1ZSwgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQgfSk7XG5cdH0sXG5cblx0Z2V0Rm9jdXNhYmxlT3B0aW9uOiBmdW5jdGlvbiBnZXRGb2N1c2FibGVPcHRpb24oc2VsZWN0ZWRPcHRpb24pIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3Zpc2libGVPcHRpb25zO1xuXHRcdGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybjtcblx0XHR2YXIgZm9jdXNlZE9wdGlvbiA9IHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbiB8fCBzZWxlY3RlZE9wdGlvbjtcblx0XHRpZiAoZm9jdXNlZE9wdGlvbiAmJiBvcHRpb25zLmluZGV4T2YoZm9jdXNlZE9wdGlvbikgPiAtMSkgcmV0dXJuIGZvY3VzZWRPcHRpb247XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoIW9wdGlvbnNbaV0uZGlzYWJsZWQpIHJldHVybiBvcHRpb25zW2ldO1xuXHRcdH1cblx0fSxcblxuXHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSgpO1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5fdmlzaWJsZU9wdGlvbnMgPSB0aGlzLmZpbHRlck9wdGlvbnModGhpcy5wcm9wcy5tdWx0aSA/IHZhbHVlQXJyYXkgOiBudWxsKTtcblx0XHR2YXIgaXNPcGVuID0gdGhpcy5zdGF0ZS5pc09wZW47XG5cdFx0aWYgKHRoaXMucHJvcHMubXVsdGkgJiYgIW9wdGlvbnMubGVuZ3RoICYmIHZhbHVlQXJyYXkubGVuZ3RoICYmICF0aGlzLnN0YXRlLmlucHV0VmFsdWUpIGlzT3BlbiA9IGZhbHNlO1xuXHRcdHZhciBmb2N1c2VkT3B0aW9uID0gdGhpcy5fZm9jdXNlZE9wdGlvbiA9IHRoaXMuZ2V0Rm9jdXNhYmxlT3B0aW9uKHZhbHVlQXJyYXlbMF0pO1xuXHRcdHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdTZWxlY3QnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuXHRcdFx0J1NlbGVjdC0tbXVsdGknOiB0aGlzLnByb3BzLm11bHRpLFxuXHRcdFx0J2lzLWRpc2FibGVkJzogdGhpcy5wcm9wcy5kaXNhYmxlZCxcblx0XHRcdCdpcy1mb2N1c2VkJzogdGhpcy5zdGF0ZS5pc0ZvY3VzZWQsXG5cdFx0XHQnaXMtbG9hZGluZyc6IHRoaXMucHJvcHMuaXNMb2FkaW5nLFxuXHRcdFx0J2lzLW9wZW4nOiBpc09wZW4sXG5cdFx0XHQnaXMtcHNldWRvLWZvY3VzZWQnOiB0aGlzLnN0YXRlLmlzUHNldWRvRm9jdXNlZCxcblx0XHRcdCdpcy1zZWFyY2hhYmxlJzogdGhpcy5wcm9wcy5zZWFyY2hhYmxlLFxuXHRcdFx0J2hhcy12YWx1ZSc6IHZhbHVlQXJyYXkubGVuZ3RoXG5cdFx0fSk7XG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IHJlZjogJ3dyYXBwZXInLCBjbGFzc05hbWU6IGNsYXNzTmFtZSwgc3R5bGU6IHRoaXMucHJvcHMud3JhcHBlclN0eWxlIH0sXG5cdFx0XHR0aGlzLnJlbmRlckhpZGRlbkZpZWxkKHZhbHVlQXJyYXkpLFxuXHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHR7IHJlZjogJ2NvbnRyb2wnLFxuXHRcdFx0XHRcdGNsYXNzTmFtZTogJ1NlbGVjdC1jb250cm9sJyxcblx0XHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSxcblx0XHRcdFx0XHRvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcblx0XHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG5cdFx0XHRcdFx0b25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCxcblx0XHRcdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdFx0XHRvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUgfSxcblx0XHRcdFx0dGhpcy5yZW5kZXJWYWx1ZSh2YWx1ZUFycmF5LCBpc09wZW4pLFxuXHRcdFx0XHR0aGlzLnJlbmRlcklucHV0KHZhbHVlQXJyYXkpLFxuXHRcdFx0XHR0aGlzLnJlbmRlckxvYWRpbmcoKSxcblx0XHRcdFx0dGhpcy5yZW5kZXJDbGVhcigpLFxuXHRcdFx0XHR0aGlzLnJlbmRlckFycm93KClcblx0XHRcdCksXG5cdFx0XHRpc09wZW4gPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHsgcmVmOiAnbWVudUNvbnRhaW5lcicsIGNsYXNzTmFtZTogJ1NlbGVjdC1tZW51LW91dGVyJywgc3R5bGU6IHRoaXMucHJvcHMubWVudUNvbnRhaW5lclN0eWxlIH0sXG5cdFx0XHRcdF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdHsgcmVmOiAnbWVudScsIGNsYXNzTmFtZTogJ1NlbGVjdC1tZW51Jyxcblx0XHRcdFx0XHRcdHN0eWxlOiB0aGlzLnByb3BzLm1lbnVTdHlsZSxcblx0XHRcdFx0XHRcdG9uU2Nyb2xsOiB0aGlzLmhhbmRsZU1lbnVTY3JvbGwsXG5cdFx0XHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd25Pbk1lbnUgfSxcblx0XHRcdFx0XHR0aGlzLnJlbmRlck1lbnUob3B0aW9ucywgIXRoaXMucHJvcHMubXVsdGkgPyB2YWx1ZUFycmF5IDogbnVsbCwgZm9jdXNlZE9wdGlvbilcblx0XHRcdFx0KVxuXHRcdFx0KSA6IG51bGxcblx0XHQpO1xuXHR9XG5cbn0pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTZWxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1zZWxlY3QvbGliL1NlbGVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYXAgPSBbeyAnYmFzZSc6ICdBJywgJ2xldHRlcnMnOiAvW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2cgfSwgeyAnYmFzZSc6ICdBQScsICdsZXR0ZXJzJzogL1tcXHVBNzMyXS9nIH0sIHsgJ2Jhc2UnOiAnQUUnLCAnbGV0dGVycyc6IC9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nIH0sIHsgJ2Jhc2UnOiAnQU8nLCAnbGV0dGVycyc6IC9bXFx1QTczNF0vZyB9LCB7ICdiYXNlJzogJ0FVJywgJ2xldHRlcnMnOiAvW1xcdUE3MzZdL2cgfSwgeyAnYmFzZSc6ICdBVicsICdsZXR0ZXJzJzogL1tcXHVBNzM4XFx1QTczQV0vZyB9LCB7ICdiYXNlJzogJ0FZJywgJ2xldHRlcnMnOiAvW1xcdUE3M0NdL2cgfSwgeyAnYmFzZSc6ICdCJywgJ2xldHRlcnMnOiAvW1xcdTAwNDJcXHUyNEI3XFx1RkYyMlxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTAyNDNcXHUwMTgyXFx1MDE4MV0vZyB9LCB7ICdiYXNlJzogJ0MnLCAnbGV0dGVycyc6IC9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nIH0sIHsgJ2Jhc2UnOiAnRCcsICdsZXR0ZXJzJzogL1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZyB9LCB7ICdiYXNlJzogJ0RaJywgJ2xldHRlcnMnOiAvW1xcdTAxRjFcXHUwMUM0XS9nIH0sIHsgJ2Jhc2UnOiAnRHonLCAnbGV0dGVycyc6IC9bXFx1MDFGMlxcdTAxQzVdL2cgfSwgeyAnYmFzZSc6ICdFJywgJ2xldHRlcnMnOiAvW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZyB9LCB7ICdiYXNlJzogJ0YnLCAnbGV0dGVycyc6IC9bXFx1MDA0NlxcdTI0QkJcXHVGRjI2XFx1MUUxRVxcdTAxOTFcXHVBNzdCXS9nIH0sIHsgJ2Jhc2UnOiAnRycsICdsZXR0ZXJzJzogL1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2cgfSwgeyAnYmFzZSc6ICdIJywgJ2xldHRlcnMnOiAvW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nIH0sIHsgJ2Jhc2UnOiAnSScsICdsZXR0ZXJzJzogL1tcXHUwMDQ5XFx1MjRCRVxcdUZGMjlcXHUwMENDXFx1MDBDRFxcdTAwQ0VcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTMwXFx1MDBDRlxcdTFFMkVcXHUxRUM4XFx1MDFDRlxcdTAyMDhcXHUwMjBBXFx1MUVDQVxcdTAxMkVcXHUxRTJDXFx1MDE5N10vZyB9LCB7ICdiYXNlJzogJ0onLCAnbGV0dGVycyc6IC9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2cgfSwgeyAnYmFzZSc6ICdLJywgJ2xldHRlcnMnOiAvW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nIH0sIHsgJ2Jhc2UnOiAnTCcsICdsZXR0ZXJzJzogL1tcXHUwMDRDXFx1MjRDMVxcdUZGMkNcXHUwMTNGXFx1MDEzOVxcdTAxM0RcXHUxRTM2XFx1MUUzOFxcdTAxM0JcXHUxRTNDXFx1MUUzQVxcdTAxNDFcXHUwMjNEXFx1MkM2MlxcdTJDNjBcXHVBNzQ4XFx1QTc0NlxcdUE3ODBdL2cgfSwgeyAnYmFzZSc6ICdMSicsICdsZXR0ZXJzJzogL1tcXHUwMUM3XS9nIH0sIHsgJ2Jhc2UnOiAnTGonLCAnbGV0dGVycyc6IC9bXFx1MDFDOF0vZyB9LCB7ICdiYXNlJzogJ00nLCAnbGV0dGVycyc6IC9bXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUNdL2cgfSwgeyAnYmFzZSc6ICdOJywgJ2xldHRlcnMnOiAvW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2cgfSwgeyAnYmFzZSc6ICdOSicsICdsZXR0ZXJzJzogL1tcXHUwMUNBXS9nIH0sIHsgJ2Jhc2UnOiAnTmonLCAnbGV0dGVycyc6IC9bXFx1MDFDQl0vZyB9LCB7ICdiYXNlJzogJ08nLCAnbGV0dGVycyc6IC9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZyB9LCB7ICdiYXNlJzogJ09JJywgJ2xldHRlcnMnOiAvW1xcdTAxQTJdL2cgfSwgeyAnYmFzZSc6ICdPTycsICdsZXR0ZXJzJzogL1tcXHVBNzRFXS9nIH0sIHsgJ2Jhc2UnOiAnT1UnLCAnbGV0dGVycyc6IC9bXFx1MDIyMl0vZyB9LCB7ICdiYXNlJzogJ1AnLCAnbGV0dGVycyc6IC9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZyB9LCB7ICdiYXNlJzogJ1EnLCAnbGV0dGVycyc6IC9bXFx1MDA1MVxcdTI0QzZcXHVGRjMxXFx1QTc1NlxcdUE3NThcXHUwMjRBXS9nIH0sIHsgJ2Jhc2UnOiAnUicsICdsZXR0ZXJzJzogL1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZyB9LCB7ICdiYXNlJzogJ1MnLCAnbGV0dGVycyc6IC9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2cgfSwgeyAnYmFzZSc6ICdUJywgJ2xldHRlcnMnOiAvW1xcdTAwNTRcXHUyNEM5XFx1RkYzNFxcdTFFNkFcXHUwMTY0XFx1MUU2Q1xcdTAyMUFcXHUwMTYyXFx1MUU3MFxcdTFFNkVcXHUwMTY2XFx1MDFBQ1xcdTAxQUVcXHUwMjNFXFx1QTc4Nl0vZyB9LCB7ICdiYXNlJzogJ1RaJywgJ2xldHRlcnMnOiAvW1xcdUE3MjhdL2cgfSwgeyAnYmFzZSc6ICdVJywgJ2xldHRlcnMnOiAvW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2cgfSwgeyAnYmFzZSc6ICdWJywgJ2xldHRlcnMnOiAvW1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1XS9nIH0sIHsgJ2Jhc2UnOiAnVlknLCAnbGV0dGVycyc6IC9bXFx1QTc2MF0vZyB9LCB7ICdiYXNlJzogJ1cnLCAnbGV0dGVycyc6IC9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZyB9LCB7ICdiYXNlJzogJ1gnLCAnbGV0dGVycyc6IC9bXFx1MDA1OFxcdTI0Q0RcXHVGRjM4XFx1MUU4QVxcdTFFOENdL2cgfSwgeyAnYmFzZSc6ICdZJywgJ2xldHRlcnMnOiAvW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZyB9LCB7ICdiYXNlJzogJ1onLCAnbGV0dGVycyc6IC9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2cgfSwgeyAnYmFzZSc6ICdhJywgJ2xldHRlcnMnOiAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nIH0sIHsgJ2Jhc2UnOiAnYWEnLCAnbGV0dGVycyc6IC9bXFx1QTczM10vZyB9LCB7ICdiYXNlJzogJ2FlJywgJ2xldHRlcnMnOiAvW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZyB9LCB7ICdiYXNlJzogJ2FvJywgJ2xldHRlcnMnOiAvW1xcdUE3MzVdL2cgfSwgeyAnYmFzZSc6ICdhdScsICdsZXR0ZXJzJzogL1tcXHVBNzM3XS9nIH0sIHsgJ2Jhc2UnOiAnYXYnLCAnbGV0dGVycyc6IC9bXFx1QTczOVxcdUE3M0JdL2cgfSwgeyAnYmFzZSc6ICdheScsICdsZXR0ZXJzJzogL1tcXHVBNzNEXS9nIH0sIHsgJ2Jhc2UnOiAnYicsICdsZXR0ZXJzJzogL1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2cgfSwgeyAnYmFzZSc6ICdjJywgJ2xldHRlcnMnOiAvW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2cgfSwgeyAnYmFzZSc6ICdkJywgJ2xldHRlcnMnOiAvW1xcdTAwNjRcXHUyNEQzXFx1RkY0NFxcdTFFMEJcXHUwMTBGXFx1MUUwRFxcdTFFMTFcXHUxRTEzXFx1MUUwRlxcdTAxMTFcXHUwMThDXFx1MDI1NlxcdTAyNTdcXHVBNzdBXS9nIH0sIHsgJ2Jhc2UnOiAnZHonLCAnbGV0dGVycyc6IC9bXFx1MDFGM1xcdTAxQzZdL2cgfSwgeyAnYmFzZSc6ICdlJywgJ2xldHRlcnMnOiAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2cgfSwgeyAnYmFzZSc6ICdmJywgJ2xldHRlcnMnOiAvW1xcdTAwNjZcXHUyNEQ1XFx1RkY0NlxcdTFFMUZcXHUwMTkyXFx1QTc3Q10vZyB9LCB7ICdiYXNlJzogJ2cnLCAnbGV0dGVycyc6IC9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nIH0sIHsgJ2Jhc2UnOiAnaCcsICdsZXR0ZXJzJzogL1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2cgfSwgeyAnYmFzZSc6ICdodicsICdsZXR0ZXJzJzogL1tcXHUwMTk1XS9nIH0sIHsgJ2Jhc2UnOiAnaScsICdsZXR0ZXJzJzogL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZyB9LCB7ICdiYXNlJzogJ2onLCAnbGV0dGVycyc6IC9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nIH0sIHsgJ2Jhc2UnOiAnaycsICdsZXR0ZXJzJzogL1tcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBM10vZyB9LCB7ICdiYXNlJzogJ2wnLCAnbGV0dGVycyc6IC9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZyB9LCB7ICdiYXNlJzogJ2xqJywgJ2xldHRlcnMnOiAvW1xcdTAxQzldL2cgfSwgeyAnYmFzZSc6ICdtJywgJ2xldHRlcnMnOiAvW1xcdTAwNkRcXHUyNERDXFx1RkY0RFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTAyNzFcXHUwMjZGXS9nIH0sIHsgJ2Jhc2UnOiAnbicsICdsZXR0ZXJzJzogL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZyB9LCB7ICdiYXNlJzogJ25qJywgJ2xldHRlcnMnOiAvW1xcdTAxQ0NdL2cgfSwgeyAnYmFzZSc6ICdvJywgJ2xldHRlcnMnOiAvW1xcdTAwNkZcXHUyNERFXFx1RkY0RlxcdTAwRjJcXHUwMEYzXFx1MDBGNFxcdTFFRDNcXHUxRUQxXFx1MUVEN1xcdTFFRDVcXHUwMEY1XFx1MUU0RFxcdTAyMkRcXHUxRTRGXFx1MDE0RFxcdTFFNTFcXHUxRTUzXFx1MDE0RlxcdTAyMkZcXHUwMjMxXFx1MDBGNlxcdTAyMkJcXHUxRUNGXFx1MDE1MVxcdTAxRDJcXHUwMjBEXFx1MDIwRlxcdTAxQTFcXHUxRUREXFx1MUVEQlxcdTFFRTFcXHUxRURGXFx1MUVFM1xcdTFFQ0RcXHUxRUQ5XFx1MDFFQlxcdTAxRURcXHUwMEY4XFx1MDFGRlxcdTAyNTRcXHVBNzRCXFx1QTc0RFxcdTAyNzVdL2cgfSwgeyAnYmFzZSc6ICdvaScsICdsZXR0ZXJzJzogL1tcXHUwMUEzXS9nIH0sIHsgJ2Jhc2UnOiAnb3UnLCAnbGV0dGVycyc6IC9bXFx1MDIyM10vZyB9LCB7ICdiYXNlJzogJ29vJywgJ2xldHRlcnMnOiAvW1xcdUE3NEZdL2cgfSwgeyAnYmFzZSc6ICdwJywgJ2xldHRlcnMnOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2cgfSwgeyAnYmFzZSc6ICdxJywgJ2xldHRlcnMnOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZyB9LCB7ICdiYXNlJzogJ3InLCAnbGV0dGVycyc6IC9bXFx1MDA3MlxcdTI0RTFcXHVGRjUyXFx1MDE1NVxcdTFFNTlcXHUwMTU5XFx1MDIxMVxcdTAyMTNcXHUxRTVCXFx1MUU1RFxcdTAxNTdcXHUxRTVGXFx1MDI0RFxcdTAyN0RcXHVBNzVCXFx1QTdBN1xcdUE3ODNdL2cgfSwgeyAnYmFzZSc6ICdzJywgJ2xldHRlcnMnOiAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZyB9LCB7ICdiYXNlJzogJ3QnLCAnbGV0dGVycyc6IC9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZyB9LCB7ICdiYXNlJzogJ3R6JywgJ2xldHRlcnMnOiAvW1xcdUE3MjldL2cgfSwgeyAnYmFzZSc6ICd1JywgJ2xldHRlcnMnOiAvW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2cgfSwgeyAnYmFzZSc6ICd2JywgJ2xldHRlcnMnOiAvW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nIH0sIHsgJ2Jhc2UnOiAndnknLCAnbGV0dGVycyc6IC9bXFx1QTc2MV0vZyB9LCB7ICdiYXNlJzogJ3cnLCAnbGV0dGVycyc6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2cgfSwgeyAnYmFzZSc6ICd4JywgJ2xldHRlcnMnOiAvW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nIH0sIHsgJ2Jhc2UnOiAneScsICdsZXR0ZXJzJzogL1tcXHUwMDc5XFx1MjRFOFxcdUZGNTlcXHUxRUYzXFx1MDBGRFxcdTAxNzdcXHUxRUY5XFx1MDIzM1xcdTFFOEZcXHUwMEZGXFx1MUVGN1xcdTFFOTlcXHUxRUY1XFx1MDFCNFxcdTAyNEZcXHUxRUZGXS9nIH0sIHsgJ2Jhc2UnOiAneicsICdsZXR0ZXJzJzogL1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZyB9XTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3Moc3RyKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbWFwLmxlbmd0aDsgaSsrKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UobWFwW2ldLmxldHRlcnMsIG1hcFtpXS5iYXNlKTtcblx0fVxuXHRyZXR1cm4gc3RyO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL3N0cmlwRGlhY3JpdGljcy5qc1xuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMualF1ZXJ5ID0gZXhwb3J0cy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0QWRkb25zVXBkYXRlID0gcmVxdWlyZShcInJlYWN0LWFkZG9ucy11cGRhdGVcIik7XG5cbnZhciBfcmVhY3RBZGRvbnNVcGRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RBZGRvbnNVcGRhdGUpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX2FuaW1hdGlvbk1peGluID0gcmVxdWlyZShcIi4vYW5pbWF0aW9uTWl4aW5cIik7XG5cbnZhciBfYW5pbWF0aW9uTWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYW5pbWF0aW9uTWl4aW4pO1xuXG52YXIgX2pRdWVyeU1peGluID0gcmVxdWlyZShcIi4valF1ZXJ5TWl4aW5cIik7XG5cbnZhciBfalF1ZXJ5TWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfalF1ZXJ5TWl4aW4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFRvYXN0TWVzc2FnZVNwZWMgPSB7XG4gIGRpc3BsYXlOYW1lOiBcIlRvYXN0TWVzc2FnZVwiLFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHZhciBpY29uQ2xhc3NOYW1lcyA9IHtcbiAgICAgIGVycm9yOiBcInRvYXN0LWVycm9yXCIsXG4gICAgICBpbmZvOiBcInRvYXN0LWluZm9cIixcbiAgICAgIHN1Y2Nlc3M6IFwidG9hc3Qtc3VjY2Vzc1wiLFxuICAgICAgd2FybmluZzogXCJ0b2FzdC13YXJuaW5nXCJcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ0b2FzdFwiLFxuICAgICAgaWNvbkNsYXNzTmFtZXM6IGljb25DbGFzc05hbWVzLFxuICAgICAgdGl0bGVDbGFzc05hbWU6IFwidG9hc3QtdGl0bGVcIixcbiAgICAgIG1lc3NhZ2VDbGFzc05hbWU6IFwidG9hc3QtbWVzc2FnZVwiLFxuICAgICAgdGFwVG9EaXNtaXNzOiB0cnVlLFxuICAgICAgY2xvc2VCdXR0b246IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgaGFuZGxlT25DbGljazogZnVuY3Rpb24gaGFuZGxlT25DbGljayhldmVudCkge1xuICAgIHRoaXMucHJvcHMuaGFuZGxlT25DbGljayhldmVudCk7XG4gICAgaWYgKHRoaXMucHJvcHMudGFwVG9EaXNtaXNzKSB7XG4gICAgICB0aGlzLmhpZGVUb2FzdCh0cnVlKTtcbiAgICB9XG4gIH0sXG4gIF9oYW5kbGVfY2xvc2VfYnV0dG9uX2NsaWNrOiBmdW5jdGlvbiBfaGFuZGxlX2Nsb3NlX2J1dHRvbl9jbGljayhldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuaGlkZVRvYXN0KHRydWUpO1xuICB9LFxuICBfaGFuZGxlX3JlbW92ZTogZnVuY3Rpb24gX2hhbmRsZV9yZW1vdmUoKSB7XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVSZW1vdmUodGhpcy5wcm9wcy50b2FzdElkKTtcbiAgfSxcbiAgX3JlbmRlcl9jbG9zZV9idXR0b246IGZ1bmN0aW9uIF9yZW5kZXJfY2xvc2VfYnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNsb3NlQnV0dG9uID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInRvYXN0LWNsb3NlLWJ1dHRvblwiLCByb2xlOiBcImJ1dHRvblwiLFxuICAgICAgb25DbGljazogdGhpcy5faGFuZGxlX2Nsb3NlX2J1dHRvbl9jbGljayxcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogXCImdGltZXM7XCIgfVxuICAgIH0pIDogZmFsc2U7XG4gIH0sXG4gIF9yZW5kZXJfdGl0bGVfZWxlbWVudDogZnVuY3Rpb24gX3JlbmRlcl90aXRsZV9lbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRpdGxlID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMudGl0bGVDbGFzc05hbWUgfSxcbiAgICAgIHRoaXMucHJvcHMudGl0bGVcbiAgICApIDogZmFsc2U7XG4gIH0sXG4gIF9yZW5kZXJfbWVzc2FnZV9lbGVtZW50OiBmdW5jdGlvbiBfcmVuZGVyX21lc3NhZ2VfZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5tZXNzYWdlID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMubWVzc2FnZUNsYXNzTmFtZSB9LFxuICAgICAgdGhpcy5wcm9wcy5tZXNzYWdlXG4gICAgKSA6IGZhbHNlO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgaWNvbkNsYXNzTmFtZSA9IHRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZSB8fCB0aGlzLnByb3BzLmljb25DbGFzc05hbWVzW3RoaXMucHJvcHMudHlwZV07XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkodGhpcy5wcm9wcy5jbGFzc05hbWUsIGljb25DbGFzc05hbWUpLFxuICAgICAgICBzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVPbkNsaWNrLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmVcbiAgICAgIH0sXG4gICAgICB0aGlzLl9yZW5kZXJfY2xvc2VfYnV0dG9uKCksXG4gICAgICB0aGlzLl9yZW5kZXJfdGl0bGVfZWxlbWVudCgpLFxuICAgICAgdGhpcy5fcmVuZGVyX21lc3NhZ2VfZWxlbWVudCgpXG4gICAgKTtcbiAgfVxufTtcblxudmFyIGFuaW1hdGlvbiA9IGV4cG9ydHMuYW5pbWF0aW9uID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKCgwLCBfcmVhY3RBZGRvbnNVcGRhdGUyLmRlZmF1bHQpKFRvYXN0TWVzc2FnZVNwZWMsIHtcbiAgZGlzcGxheU5hbWU6IHsgJHNldDogXCJUb2FzdE1lc3NhZ2UuYW5pbWF0aW9uXCIgfSxcbiAgbWl4aW5zOiB7ICRzZXQ6IFtfYW5pbWF0aW9uTWl4aW4yLmRlZmF1bHRdIH1cbn0pKTtcblxudmFyIGpRdWVyeSA9IGV4cG9ydHMualF1ZXJ5ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKCgwLCBfcmVhY3RBZGRvbnNVcGRhdGUyLmRlZmF1bHQpKFRvYXN0TWVzc2FnZVNwZWMsIHtcbiAgZGlzcGxheU5hbWU6IHsgJHNldDogXCJUb2FzdE1lc3NhZ2UualF1ZXJ5XCIgfSxcbiAgbWl4aW5zOiB7ICRzZXQ6IFtfalF1ZXJ5TWl4aW4yLmRlZmF1bHRdIH1cbn0pKTtcblxuLypcbiAqIGFzc2lnbiBkZWZhdWx0IG5vb3AgZnVuY3Rpb25zXG4gKi9cblRvYXN0TWVzc2FnZVNwZWMuaGFuZGxlTW91c2VFbnRlciA9IG5vb3A7XG5Ub2FzdE1lc3NhZ2VTcGVjLmhhbmRsZU1vdXNlTGVhdmUgPSBub29wO1xuVG9hc3RNZXNzYWdlU3BlYy5oaWRlVG9hc3QgPSBub29wO1xuXG52YXIgVG9hc3RNZXNzYWdlID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKFRvYXN0TWVzc2FnZVNwZWMpO1xuXG5Ub2FzdE1lc3NhZ2UuYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuVG9hc3RNZXNzYWdlLmpRdWVyeSA9IGpRdWVyeTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVG9hc3RNZXNzYWdlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LXRvYXN0ci9saWIvVG9hc3RNZXNzYWdlL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgncmVhY3QvbGliL3VwZGF0ZScpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LXRvYXN0ci9+L3JlYWN0LWFkZG9ucy11cGRhdGUvaW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2V2ZW50cy9ldmVudHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcHJvY2Vzcy9icm93c2VyLmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc1NldCBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4vQ29uc3QnO1xyXG5pbXBvcnQgVGFibGVIZWFkZXIgZnJvbSAnLi9UYWJsZUhlYWRlcic7XHJcbmltcG9ydCBUYWJsZUJvZHkgZnJvbSAnLi9UYWJsZUJvZHknO1xyXG5pbXBvcnQgUGFnaW5hdGlvbkxpc3QgZnJvbSAnLi9wYWdpbmF0aW9uL1BhZ2luYXRpb25MaXN0JztcclxuaW1wb3J0IFRvb2xCYXIgZnJvbSAnLi90b29sYmFyL1Rvb2xCYXInO1xyXG5pbXBvcnQgVGFibGVGaWx0ZXIgZnJvbSAnLi9UYWJsZUZpbHRlcic7XHJcbmltcG9ydCB7VGFibGVEYXRhU3RvcmV9IGZyb20gJy4vc3RvcmUvVGFibGVEYXRhU3RvcmUnO1xyXG5pbXBvcnQgZXhwb3J0Q1NWIGZyb20gJy4vY3N2X2V4cG9ydF91dGlsJztcclxuaW1wb3J0IHtGaWx0ZXJ9IGZyb20gJy4vRmlsdGVyJztcclxuXHJcbmNsYXNzIEJvb3RzdHJhcFRhYmxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLl9hdHRhY2hDZWxsRWRpdEZ1bmMoKTtcclxuXHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5kYXRhKSkge1xyXG4gICAgICB0aGlzLnN0b3JlID0gbmV3IFRhYmxlRGF0YVN0b3JlKHRoaXMucHJvcHMuZGF0YS5nZXREYXRhKCkpO1xyXG4gICAgICB0aGlzLnByb3BzLmRhdGEuY2xlYXIoKTtcclxuICAgICAgdGhpcy5wcm9wcy5kYXRhLm9uKCdjaGFuZ2UnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RvcmUuc2V0RGF0YShkYXRhKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGRhdGE6IHRoaXMuZ2V0VGFibGVEYXRhKClcclxuICAgICAgICB9KVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBjb3B5ID0gdGhpcy5wcm9wcy5kYXRhLnNsaWNlKCk7XHJcbiAgICAgIHRoaXMuc3RvcmUgPSBuZXcgVGFibGVEYXRhU3RvcmUoY29weSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbml0VGFibGUodGhpcy5wcm9wcyk7XHJcblxyXG4gICAgaWYgKHRoaXMuZmlsdGVyKSB7XHJcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICB0aGlzLmZpbHRlci5vbignb25GaWx0ZXJDaGFuZ2UnLCAoY3VycmVudEZpbHRlcikgPT4ge1xyXG4gICAgICAgIHNlbGYuaGFuZGxlRmlsdGVyRGF0YShjdXJyZW50RmlsdGVyKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0Um93ICYmIHRoaXMucHJvcHMuc2VsZWN0Um93LnNlbGVjdGVkKSB7XHJcbiAgICAgIGxldCBjb3B5ID0gdGhpcy5wcm9wcy5zZWxlY3RSb3cuc2VsZWN0ZWQuc2xpY2UoKTtcclxuICAgICAgdGhpcy5zdG9yZS5zZXRTZWxlY3RlZFJvd0tleShjb3B5KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBkYXRhOiB0aGlzLmdldFRhYmxlRGF0YSgpLFxyXG4gICAgICBjdXJyUGFnZTogdGhpcy5wcm9wcy5vcHRpb25zLnBhZ2UgfHwgMSxcclxuICAgICAgc2l6ZVBlclBhZ2U6IHRoaXMucHJvcHMub3B0aW9ucy5zaXplUGVyUGFnZSB8fCBDb25zdC5TSVpFX1BFUl9QQUdFX0xJU1RbMF0sXHJcbiAgICAgIHNlbGVjdGVkUm93S2V5czogdGhpcy5zdG9yZS5nZXRTZWxlY3RlZFJvd0tleXMoKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGluaXRUYWJsZShwcm9wcyl7XHJcbiAgICBsZXQge2tleUZpZWxkfSA9IHByb3BzO1xyXG5cclxuICAgIGNvbnN0IGlzS2V5RmllbGREZWZpbmVkID0gdHlwZW9mIGtleUZpZWxkID09PSAnc3RyaW5nJyAmJiBrZXlGaWVsZC5sZW5ndGg7XHJcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHByb3BzLmNoaWxkcmVuLCBjb2x1bW49PiB7XHJcbiAgICAgIGlmIChjb2x1bW4ucHJvcHMuaXNLZXkpIHtcclxuICAgICAgICBpZiAoa2V5RmllbGQpIHtcclxuICAgICAgICAgIHRocm93IFwiRXJyb3IuIE11bHRpcGxlIGtleSBjb2x1bW4gYmUgZGV0ZWN0ZWQgaW4gVGFibGVIZWFkZXJDb2x1bW4uXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGtleUZpZWxkID0gY29sdW1uLnByb3BzLmRhdGFGaWVsZDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY29sdW1uLnByb3BzLmZpbHRlcikge1xyXG4gICAgICAgIC8vIGEgY29sdW1uIGNvbnRhaW5zIGEgZmlsdGVyXHJcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlcikge1xyXG4gICAgICAgICAgLy8gZmlyc3QgdGltZSBjcmVhdGUgdGhlIGZpbHRlciBvbiB0aGUgQm9vdHN0cmFwVGFibGVcclxuICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwYXNzIHRoZSBmaWx0ZXIgdG8gY29sdW1uIHdpdGggZmlsdGVyXHJcbiAgICAgICAgY29sdW1uLnByb3BzLmZpbHRlci5lbWl0dGVyID0gdGhpcy5maWx0ZXI7XHJcbiAgICAgIH1cclxuICAgIH0sIHRoaXMpO1xyXG5cclxuICAgIGxldCBjb2xJbmZvcyA9IHRoaXMuZ2V0Q29sdW1uc0Rlc2NyaXB0aW9uKHByb3BzKS5yZWR1Y2UoKCBwcmV2LCBjdXJyICkgPT4ge1xyXG4gICAgICBwcmV2W2N1cnIubmFtZV0gPSBjdXJyO1xyXG4gICAgICByZXR1cm4gcHJldjtcclxuICAgIH0sIHt9KTtcclxuXHJcbiAgICBpZiAoIWlzS2V5RmllbGREZWZpbmVkICYmICFrZXlGaWVsZClcclxuICAgICAgdGhyb3cgYEVycm9yLiBObyBhbnkga2V5IGNvbHVtbiBkZWZpbmVkIGluIFRhYmxlSGVhZGVyQ29sdW1uLlxyXG4gICAgICAgICAgICBVc2UgJ2lzS2V5PXt0cnVlfScgdG8gc3BlY2lmeSBhIHVuaXF1ZSBjb2x1bW4gYWZ0ZXIgdmVyc2lvbiAwLjUuNC5gO1xyXG5cclxuICAgIHRoaXMuc3RvcmUuc2V0UHJvcHMoe1xyXG4gICAgICBpc1BhZ2luYXRpb246IHByb3BzLnBhZ2luYXRpb24sXHJcbiAgICAgIGtleUZpZWxkOiBrZXlGaWVsZCxcclxuICAgICAgY29sSW5mb3M6IGNvbEluZm9zLFxyXG4gICAgICBtdWx0aUNvbHVtblNlYXJjaDogcHJvcHMubXVsdGlDb2x1bW5TZWFyY2gsXHJcbiAgICAgIHJlbW90ZTogdGhpcy5pc1JlbW90ZURhdGFTb3VyY2UoKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRUYWJsZURhdGEoKSB7XHJcbiAgICAgbGV0IHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICBpZih0aGlzLnByb3BzLm9wdGlvbnMuc29ydE5hbWUgJiYgdGhpcy5wcm9wcy5vcHRpb25zLnNvcnRPcmRlcilcclxuICAgICAgIHRoaXMuc3RvcmUuc29ydCh0aGlzLnByb3BzLm9wdGlvbnMuc29ydE9yZGVyLCB0aGlzLnByb3BzLm9wdGlvbnMuc29ydE5hbWUpO1xyXG5cclxuICAgICBpZiAodGhpcy5wcm9wcy5wYWdpbmF0aW9uKSB7XHJcbiAgICAgICBsZXQgcGFnZSwgc2l6ZVBlclBhZ2U7XHJcbiAgICAgICBpZiAodGhpcy5zdG9yZS5pc0NoYW5nZWRQYWdlKCkpIHtcclxuICAgICAgICBzaXplUGVyUGFnZSA9IHRoaXMuc3RhdGUuc2l6ZVBlclBhZ2U7XHJcbiAgICAgICAgcGFnZSA9IHRoaXMuc3RhdGUuY3VyclBhZ2U7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBzaXplUGVyUGFnZSA9IHRoaXMucHJvcHMub3B0aW9ucy5zaXplUGVyUGFnZSB8fCBDb25zdC5TSVpFX1BFUl9QQUdFX0xJU1RbMF07XHJcbiAgICAgICAgIHBhZ2UgPSB0aGlzLnByb3BzLm9wdGlvbnMucGFnZSB8fCAxO1xyXG4gICAgICAgfVxyXG4gICAgICAgcmVzdWx0ID0gdGhpcy5zdG9yZS5wYWdlKHBhZ2UsIHNpemVQZXJQYWdlKS5nZXQoKTtcclxuICAgICB9IGVsc2Uge1xyXG4gICAgICAgcmVzdWx0ID0gdGhpcy5zdG9yZS5nZXQoKTtcclxuICAgICB9XHJcbiAgICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGdldENvbHVtbnNEZXNjcmlwdGlvbih7IGNoaWxkcmVuIH0pIHtcclxuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjb2x1bW4sIGkpID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiBjb2x1bW4ucHJvcHMuZGF0YUZpZWxkLFxyXG4gICAgICAgIGFsaWduOiBjb2x1bW4ucHJvcHMuZGF0YUFsaWduLFxyXG4gICAgICAgIHNvcnQ6IGNvbHVtbi5wcm9wcy5kYXRhU29ydCxcclxuICAgICAgICBmb3JtYXQ6IGNvbHVtbi5wcm9wcy5kYXRhRm9ybWF0LFxyXG4gICAgICAgIGZvcm1hdEV4dHJhRGF0YTogY29sdW1uLnByb3BzLmZvcm1hdEV4dHJhRGF0YSxcclxuICAgICAgICBmaWx0ZXJGb3JtYXR0ZWQ6IGNvbHVtbi5wcm9wcy5maWx0ZXJGb3JtYXR0ZWQsXHJcbiAgICAgICAgZWRpdGFibGU6IGNvbHVtbi5wcm9wcy5lZGl0YWJsZSxcclxuICAgICAgICBoaWRkZW46IGNvbHVtbi5wcm9wcy5oaWRkZW4sXHJcbiAgICAgICAgc2VhcmNoYWJsZTogY29sdW1uLnByb3BzLnNlYXJjaGFibGUsXHJcbiAgICAgICAgY2xhc3NOYW1lOiBjb2x1bW4ucHJvcHMuY29sdW1uQ2xhc3NOYW1lLFxyXG4gICAgICAgIHdpZHRoOiBjb2x1bW4ucHJvcHMud2lkdGgsXHJcbiAgICAgICAgdGV4dDogY29sdW1uLnByb3BzLmNoaWxkcmVuLFxyXG4gICAgICAgIHNvcnRGdW5jOiBjb2x1bW4ucHJvcHMuc29ydEZ1bmMsXHJcbiAgICAgICAgaW5kZXg6IGlcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgIHRoaXMuaW5pdFRhYmxlKG5leHRQcm9wcyk7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0UHJvcHMuZGF0YSkpIHtcclxuICAgICAgdGhpcy5zdG9yZS5zZXREYXRhKG5leHRQcm9wcy5kYXRhLnNsaWNlKCkpO1xyXG4gICAgICBsZXQgcGFnaW5hdGlvbkRvbSA9IHRoaXMucmVmcy5wYWdpbmF0aW9uO1xyXG4gICAgICBsZXQgcGFnZSA9IHBhZ2luYXRpb25Eb20gJiYgcGFnaW5hdGlvbkRvbS5nZXRDdXJyZW50UGFnZSgpIHx8IG5leHRQcm9wcy5vcHRpb25zLnBhZ2UgfHwgMTtcclxuICAgICAgbGV0IHNpemVQZXJQYWdlID0gcGFnaW5hdGlvbkRvbSAmJiBwYWdpbmF0aW9uRG9tLmdldFNpemVQZXJQYWdlKCkgfHwgbmV4dFByb3BzLm9wdGlvbnMuc2l6ZVBlclBhZ2UgfHwgQ29uc3QuU0laRV9QRVJfUEFHRV9MSVNUWzBdO1xyXG4gICAgICAvLyAjMTI1XHJcbiAgICAgIGlmKHBhZ2UgPiBNYXRoLmNlaWwobmV4dFByb3BzLmRhdGEubGVuZ3RoIC8gc2l6ZVBlclBhZ2UpKSBwYWdlID0gMTtcclxuICAgICAgbGV0IHNvcnRJbmZvID0gdGhpcy5zdG9yZS5nZXRTb3J0SW5mbygpO1xyXG4gICAgICBsZXQgc29ydEZpZWxkID0gbmV4dFByb3BzLm9wdGlvbnMuc29ydE5hbWUgfHwgKHNvcnRJbmZvID8gc29ydEluZm8uc29ydEZpZWxkIDogdW5kZWZpbmVkKTtcclxuICAgICAgbGV0IHNvcnRPcmRlciA9IG5leHRQcm9wcy5vcHRpb25zLnNvcnRPcmRlciB8fCAoc29ydEluZm8gPyBzb3J0SW5mby5vcmRlciA6IHVuZGVmaW5lZCk7XHJcbiAgICAgIGlmKHNvcnRGaWVsZCAmJiBzb3J0T3JkZXIpIHRoaXMuc3RvcmUuc29ydChzb3J0T3JkZXIsIHNvcnRGaWVsZCk7XHJcbiAgICAgIGxldCBkYXRhID0gdGhpcy5zdG9yZS5wYWdlKHBhZ2UsIHNpemVQZXJQYWdlKS5nZXQoKTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBjdXJyUGFnZTogcGFnZSxcclxuICAgICAgICBzaXplUGVyUGFnZTogc2l6ZVBlclBhZ2VcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAobmV4dFByb3BzLnNlbGVjdFJvdyAmJiBuZXh0UHJvcHMuc2VsZWN0Um93LnNlbGVjdGVkKSB7XHJcbiAgICAgIC8vc2V0IGRlZmF1bHQgc2VsZWN0IHJvd3MgdG8gc3RvcmUuXHJcbiAgICAgIGxldCBjb3B5ID0gbmV4dFByb3BzLnNlbGVjdFJvdy5zZWxlY3RlZC5zbGljZSgpO1xyXG4gICAgICB0aGlzLnN0b3JlLnNldFNlbGVjdGVkUm93S2V5KGNvcHkpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzZWxlY3RlZFJvd0tleXM6IGNvcHlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMuX2FkanVzdEhlYWRlcldpZHRoKCk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fYWRqdXN0SGVhZGVyV2lkdGgpO1xyXG4gICAgdGhpcy5yZWZzLmJvZHkucmVmcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fc2Nyb2xsSGVhZGVyKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2FkanVzdEhlYWRlcldpZHRoKTtcclxuICAgIHRoaXMucmVmcy5ib2R5LnJlZnMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX3Njcm9sbEhlYWRlcik7XHJcbiAgICBpZiAodGhpcy5maWx0ZXIpIHtcclxuICAgICAgdGhpcy5maWx0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKFwib25GaWx0ZXJDaGFuZ2VcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XHJcbiAgICB0aGlzLl9hZGp1c3RIZWFkZXJXaWR0aCgpO1xyXG4gICAgdGhpcy5fYXR0YWNoQ2VsbEVkaXRGdW5jKCk7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyVGFibGVDb21wbGV0ZSlcclxuICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyVGFibGVDb21wbGV0ZSgpO1xyXG4gIH1cclxuXHJcbiAgX2F0dGFjaENlbGxFZGl0RnVuYygpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLmNlbGxFZGl0KSB7XHJcbiAgICAgIHRoaXMucHJvcHMuY2VsbEVkaXQuX19vbkNvbXBsZXRlRWRpdF9fID0gdGhpcy5oYW5kbGVFZGl0Q2VsbC5iaW5kKHRoaXMpO1xyXG4gICAgICBpZiAodGhpcy5wcm9wcy5jZWxsRWRpdC5tb2RlICE9PSBDb25zdC5DRUxMX0VESVRfTk9ORSlcclxuICAgICAgICB0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0ID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaWYgaW4gdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbixcclxuICAgKiB0aGUgZGF0YWdyaWQgc2hvdWxkIGxvYWQgaXRzIGRhdGEgcmVtb3RlbHkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICBbcHJvcHNdIE9wdGlvbmFsLiBJZiBub3QgZ2l2ZW4sIHRoaXMucHJvcHMgd2lsbCBiZSB1c2VkXHJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgKi9cclxuICBpc1JlbW90ZURhdGFTb3VyY2UocHJvcHMpIHtcclxuICAgIHJldHVybiAocHJvcHMgfHwgdGhpcy5wcm9wcykucmVtb3RlO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgdGFibGVDbGFzcyA9IGNsYXNzU2V0KFwicmVhY3QtYnMtdGFibGVcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVucyA9IHRoaXMucHJvcHMuY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIHN0eWxlID0ge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMucHJvcHMuaGVpZ2h0LFxyXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IHRoaXMucHJvcHMubWF4SGVpZ2h0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgY2hpbGRyZW5zID0gW3RoaXMucHJvcHMuY2hpbGRyZW5dO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29sdW1ucyA9IHRoaXMuZ2V0Q29sdW1uc0Rlc2NyaXB0aW9uKHRoaXMucHJvcHMpO1xyXG4gICAgICAgIHZhciBzb3J0SW5mbyA9IHRoaXMuc3RvcmUuZ2V0U29ydEluZm8oKTtcclxuICAgICAgICB2YXIgcGFnaW5hdGlvbiA9IHRoaXMucmVuZGVyUGFnaW5hdGlvbigpO1xyXG4gICAgICAgIHZhciB0b29sQmFyID0gdGhpcy5yZW5kZXJUb29sQmFyKCk7XHJcbiAgICAgICAgdmFyIHRhYmxlRmlsdGVyID0gdGhpcy5yZW5kZXJUYWJsZUZpbHRlcihjb2x1bW5zKTtcclxuICAgICAgICB2YXIgaXNTZWxlY3RBbGwgPSB0aGlzLmlzU2VsZWN0QWxsKCk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdC1icy1jb250YWluZXJcIiByZWY9XCJ0YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAge3Rvb2xCYXJ9XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWN0LWJzLXRhYmxlLWNvbnRhaW5lclwiXHJcbiAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5oYW5kbGVNb3VzZUVudGVyLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5oYW5kbGVNb3VzZUxlYXZlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRhYmxlSGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj1cImhlYWRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NlbGVjdFR5cGU9e3RoaXMucHJvcHMuc2VsZWN0Um93Lm1vZGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVTZWxlY3RDb2x1bW49e3RoaXMucHJvcHMuc2VsZWN0Um93LmhpZGVTZWxlY3RDb2x1bW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnROYW1lPXtzb3J0SW5mbyA/IHNvcnRJbmZvLnNvcnRGaWVsZCA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydE9yZGVyPXtzb3J0SW5mbyA/IHNvcnRJbmZvLm9yZGVyIDogdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblNvcnQ9e3RoaXMuaGFuZGxlU29ydC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdEFsbFJvdz17dGhpcy5oYW5kbGVTZWxlY3RBbGxSb3cuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyZWQ9e3RoaXMucHJvcHMuYm9yZGVyZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRlbnNlZD17dGhpcy5wcm9wcy5jb25kZW5zZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRmlsdGVyZWQ9e3RoaXMuZmlsdGVyID8gdHJ1ZSA6IGZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUlEPXt0aGlzLnByb3BzLnRhYmxlSUR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0QWxsPXtpc1NlbGVjdEFsbH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGFibGVIZWFkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRhYmxlQm9keVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuaGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ9e3RoaXMucHJvcHMubWF4SGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9XCJib2R5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT17dGhpcy5zdGF0ZS5kYXRhfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zPXtjb2x1bW5zfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ckNsYXNzTmFtZT17dGhpcy5wcm9wcy50ckNsYXNzTmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBlZD17dGhpcy5wcm9wcy5zdHJpcGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJlZD17dGhpcy5wcm9wcy5ib3JkZXJlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXI9e3RoaXMucHJvcHMuaG92ZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleUZpZWxkPXt0aGlzLnN0b3JlLmdldEtleUZpZWxkKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRlbnNlZD17dGhpcy5wcm9wcy5jb25kZW5zZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdFJvdz17dGhpcy5wcm9wcy5zZWxlY3RSb3d9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxFZGl0PXt0aGlzLnByb3BzLmNlbGxFZGl0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0tleXM9e3RoaXMuc3RhdGUuc2VsZWN0ZWRSb3dLZXlzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblJvd0NsaWNrPXt0aGlzLmhhbmRsZVJvd0NsaWNrLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUm93TW91c2VPdmVyPXt0aGlzLmhhbmRsZVJvd01vdXNlT3Zlci5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblJvd01vdXNlT3V0PXt0aGlzLmhhbmRsZVJvd01vdXNlT3V0LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0Um93PXt0aGlzLmhhbmRsZVNlbGVjdFJvdy5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub0RhdGFUZXh0PXt0aGlzLnByb3BzLm9wdGlvbnMubm9EYXRhVGV4dH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICB7dGFibGVGaWx0ZXJ9XHJcbiAgICAgICAgICAgICAgICB7cGFnaW5hdGlvbn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICBpc1NlbGVjdEFsbCgpe1xyXG4gICAgdmFyIGRlZmF1bHRTZWxlY3RSb3dLZXlzID0gdGhpcy5zdG9yZS5nZXRTZWxlY3RlZFJvd0tleXMoKTtcclxuICAgIHZhciBhbGxSb3dLZXlzID0gdGhpcy5zdG9yZS5nZXRBbGxSb3drZXkoKTtcclxuICAgIGlmKGRlZmF1bHRTZWxlY3RSb3dLZXlzLmxlbmd0aCAhPT0gYWxsUm93S2V5cy5sZW5ndGgpe1xyXG4gICAgICByZXR1cm4gZGVmYXVsdFNlbGVjdFJvd0tleXMubGVuZ3RoID09PSAwID8gZmFsc2UgOiAnaW5kZXRlcm1pbmF0ZSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsZWFuU2VsZWN0ZWQoKSB7XHJcbiAgICB0aGlzLnN0b3JlLnNldFNlbGVjdGVkUm93S2V5KFtdKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBzZWxlY3RlZFJvd0tleXM6IFtdXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNvcnQob3JkZXIsIHNvcnRGaWVsZCkge1xyXG4gICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5vblNvcnRDaGFuZ2UpIHtcclxuICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLm9uU29ydENoYW5nZShzb3J0RmllbGQsIG9yZGVyLCB0aGlzLnByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5zdG9yZS5zb3J0KG9yZGVyLCBzb3J0RmllbGQpLmdldCgpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRhdGE6IHJlc3VsdFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVQYWdpbmF0aW9uRGF0YShwYWdlLCBzaXplUGVyUGFnZSkge1xyXG4gICAgY29uc3Qge29uUGFnZUNoYW5nZX0gPSB0aGlzLnByb3BzLm9wdGlvbnM7XHJcbiAgICBpZiAob25QYWdlQ2hhbmdlKSB7XHJcbiAgICAgIG9uUGFnZUNoYW5nZShwYWdlLCBzaXplUGVyUGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNSZW1vdGVEYXRhU291cmNlKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UocGFnZSwgc2l6ZVBlclBhZ2UpLmdldCgpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRhdGE6IHJlc3VsdCxcclxuICAgICAgY3VyclBhZ2U6IHBhZ2UsXHJcbiAgICAgIHNpemVQZXJQYWdlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZU1vdXNlTGVhdmUoKSB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLm9uTW91c2VMZWF2ZSkge1xyXG4gICAgICB0aGlzLnByb3BzLm9wdGlvbnMub25Nb3VzZUxlYXZlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVNb3VzZUVudGVyKCkge1xyXG4gICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucy5vbk1vdXNlRW50ZXIpIHtcclxuICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLm9uTW91c2VFbnRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlUm93TW91c2VPdXQocm93KSB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLm9uUm93TW91c2VPdXQpIHtcclxuICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLm9uUm93TW91c2VPdXQocm93KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZVJvd01vdXNlT3Zlcihyb3cpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMub25Sb3dNb3VzZU92ZXIpIHtcclxuICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLm9uUm93TW91c2VPdmVyKHJvdyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVSb3dDbGljayhyb3cpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMub25Sb3dDbGljaykge1xyXG4gICAgICB0aGlzLnByb3BzLm9wdGlvbnMub25Sb3dDbGljayhyb3cpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlU2VsZWN0QWxsUm93KGUpIHtcclxuICAgIHZhciBpc1NlbGVjdGVkID0gZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQ7XHJcbiAgICBsZXQgc2VsZWN0ZWRSb3dLZXlzID0gW107XHJcbiAgICBsZXQgcmVzdWx0ID0gdHJ1ZTtcclxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdFJvdy5vblNlbGVjdEFsbCkge1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnByb3BzLnNlbGVjdFJvdy5vblNlbGVjdEFsbChpc1NlbGVjdGVkLFxyXG4gICAgICAgIGlzU2VsZWN0ZWQgPyB0aGlzLnN0b3JlLmdldCgpIDogW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyB8fCByZXN1bHQgIT09IGZhbHNlKSB7XHJcbiAgICAgIGlmIChpc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgc2VsZWN0ZWRSb3dLZXlzID0gdGhpcy5zdG9yZS5nZXRBbGxSb3drZXkoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zdG9yZS5zZXRTZWxlY3RlZFJvd0tleShzZWxlY3RlZFJvd0tleXMpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzZWxlY3RlZFJvd0tleXM6IHNlbGVjdGVkUm93S2V5c1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZVNob3dPbmx5U2VsZWN0ZWQoKSB7XHJcbiAgICB0aGlzLnN0b3JlLmlnbm9yZU5vblNlbGVjdGVkKCk7XHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgaWYgKHRoaXMucHJvcHMucGFnaW5hdGlvbikge1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoMSwgdGhpcy5zdGF0ZS5zaXplUGVyUGFnZSkuZ2V0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLmdldCgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRhdGE6IHJlc3VsdCxcclxuICAgICAgY3VyclBhZ2U6IDEsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNlbGVjdFJvdyhyb3csIGlzU2VsZWN0ZWQpIHtcclxuICAgIGxldCBjdXJyU2VsZWN0ZWQgPSB0aGlzLnN0b3JlLmdldFNlbGVjdGVkUm93S2V5cygpO1xyXG4gICAgbGV0IHJvd0tleSA9IHJvd1t0aGlzLnN0b3JlLmdldEtleUZpZWxkKCldO1xyXG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RSb3cub25TZWxlY3QpIHtcclxuICAgICAgcmVzdWx0ID0gdGhpcy5wcm9wcy5zZWxlY3RSb3cub25TZWxlY3Qocm93LCBpc1NlbGVjdGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgfHwgcmVzdWx0ICE9PSBmYWxzZSkge1xyXG4gICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RSb3cubW9kZSA9PT0gQ29uc3QuUk9XX1NFTEVDVF9TSU5HTEUpIHtcclxuICAgICAgICBjdXJyU2VsZWN0ZWQgPSBpc1NlbGVjdGVkID8gW3Jvd0tleV0gOiBbXVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICBjdXJyU2VsZWN0ZWQucHVzaChyb3dLZXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjdXJyU2VsZWN0ZWQgPSBjdXJyU2VsZWN0ZWQuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvd0tleSAhPT0ga2V5O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnN0b3JlLnNldFNlbGVjdGVkUm93S2V5KGN1cnJTZWxlY3RlZCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHNlbGVjdGVkUm93S2V5czogY3VyclNlbGVjdGVkXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlRWRpdENlbGwobmV3VmFsLCByb3dJbmRleCwgY29sSW5kZXgpIHtcclxuICAgIGxldCBmaWVsZE5hbWU7XHJcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjb2x1bW4sIGkpIHtcclxuICAgICAgaWYgKGkgPT0gY29sSW5kZXgpIHtcclxuICAgICAgICBmaWVsZE5hbWUgPSBjb2x1bW4ucHJvcHMuZGF0YUZpZWxkO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuc3RvcmUuZWRpdChuZXdWYWwsIHJvd0luZGV4LCBmaWVsZE5hbWUpLmdldCgpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRhdGE6IHJlc3VsdFxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMuY2VsbEVkaXQuYWZ0ZXJTYXZlQ2VsbCkge1xyXG4gICAgICB0aGlzLnByb3BzLmNlbGxFZGl0LmFmdGVyU2F2ZUNlbGwodGhpcy5zdGF0ZS5kYXRhW3Jvd0luZGV4XSwgZmllbGROYW1lLCBuZXdWYWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQWRkUm93QmVnaW4oKSB7XHJcbiAgICBpZiAodGhpcy5yZWZzLmJvZHkpIHtcclxuICAgICAgLy8gdGhpcy5yZWZzLmJvZHkuY2FuY2VsRWRpdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQWRkUm93QXRCZWdpbihuZXdPYmopIHtcclxuICAgIGxldCByZXN1bHQ7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnN0b3JlLmFkZEF0QmVnaW4obmV3T2JqKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9oYW5kbGVBZnRlckFkZGluZ1JvdyhuZXdPYmopO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQWRkUm93KG5ld09iaikge1xyXG5cclxuICAgIGxldCBiZWZvcmVQcm9taXNlID0gdGhpcy5wcm9wcy5vcHRpb25zLmJlZm9yZUluc2VydFJvdyA/IHRoaXMucHJvcHMub3B0aW9ucy5iZWZvcmVJbnNlcnRSb3cobmV3T2JqKSA6IG5ld09ialxyXG5cclxuICAgIC8vZXhlY3V0ZSBiZWZvcmUgYWRkIHJvd1xyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYmVmb3JlUHJvbWlzZSkudGhlbigobXNnKT0+IHtcclxuICAgICAgICBuZXdPYmogPSBtc2dcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3JlLmFkZChuZXdPYmopO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9oYW5kbGVBZnRlckFkZGluZ1JvdyhuZXdPYmopO1xyXG5cclxuICAgIH0pLmNhdGNoKChlKT0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImdsZWRhaiBvdmRlXCIpXHJcbiAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgICAgICByZXR1cm4gZS5qc29uKClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBnZXRTaXplUGVyUGFnZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLnNpemVQZXJQYWdlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q3VycmVudFBhZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXJyUGFnZTtcclxuICB9XHJcblxyXG4gIGhhbmRsZURyb3BSb3cocm93S2V5cykge1xyXG4gICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgbGV0IGRyb3BSb3dLZXlzID0gcm93S2V5cz9yb3dLZXlzOnRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRSb3dLZXlzKCk7XHJcbiAgICAvL2FkZCBjb25maXJtIGJlZm9yZSB0aGUgZGVsZXRlIGFjdGlvbiBpZiB0aGF0IG9wdGlvbiBpcyBzZXQuXHJcbiAgICBpZiAoZHJvcFJvd0tleXMgJiYgZHJvcFJvd0tleXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmhhbmRsZUNvbmZpcm1EZWxldGVSb3cpe1xyXG4gICAgICAgIHRoaXMucHJvcHMub3B0aW9ucy5oYW5kbGVDb25maXJtRGVsZXRlUm93KFxyXG4gICAgICAgICAgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGhhdC5kZWxldGVSb3coZHJvcFJvd0tleXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlybSgnQXJlIHlvdSBzdXJlIHdhbnQgZGVsZXRlPycpKSB7XHJcbiAgICAgICAgdGhpcy5kZWxldGVSb3coZHJvcFJvd0tleXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZWxldGVSb3coZHJvcFJvd0tleXMpe1xyXG5cclxuICAgIGxldCByZXN1bHQ7XHJcbiAgICB0aGlzLnN0b3JlLnJlbW92ZShkcm9wUm93S2V5cyk7ICAvL3JlbW92ZSBzZWxlY3RlZCBSb3dcclxuICAgIHRoaXMuc3RvcmUuc2V0U2VsZWN0ZWRSb3dLZXkoW10pOyAgLy9jbGVhciBzZWxlY3RlZCByb3cga2V5XHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMucGFnaW5hdGlvbikge1xyXG4gICAgICBjb25zdCB7IHNpemVQZXJQYWdlIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgICBsZXQgeyBjdXJyUGFnZSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgbGV0IGN1cnJMYXN0UGFnZSA9IE1hdGguY2VpbCh0aGlzLnN0b3JlLmdldERhdGFOdW0oKSAvIHNpemVQZXJQYWdlKTtcclxuICAgICAgaWYgKGN1cnJQYWdlID4gY3Vyckxhc3RQYWdlKVxyXG4gICAgICAgIGN1cnJQYWdlID0gY3Vyckxhc3RQYWdlO1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoY3VyclBhZ2UsIHNpemVQZXJQYWdlKS5nZXQoKTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZGF0YTogcmVzdWx0LFxyXG4gICAgICAgIHNlbGVjdGVkUm93S2V5czogdGhpcy5zdG9yZS5nZXRTZWxlY3RlZFJvd0tleXMoKSxcclxuICAgICAgICBjdXJyUGFnZVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGRhdGE6IHJlc3VsdCxcclxuICAgICAgICBzZWxlY3RlZFJvd0tleXM6IHRoaXMuc3RvcmUuZ2V0U2VsZWN0ZWRSb3dLZXlzKClcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyRGVsZXRlUm93KSB7XHJcbiAgICAgIHRoaXMucHJvcHMub3B0aW9ucy5hZnRlckRlbGV0ZVJvdyhkcm9wUm93S2V5cyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgaGFuZGxlRmlsdGVyRGF0YShmaWx0ZXJPYmopIHtcclxuICAgIHRoaXMuc3RvcmUuZmlsdGVyKGZpbHRlck9iaik7XHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgaWYgKHRoaXMucHJvcHMucGFnaW5hdGlvbikge1xyXG4gICAgICBjb25zdCB7IHNpemVQZXJQYWdlIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoMSwgc2l6ZVBlclBhZ2UpLmdldCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzdWx0ID0gdGhpcy5zdG9yZS5nZXQoKTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMucHJvcHMub3B0aW9ucy5hZnRlckNvbHVtbkZpbHRlcilcclxuICAgICAgdGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyQ29sdW1uRmlsdGVyKGZpbHRlck9iaixcclxuICAgICAgICB0aGlzLnN0b3JlLmdldERhdGFJZ25vcmluZ1BhZ2luYXRpb24oKSk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZGF0YTogcmVzdWx0LFxyXG4gICAgICBjdXJyUGFnZTogMVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVFeHBvcnRDU1YoKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdG9yZS5nZXREYXRhSWdub3JpbmdQYWdpbmF0aW9uKCk7XHJcbiAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgdGhpcy5wcm9wcy5jaGlsZHJlbi5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XHJcbiAgICAgIGlmIChjb2x1bW4ucHJvcHMuaGlkZGVuID09PSBmYWxzZSkge1xyXG4gICAgICAgIGtleXMucHVzaChjb2x1bW4ucHJvcHMuZGF0YUZpZWxkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBleHBvcnRDU1YocmVzdWx0LCBrZXlzLCB0aGlzLnByb3BzLmNzdkZpbGVOYW1lKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNlYXJjaChzZWFyY2hUZXh0KSB7XHJcbiAgICB0aGlzLnN0b3JlLnNlYXJjaChzZWFyY2hUZXh0KTtcclxuICAgIGxldCByZXN1bHQ7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5wYWdpbmF0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHsgc2l6ZVBlclBhZ2UgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUucGFnZSgxLCBzaXplUGVyUGFnZSkuZ2V0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLmdldCgpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVyU2VhcmNoKVxyXG4gICAgICB0aGlzLnByb3BzLm9wdGlvbnMuYWZ0ZXJTZWFyY2goc2VhcmNoVGV4dCwgdGhpcy5zdG9yZS5nZXREYXRhSWdub3JpbmdQYWdpbmF0aW9uKCkpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRhdGE6IHJlc3VsdCxcclxuICAgICAgY3VyclBhZ2U6IDFcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyUGFnaW5hdGlvbigpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLnBhZ2luYXRpb24pIHtcclxuICAgICAgbGV0IGRhdGFTaXplO1xyXG4gICAgICBpZiAodGhpcy5pc1JlbW90ZURhdGFTb3VyY2UoKSkge1xyXG4gICAgICAgIGRhdGFTaXplID0gdGhpcy5wcm9wcy5mZXRjaEluZm8uZGF0YVRvdGFsU2l6ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRhU2l6ZSA9IHRoaXMuc3RvcmUuZ2V0RGF0YU51bSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZS1mb290ZXItcGFnaW5hdGlvblwiPlxyXG4gICAgICAgICAgPFBhZ2luYXRpb25MaXN0XHJcbiAgICAgICAgICAgIHJlZj1cInBhZ2luYXRpb25cIlxyXG4gICAgICAgICAgICBjdXJyUGFnZT17IHRoaXMuc3RhdGUuY3VyclBhZ2UgfVxyXG4gICAgICAgICAgICBjaGFuZ2VQYWdlPXt0aGlzLmhhbmRsZVBhZ2luYXRpb25EYXRhLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIHNpemVQZXJQYWdlPXsgdGhpcy5zdGF0ZS5zaXplUGVyUGFnZSB9XHJcbiAgICAgICAgICAgIHNpemVQZXJQYWdlTGlzdD17dGhpcy5wcm9wcy5vcHRpb25zLnNpemVQZXJQYWdlTGlzdCB8fCBDb25zdC5TSVpFX1BFUl9QQUdFX0xJU1R9XHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25TaXplPXt0aGlzLnByb3BzLm9wdGlvbnMucGFnaW5hdGlvblNpemUgfHwgQ29uc3QuUEFHSU5BVElPTl9TSVpFfVxyXG4gICAgICAgICAgICByZW1vdGU9e3RoaXMuaXNSZW1vdGVEYXRhU291cmNlKCl9XHJcbiAgICAgICAgICAgIGRhdGFTaXplPXtkYXRhU2l6ZX1cclxuICAgICAgICAgICAgb25TaXplUGVyUGFnZUxpc3Q9e3RoaXMucHJvcHMub3B0aW9ucy5vblNpemVQZXJQYWdlTGlzdH1cclxuICAgICAgICAgICAgcHJlUGFnZT17dGhpcy5wcm9wcy5vcHRpb25zLnByZVBhZ2UgfHwgQ29uc3QuUFJFX1BBR0V9XHJcbiAgICAgICAgICAgIG5leHRQYWdlPXt0aGlzLnByb3BzLm9wdGlvbnMubmV4dFBhZ2UgfHwgQ29uc3QuTkVYVF9QQUdFfVxyXG4gICAgICAgICAgICBmaXJzdFBhZ2U9e3RoaXMucHJvcHMub3B0aW9ucy5maXJzdFBhZ2UgfHwgQ29uc3QuRklSU1RfUEFHRX1cclxuICAgICAgICAgICAgbGFzdFBhZ2U9e3RoaXMucHJvcHMub3B0aW9ucy5sYXN0UGFnZSB8fCBDb25zdC5MQVNUX1BBR0V9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICByZW5kZXJUb29sQmFyKCkge1xyXG4gICAgbGV0IGVuYWJsZVNob3dPbmx5U2VsZWN0ZWQgPSB0aGlzLnByb3BzLnNlbGVjdFJvdyAmJiB0aGlzLnByb3BzLnNlbGVjdFJvdy5zaG93T25seVNlbGVjdGVkO1xyXG4gICAgaWYgKGVuYWJsZVNob3dPbmx5U2VsZWN0ZWRcclxuICAgICAgICB8fCB0aGlzLnByb3BzLmluc2VydFJvd1xyXG4gICAgICAgIHx8IHRoaXMucHJvcHMuZGVsZXRlUm93XHJcbiAgICAgICAgfHwgdGhpcy5wcm9wcy5zZWFyY2hcclxuICAgICAgICB8fCB0aGlzLnByb3BzLmV4cG9ydENTVikge1xyXG4gICAgICBsZXQgY29sdW1ucztcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcclxuICAgICAgICBjb2x1bW5zID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgdmFyIHByb3BzID0gY29sdW1uLnByb3BzO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogcHJvcHMuY2hpbGRyZW4sXHJcbiAgICAgICAgICAgIGZpZWxkOiBwcm9wcy5kYXRhRmllbGQsXHJcbiAgICAgICAgICAgIC8vd2hlbiB5b3Ugd2FudCBzYW1lIGF1dG8gZ2VuZXJhdGUgdmFsdWUgYW5kIG5vdCBhbGxvdyBlZGl0LCBleGFtcGxlIElEIGZpZWxkXHJcbiAgICAgICAgICAgIGF1dG9WYWx1ZTogcHJvcHMuYXV0b1ZhbHVlIHx8IGZhbHNlLFxyXG4gICAgICAgICAgICAvL2ZvciBjcmVhdGUgZWRpdG9yLCBubyBwYXJhbXMgZm9yIGNvbHVtbi5lZGl0YWJsZSgpIGluZGljYXRlIHRoYXQgZWRpdG9yIGZvciBuZXcgcm93XHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBwcm9wcy5lZGl0YWJsZSAmJiAodHlwZW9mIHByb3BzLmVkaXRhYmxlID09PSBcImZ1bmN0aW9uXCIpID8gcHJvcHMuZWRpdGFibGUoKSA6IHByb3BzLmVkaXRhYmxlLFxyXG4gICAgICAgICAgICAvL2hpZGRlbiBpbiBwb3B1cFxyXG4gICAgICAgICAgICBoaWRkZW5JblBvcHVwOiBwcm9wcy5oaWRkZW5JblBvcHVwLFxyXG4gICAgICAgICAgICBmb3JtYXQ6IHByb3BzLmRhdGFGb3JtYXQgPyBmdW5jdGlvbih2YWx1ZSl7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLmRhdGFGb3JtYXQodmFsdWUsIG51bGwsIHByb3BzLmZvcm1hdEV4dHJhRGF0YSkucmVwbGFjZSgvPC4qPz4vZywnJyk7XHJcbiAgICAgICAgICAgIH0gOiBmYWxzZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb2x1bW5zID0gW3tcclxuICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMuY2hpbGRyZW4sXHJcbiAgICAgICAgICBmaWVsZDogdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcy5kYXRhRmllbGQsXHJcbiAgICAgICAgICBlZGl0YWJsZTogdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcy5lZGl0YWJsZSxcclxuICAgICAgICAgIGhpZGRlbkluUG9wdXA6IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMuaGlkZGVuSW5Qb3B1cFxyXG4gICAgICAgIH1dO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b29sLWJhclwiPlxyXG4gICAgICAgICAgPFRvb2xCYXJcclxuICAgICAgICAgICAgY2xlYXJTZWFyY2g9e3RoaXMucHJvcHMub3B0aW9ucy5jbGVhclNlYXJjaH1cclxuICAgICAgICAgICAgZW5hYmxlSW5zZXJ0PXt0aGlzLnByb3BzLmluc2VydFJvd31cclxuICAgICAgICAgICAgZW5hYmxlRGVsZXRlPXt0aGlzLnByb3BzLmRlbGV0ZVJvd31cclxuICAgICAgICAgICAgZW5hYmxlU2VhcmNoPXt0aGlzLnByb3BzLnNlYXJjaH1cclxuICAgICAgICAgICAgZW5hYmxlRXhwb3J0Q1NWPXt0aGlzLnByb3BzLmV4cG9ydENTVn1cclxuICAgICAgICAgICAgZW5hYmxlU2hvd09ubHlTZWxlY3RlZD17ZW5hYmxlU2hvd09ubHlTZWxlY3RlZH1cclxuICAgICAgICAgICAgY29sdW1ucz17Y29sdW1uc31cclxuICAgICAgICAgICAgc2VhcmNoUGxhY2Vob2xkZXI9e3RoaXMucHJvcHMuc2VhcmNoUGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgIG9uQWRkUm93PXt0aGlzLmhhbmRsZUFkZFJvdy5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICBvbkFkZFJvd0JlZ2luPXt0aGlzLmhhbmRsZUFkZFJvd0JlZ2luLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIG9uRHJvcFJvdz17dGhpcy5oYW5kbGVEcm9wUm93LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIG9uU2VhcmNoPXt0aGlzLmhhbmRsZVNlYXJjaC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICBvbkV4cG9ydENTVj17dGhpcy5oYW5kbGVFeHBvcnRDU1YuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgb25TaG93T25seVNlbGVjdGVkPXt0aGlzLmhhbmRsZVNob3dPbmx5U2VsZWN0ZWQuYmluZCh0aGlzKX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyVGFibGVGaWx0ZXIoY29sdW1ucykge1xyXG4gICAgaWYgKHRoaXMucHJvcHMuY29sdW1uRmlsdGVyKSB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPFRhYmxlRmlsdGVyIGNvbHVtbnM9e2NvbHVtbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgIHJvd1NlbGVjdFR5cGU9e3RoaXMucHJvcHMuc2VsZWN0Um93Lm1vZGV9XHJcbiAgICAgICAgICAgICAgICAgICAgIG9uRmlsdGVyPXt0aGlzLmhhbmRsZUZpbHRlckRhdGEuYmluZCh0aGlzKX0vPlxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2Nyb2xsSGVhZGVyID0gKGUpID0+IHtcclxuICAgIHRoaXMucmVmcy5oZWFkZXIucmVmcy5jb250YWluZXIuc2Nyb2xsTGVmdCA9IGUuY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0O1xyXG4gIH1cclxuXHJcbiAgX2FkanVzdEhlYWRlcldpZHRoID0gKCkgPT4ge1xyXG4gICAgdmFyIHRhYmxlSGVhZGVyRG9tID0gdGhpcy5yZWZzLmhlYWRlci5yZWZzLmNvbnRhaW5lci5jaGlsZE5vZGVzWzBdO1xyXG4gICAgdmFyIHRhYmxlQm9keURvbSA9IHRoaXMucmVmcy5ib2R5LnJlZnMuY29udGFpbmVyLmNoaWxkTm9kZXNbMF07XHJcbiAgICBpZih0YWJsZUhlYWRlckRvbS5vZmZzZXRXaWR0aCAhPT0gdGFibGVCb2R5RG9tLm9mZnNldFdpZHRoKXtcclxuICAgICAgdGFibGVIZWFkZXJEb20uc3R5bGUud2lkdGggPSB0YWJsZUJvZHlEb20ub2Zmc2V0V2lkdGggKyBcInB4XCI7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoZWFkZXJQcm9wcyA9IHRoaXMucmVmcy5ib2R5LmdldEJvZHlIZWFkZXJEb21Qcm9wKCk7XHJcbiAgICB0aGlzLnJlZnMuaGVhZGVyLmZpdEhlYWRlcihoZWFkZXJQcm9wcyxcclxuICAgICAgdGhpcy5yZWZzLmJvZHkucmVmcy5jb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gdGhpcy5yZWZzLmJvZHkucmVmcy5jb250YWluZXIuY2xpZW50SGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVBZnRlckFkZGluZ1JvdyhuZXdPYmopIHtcclxuICAgIGxldCByZXN1bHQ7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5wYWdpbmF0aW9uKSB7XHJcbiAgICAgIC8vaWYgcGFnaW5hdGlvbiBpcyBlbmFibGVkIGFuZCBpbnNlcnQgcm93IGJlIHRyaWdnZXIsIGNoYW5nZSB0byBsYXN0IHBhZ2VcclxuICAgICAgY29uc3QgeyBzaXplUGVyUGFnZSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgY29uc3QgY3Vyckxhc3RQYWdlID0gTWF0aC5jZWlsKHRoaXMuc3RvcmUuZ2V0RGF0YU51bSgpIC8gc2l6ZVBlclBhZ2UpO1xyXG4gICAgICByZXN1bHQgPSB0aGlzLnN0b3JlLnBhZ2UoY3Vyckxhc3RQYWdlLCBzaXplUGVyUGFnZSkuZ2V0KCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGRhdGE6IHJlc3VsdCxcclxuICAgICAgICBjdXJyUGFnZTogY3Vyckxhc3RQYWdlLFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc3VsdCA9IHRoaXMuc3RvcmUuZ2V0KCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGRhdGE6IHJlc3VsdFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zLmFmdGVySW5zZXJ0Um93KSB7XHJcbiAgICAgIHRoaXMucHJvcHMub3B0aW9ucy5hZnRlckluc2VydFJvdyhuZXdPYmopO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQm9vdHN0cmFwVGFibGUucHJvcFR5cGVzID0ge1xyXG4gICAga2V5RmllbGQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICBoZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICBtYXhIZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICB0YWJsZUlEOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgZGF0YTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZShbUmVhY3QuUHJvcFR5cGVzLmFycmF5LCBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XSksXHJcbiAgICByZW1vdGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLCAvLyByZW1vdGUgZGF0YSwgZGVmYXVsdCBpcyBmYWxzZVxyXG4gICAgc3RyaXBlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBib3JkZXJlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBob3ZlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBjb25kZW5zZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gICAgcGFnaW5hdGlvbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIHNlbGVjdFJvdzogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgICAgICBtb2RlOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoW1xyXG4gICAgICAgICAgICBDb25zdC5ST1dfU0VMRUNUX05PTkUsXHJcbiAgICAgICAgICAgIENvbnN0LlJPV19TRUxFQ1RfU0lOR0xFLFxyXG4gICAgICAgICAgICBDb25zdC5ST1dfU0VMRUNUX01VTFRJXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgYmdDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuICAgICAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG4gICAgICAgIG9uU2VsZWN0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICAgICAgICBvblNlbGVjdEFsbDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICAgICAgY2xpY2tUb1NlbGVjdDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICAgICAgaGlkZVNlbGVjdENvbHVtbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICAgICAgY2xpY2tUb1NlbGVjdEFuZEVkaXRDZWxsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICAgICAgICBzaG93T25seVNlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxyXG4gICAgfSksXHJcbiAgICBjZWxsRWRpdDogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgICAgICBtb2RlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgICAgIGJsdXJUb1NhdmU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gICAgICAgIGFmdGVyU2F2ZUNlbGw6IFJlYWN0LlByb3BUeXBlcy5mdW5jXHJcbiAgICB9KSxcclxuICAgIGluc2VydFJvdzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBkZWxldGVSb3c6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gICAgc2VhcmNoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICAgIGNvbHVtbkZpbHRlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICB0ckNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLmFueSxcclxuICAgIG9wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICAgICAgYmVmb3JlSW5zZXJ0Um93OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICAgICAgICBjbGVhclNlYXJjaDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICAgICAgc29ydE5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICAgICAgc29ydE9yZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgICAgIGFmdGVyVGFibGVDb21wbGV0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICAgICAgYWZ0ZXJEZWxldGVSb3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgICAgIGFmdGVySW5zZXJ0Um93OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICAgICAgICBhZnRlclNlYXJjaDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICAgICAgYWZ0ZXJDb2x1bW5GaWx0ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgICAgIG9uUm93Q2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgICAgIHBhZ2U6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgICAgICAgc2l6ZVBlclBhZ2VMaXN0OiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcbiAgICAgICAgc2l6ZVBlclBhZ2U6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgICAgICAgcGFnaW5hdGlvblNpemU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgICAgICAgb25Tb3J0Q2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICAgICAgICBvblBhZ2VDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgICAgIG9uU2l6ZVBlclBhZ2VMaXN0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICAgICAgICBub0RhdGFUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgICAgIGhhbmRsZUNvbmZpcm1EZWxldGVSb3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgICAgIHByZVBhZ2U6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICAgICAgbmV4dFBhZ2U6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICAgICAgZmlyc3RQYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgICAgIGxhc3RQYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXHJcbiAgICB9KSxcclxuICAgIGZldGNoSW5mbzogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgICAgICBkYXRhVG90YWxTaXplOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxyXG4gICAgfSksXHJcbiAgICBleHBvcnRDU1Y6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gICAgY3N2RmlsZU5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuQm9vdHN0cmFwVGFibGUuZGVmYXVsdFByb3BzID0ge1xyXG4gICAgaGVpZ2h0OiBcIjEwMCVcIixcclxuICAgIG1heEhlaWdodDogdW5kZWZpbmVkLFxyXG4gICAgdGFibGVJRDogdW5kZWZpbmVkLFxyXG4gICAgc3RyaXBlZDogZmFsc2UsXHJcbiAgICBib3JkZXJlZDogdHJ1ZSxcclxuICAgIGhvdmVyOiBmYWxzZSxcclxuICAgIGNvbmRlbnNlZDogZmFsc2UsXHJcbiAgICBwYWdpbmF0aW9uOiBmYWxzZSxcclxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiB1bmRlZmluZWQsXHJcbiAgICBzZWxlY3RSb3c6IHtcclxuICAgICAgICBtb2RlOiBDb25zdC5ST1dfU0VMRUNUX05PTkUsXHJcbiAgICAgICAgYmdDb2xvcjogQ29uc3QuUk9XX1NFTEVDVF9CR19DT0xPUixcclxuICAgICAgICBzZWxlY3RlZDogW10sXHJcbiAgICAgICAgb25TZWxlY3Q6IHVuZGVmaW5lZCxcclxuICAgICAgICBvblNlbGVjdEFsbDogdW5kZWZpbmVkLFxyXG4gICAgICAgIGNsaWNrVG9TZWxlY3Q6IGZhbHNlLFxyXG4gICAgICAgIGhpZGVTZWxlY3RDb2x1bW46IGZhbHNlLFxyXG4gICAgICAgIGNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbDogZmFsc2UsXHJcbiAgICAgICAgc2hvd09ubHlTZWxlY3RlZDogZmFsc2VcclxuICAgIH0sXHJcbiAgICBjZWxsRWRpdDoge1xyXG4gICAgICAgIG1vZGU6IENvbnN0LkNFTExfRURJVF9OT05FLFxyXG4gICAgICAgIGJsdXJUb1NhdmU6IGZhbHNlLFxyXG4gICAgICAgIGFmdGVyU2F2ZUNlbGw6IHVuZGVmaW5lZFxyXG4gICAgfSxcclxuICAgIGluc2VydFJvdzogZmFsc2UsXHJcbiAgICBkZWxldGVSb3c6IGZhbHNlLFxyXG4gICAgc2VhcmNoOiBmYWxzZSxcclxuICAgIG11bHRpQ29sdW1uU2VhcmNoOiBmYWxzZSxcclxuICAgIGNvbHVtbkZpbHRlcjogZmFsc2UsXHJcbiAgICB0ckNsYXNzTmFtZTogJycsXHJcbiAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgY2xlYXJTZWFyY2g6IGZhbHNlLFxyXG4gICAgICAgIHNvcnROYW1lOiB1bmRlZmluZWQsXHJcbiAgICAgICAgc29ydE9yZGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgYWZ0ZXJUYWJsZUNvbXBsZXRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgYWZ0ZXJEZWxldGVSb3c6IHVuZGVmaW5lZCxcclxuICAgICAgICBhZnRlckluc2VydFJvdzogdW5kZWZpbmVkLFxyXG4gICAgICAgIGFmdGVyU2VhcmNoOiB1bmRlZmluZWQsXHJcbiAgICAgICAgYWZ0ZXJDb2x1bW5GaWx0ZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICBvblJvd0NsaWNrOiB1bmRlZmluZWQsXHJcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgb25Nb3VzZUVudGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgb25Sb3dNb3VzZU91dDogdW5kZWZpbmVkLFxyXG4gICAgICAgIG9uUm93TW91c2VPdmVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgcGFnZTogdW5kZWZpbmVkLFxyXG4gICAgICAgIHNpemVQZXJQYWdlTGlzdDogQ29uc3QuU0laRV9QRVJfUEFHRV9MSVNULFxyXG4gICAgICAgIHNpemVQZXJQYWdlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgcGFnaW5hdGlvblNpemU6IENvbnN0LlBBR0lOQVRJT05fU0laRSxcclxuICAgICAgICBvblNpemVQZXJQYWdlTGlzdDogdW5kZWZpbmVkLFxyXG4gICAgICAgIG5vRGF0YVRleHQ6IHVuZGVmaW5lZCxcclxuICAgICAgICBoYW5kbGVDb25maXJtRGVsZXRlUm93OiB1bmRlZmluZWQsXHJcbiAgICAgICAgcHJlUGFnZTogQ29uc3QuUFJFX1BBR0UsXHJcbiAgICAgICAgbmV4dFBhZ2U6IENvbnN0Lk5FWFRfUEFHRSxcclxuICAgICAgICBmaXJzdFBhZ2U6IENvbnN0LkZJUlNUX1BBR0UsXHJcbiAgICAgICAgbGFzdFBhZ2U6IENvbnN0LkxBU1RfUEFHRVxyXG4gICAgfSxcclxuICAgIGZldGNoSW5mbzoge1xyXG4gICAgICAgIGRhdGFUb3RhbFNpemU6IDAsXHJcbiAgICB9LFxyXG4gICAgZXhwb3J0Q1NWOiBmYWxzZSxcclxuICAgIGNzdkZpbGVOYW1lOiB1bmRlZmluZWRcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJvb3RzdHJhcFRhYmxlO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9Cb290c3RyYXBUYWJsZS5qc1xuICoqLyIsImltcG9ydCBDb25zdCBmcm9tICcuL0NvbnN0JztcclxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKGRhdGEpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEZpbHRlciA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUZpbHRlcihkYXRhRmllbGQsIHZhbHVlLCB0eXBlKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyVHlwZSA9IHR5cGUgfHwgQ29uc3QuRklMVEVSX1RZUEUuQ1VTVE9NO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIC8vIHZhbHVlIG9mIHRoZSBmaWx0ZXIgaXMgYW4gb2JqZWN0XHJcbiAgICAgICAgICAgIGxldCBoYXNWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHByb3AgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdmFsdWVbcHJvcF0gfHwgdmFsdWVbcHJvcF0gPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgb2JqZWN0IHByb3BlcnRpZXMgaXMgdW5kZWZpbmVkIG9yIGVtcHR5LCB3ZSByZW1vdmUgdGhlIGZpbHRlclxyXG4gICAgICAgICAgICAoaGFzVmFsdWUpID8gdGhpcy5jdXJyZW50RmlsdGVyW2RhdGFGaWVsZF0gPSB7dmFsdWU6IHZhbHVlLCB0eXBlOiBmaWx0ZXJUeXBlfSA6IGRlbGV0ZSB0aGlzLmN1cnJlbnRGaWx0ZXJbZGF0YUZpZWxkXTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSB8fCB2YWx1ZS50cmltKCkgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudEZpbHRlcltkYXRhRmllbGRdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbHRlcltkYXRhRmllbGRdID0ge3ZhbHVlOiB2YWx1ZS50cmltKCksIHR5cGU6IGZpbHRlclR5cGV9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVtaXQoJ29uRmlsdGVyQ2hhbmdlJywgdGhpcy5jdXJyZW50RmlsdGVyKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9GaWx0ZXIuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NTZXQgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCBDb25zdCBmcm9tICcuL0NvbnN0JztcclxuXHJcbmNsYXNzIFNlbGVjdFJvd0hlYWRlckNvbHVtbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcclxuXHJcbiAgcmVuZGVyKCl7XHJcbiAgICB2YXIgdGhTdHlsZSA9IHtcclxuICAgICAgd2lkdGg6IHBhcnNlSW50KHRoaXMucHJvcHMud2lkdGgpP3RoaXMucHJvcHMud2lkdGg6MzVcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuKFxyXG4gICAgICA8dGggc3R5bGU9e3RoU3R5bGV9PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGgtaW5uZXIgdGFibGUtaGVhZGVyLWNvbHVtblwiPlxyXG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvdGg+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RSb3dIZWFkZXJDb2x1bW47XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1NlbGVjdFJvd0hlYWRlckNvbHVtbi5qc1xuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBDb25zdCBmcm9tICcuL0NvbnN0JztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJztcclxuaW1wb3J0IFRhYmxlUm93IGZyb20gJy4vVGFibGVSb3cnO1xyXG5pbXBvcnQgVGFibGVDb2x1bW4gZnJvbSAnLi9UYWJsZUNvbHVtbic7XHJcbmltcG9ydCBUYWJsZUVkaXRDb2x1bW4gZnJvbSAnLi9UYWJsZUVkaXRDb2x1bW4nO1xyXG5pbXBvcnQgY2xhc3NTZXQgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG52YXIgaXNGdW49ZnVuY3Rpb24ob2JqKXtcclxuICByZXR1cm4gb2JqJiYodHlwZW9mIG9iaj09PVwiZnVuY3Rpb25cIik7XHJcblxyXG59O1xyXG5jbGFzcyBUYWJsZUJvZHkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBjdXJyRWRpdENlbGw6IG51bGxcclxuICAgIH07XHJcbiAgICB0aGlzLmVkaXRpbmcgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XHJcbiAgICB0aGlzLmFkanVzdEJvZHkoKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpe1xyXG4gICAgdGhpcy5hZGp1c3RCb2R5KCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKXtcclxuICAgIHZhciBjb250YWluZXJDbGFzc2VzID0gY2xhc3NTZXQoXCJ0YWJsZS1jb250YWluZXJcIik7XHJcblxyXG4gICAgdmFyIHRhYmxlQ2xhc3NlcyA9IGNsYXNzU2V0KFwidGFibGVcIiwge1xyXG4gICAgICAndGFibGUtc3RyaXBlZCc6IHRoaXMucHJvcHMuc3RyaXBlZCxcclxuICAgICAgJ3RhYmxlLWJvcmRlcmVkJzogdGhpcy5wcm9wcy5ib3JkZXJlZCxcclxuICAgICAgJ3RhYmxlLWhvdmVyJzogdGhpcy5wcm9wcy5ob3ZlcixcclxuICAgICAgJ3RhYmxlLWNvbmRlbnNlZCc6IHRoaXMucHJvcHMuY29uZGVuc2VkXHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgaXNTZWxlY3RSb3dEZWZpbmVkID0gdGhpcy5faXNTZWxlY3RSb3dEZWZpbmVkKCk7XHJcbiAgICB2YXIgdGFibGVIZWFkZXIgPSB0aGlzLnJlbmRlclRhYmxlSGVhZGVyKGlzU2VsZWN0Um93RGVmaW5lZCk7XHJcblxyXG4gICAgdmFyIHRhYmxlUm93cyA9IHRoaXMucHJvcHMuZGF0YS5tYXAoZnVuY3Rpb24oZGF0YSwgcil7XHJcbiAgICAgIHZhciB0YWJsZUNvbHVtbnMgPSB0aGlzLnByb3BzLmNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbiwgaSl7XHJcbiAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBkYXRhW2NvbHVtbi5uYW1lXTtcclxuICAgICAgICBpZih0aGlzLmVkaXRpbmcgJiZcclxuICAgICAgICAgIGNvbHVtbi5uYW1lICE9PSB0aGlzLnByb3BzLmtleUZpZWxkICYmIC8vIEtleSBmaWVsZCBjYW4ndCBiZSBlZGl0XHJcbiAgICAgICAgICBjb2x1bW4uZWRpdGFibGUgJiYgLy8gY29sdW1uIGlzIGVkaXRhYmxlPyBkZWZhdWx0IGlzIHRydWUsIHVzZXIgY2FuIHNldCBpdCBmYWxzZVxyXG4gICAgICAgICAgdGhpcy5zdGF0ZS5jdXJyRWRpdENlbGwgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgdGhpcy5zdGF0ZS5jdXJyRWRpdENlbGwucmlkID09IHIgJiZcclxuICAgICAgICAgIHRoaXMuc3RhdGUuY3VyckVkaXRDZWxsLmNpZCA9PSBpKXtcclxuICAgICAgICAgICAgdmFyIGZvcm1hdD1jb2x1bW4uZm9ybWF0P2Z1bmN0aW9uKHZhbHVlKXtcclxuICAgICAgICAgICAgICByZXR1cm4gY29sdW1uLmZvcm1hdCh2YWx1ZSwgZGF0YSwgY29sdW1uLmZvcm1hdEV4dHJhRGF0YSkucmVwbGFjZSgvPC4qPz4vZywnJyk7XHJcbiAgICAgICAgICAgIH06ZmFsc2U7XHJcblxyXG4gICAgICAgICAgcmV0dXJuKFxyXG4gICAgICAgICAgICAgIDxUYWJsZUVkaXRDb2x1bW4gY29tcGxldGVFZGl0PXt0aGlzLmhhbmRsZUNvbXBsZXRlRWRpdENlbGwuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIGJ5IGJsdWVzcHJpbmcgZm9yIGNvbHVtbiBlZGl0b3IgY3VzdG9taXplXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZT17aXNGdW4oY29sdW1uLmVkaXRhYmxlKT9jb2x1bW4uZWRpdGFibGUoZmllbGRWYWx1ZSxkYXRhLHIsaSk6Y29sdW1uLmVkaXRhYmxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PXtjb2x1bW4uZm9ybWF0P2Zvcm1hdDpmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdXJUb1NhdmU9e3RoaXMucHJvcHMuY2VsbEVkaXQuYmx1clRvU2F2ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4PXtyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sSW5kZXg9e2l9PlxyXG4gICAgICAgICAgICAgICAge2ZpZWxkVmFsdWV9XHJcbiAgICAgICAgICAgICAgPC9UYWJsZUVkaXRDb2x1bW4+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9IGVsc2V7XHJcbiAgICAgICAgICAvL2FkZCBieSBibHVlc3ByaW5nIGZvciBjbGFzc05hbWUgY3VzdG9taXplXHJcbiAgICAgICAgICB2YXIgdGRDbGFzc05hbWU9aXNGdW4oY29sdW1uLmNsYXNzTmFtZSk/Y29sdW1uLmNsYXNzTmFtZShmaWVsZFZhbHVlLGRhdGEscixpKTpjb2x1bW4uY2xhc3NOYW1lO1xyXG5cclxuICAgICAgICAgIGlmKHR5cGVvZiBjb2x1bW4uZm9ybWF0ICE9PSBcInVuZGVmaW5lZFwiKXtcclxuICAgICAgICAgICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gY29sdW1uLmZvcm1hdChmaWVsZFZhbHVlLCBkYXRhLCBjb2x1bW4uZm9ybWF0RXh0cmFEYXRhKTtcclxuICAgICAgICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChmb3JtYXR0ZWRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGZvcm1hdHRlZFZhbHVlfX0+PC9kaXY+O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgICA8VGFibGVDb2x1bW4gZGF0YUFsaWduPXtjb2x1bW4uYWxpZ259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0ZENsYXNzTmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEVkaXQ9e3RoaXMucHJvcHMuY2VsbEVkaXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17Y29sdW1uLmhpZGRlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FZGl0PXt0aGlzLmhhbmRsZUVkaXRDZWxsLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXtjb2x1bW4ud2lkdGh9PlxyXG4gICAgICAgICAgICAgICAge2Zvcm1hdHRlZFZhbHVlfVxyXG4gICAgICAgICAgICAgIDwvVGFibGVDb2x1bW4+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuKFxyXG4gICAgICAgICAgICAgIDxUYWJsZUNvbHVtbiBkYXRhQWxpZ249e2NvbHVtbi5hbGlnbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RkQ2xhc3NOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsRWRpdD17dGhpcy5wcm9wcy5jZWxsRWRpdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXtjb2x1bW4uaGlkZGVufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVkaXQ9e3RoaXMuaGFuZGxlRWRpdENlbGwuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e2NvbHVtbi53aWR0aH0+XHJcbiAgICAgICAgICAgICAgICB7ZmllbGRWYWx1ZX1cclxuICAgICAgICAgICAgICA8L1RhYmxlQ29sdW1uPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB0aGlzKTtcclxuICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5wcm9wcy5zZWxlY3RlZFJvd0tleXMuaW5kZXhPZihkYXRhW3RoaXMucHJvcHMua2V5RmllbGRdKSAhPSAtMTtcclxuICAgICAgdmFyIHNlbGVjdFJvd0NvbHVtbiA9IGlzU2VsZWN0Um93RGVmaW5lZCAmJiAhdGhpcy5wcm9wcy5zZWxlY3RSb3cuaGlkZVNlbGVjdENvbHVtbj9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZWxlY3RSb3dDb2x1bW4oc2VsZWN0ZWQpOm51bGw7XHJcbiAgICAgIC8vYWRkIGJ5IGJsdWVzcHJpbmcgZm9yIGNsYXNzTmFtZSBjdXN0b21pemVcclxuICAgICAgdmFyIHRyQ2xhc3NOYW1lPWlzRnVuKHRoaXMucHJvcHMudHJDbGFzc05hbWUpP3RoaXMucHJvcHMudHJDbGFzc05hbWUoZGF0YSxyKTp0aGlzLnByb3BzLnRyQ2xhc3NOYW1lO1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxUYWJsZVJvdyBpc1NlbGVjdGVkPXtzZWxlY3RlZH0ga2V5PXtyfSBjbGFzc05hbWU9e3RyQ2xhc3NOYW1lfVxyXG4gICAgICAgICAgc2VsZWN0Um93PXtpc1NlbGVjdFJvd0RlZmluZWQ/dGhpcy5wcm9wcy5zZWxlY3RSb3c6dW5kZWZpbmVkfVxyXG4gICAgICAgICAgZW5hYmxlQ2VsbEVkaXQ9e3RoaXMucHJvcHMuY2VsbEVkaXQubW9kZSAhPT0gQ29uc3QuQ0VMTF9FRElUX05PTkV9XHJcbiAgICAgICAgICBvblJvd0NsaWNrPXt0aGlzLmhhbmRsZVJvd0NsaWNrLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICBvblJvd01vdXNlT3Zlcj17dGhpcy5oYW5kbGVSb3dNb3VzZU92ZXIuYmluZCh0aGlzKX1cclxuICAgICAgICAgIG9uUm93TW91c2VPdXQ9e3RoaXMuaGFuZGxlUm93TW91c2VPdXQuYmluZCh0aGlzKX1cclxuICAgICAgICAgIG9uU2VsZWN0Um93PXt0aGlzLmhhbmRsZVNlbGVjdFJvdy5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgIHtzZWxlY3RSb3dDb2x1bW59XHJcbiAgICAgICAgICB7dGFibGVDb2x1bW5zfVxyXG4gICAgICAgIDwvVGFibGVSb3c+XHJcbiAgICAgIClcclxuICAgIH0sIHRoaXMpO1xyXG5cclxuICAgIGlmKHRhYmxlUm93cy5sZW5ndGggPT09IDApe1xyXG4gICAgICB0YWJsZVJvd3MucHVzaChcclxuICAgICAgPFRhYmxlUm93IGtleT1cIiMjdGFibGUtZW1wdHkjI1wiPlxyXG4gICAgICAgIDx0ZCBjb2xTcGFuPXt0aGlzLnByb3BzLmNvbHVtbnMubGVuZ3RoKyhpc1NlbGVjdFJvd0RlZmluZWQ/MTowKX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtYnMtdGFibGUtbm8tZGF0YVwiPlxyXG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5ub0RhdGFUZXh0fHxDb25zdC5OT19EQVRBX1RFWFR9XHJcbiAgICAgICAgPC90ZD5cclxuICAgICAgPC9UYWJsZVJvdz4pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZWRpdGluZyA9IGZhbHNlO1xyXG5cclxuICAgIHZhciBoZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUNvbnRhaW5lckhlaWdodCgpLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgcmV0dXJuKFxyXG4gICAgICA8ZGl2IHJlZj1cImNvbnRhaW5lclwiIGNsYXNzTmFtZT17Y29udGFpbmVyQ2xhc3Nlc30gc3R5bGU9e3toZWlnaHQ6IGhlaWdodH19PlxyXG4gICAgICAgIDx0YWJsZSByZWY9XCJib2R5XCIgY2xhc3NOYW1lPXt0YWJsZUNsYXNzZXN9PlxyXG4gICAgICAgICAge3RhYmxlSGVhZGVyfVxyXG4gICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICB7dGFibGVSb3dzfVxyXG4gICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICA8L3RhYmxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlclRhYmxlSGVhZGVyKGlzU2VsZWN0Um93RGVmaW5lZCl7XHJcbiAgICB2YXIgc2VsZWN0Um93SGVhZGVyID0gbnVsbDtcclxuXHJcbiAgICBpZihpc1NlbGVjdFJvd0RlZmluZWQpe1xyXG4gICAgICBsZXQgc3R5bGUgPSB7XHJcbiAgICAgICAgd2lkdGg6MzUsXHJcbiAgICAgICAgbWluV2lkdGg6MzVcclxuICAgICAgfVxyXG4gICAgICBzZWxlY3RSb3dIZWFkZXIgPSB0aGlzLnByb3BzLnNlbGVjdFJvdy5oaWRlU2VsZWN0Q29sdW1uP251bGw6KDx0aCBzdHlsZT17c3R5bGV9IGtleT17LTF9PjwvdGg+KTtcclxuICAgIH1cclxuICAgIHZhciB0aGVhZGVyID0gdGhpcy5wcm9wcy5jb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4sIGkpe1xyXG4gICAgICBsZXQgd2lkdGggPSBjb2x1bW4ud2lkdGggPT0gbnVsbD9jb2x1bW4ud2lkdGg6cGFyc2VJbnQoY29sdW1uLndpZHRoKTtcclxuICAgICAgbGV0IHN0eWxlPXtcclxuICAgICAgICBkaXNwbGF5OiBjb2x1bW4uaGlkZGVuP1wibm9uZVwiOm51bGwsXHJcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgIG1heFdpZHRoOiB3aWR0aFxyXG4gICAgICAgIC8qKiBhZGQgbWluLXdkdGggdG8gZml4IHVzZXIgYXNzaWduIGNvbHVtbiB3aWR0aCBub3QgZXEgb2Zmc2V0V2lkdGggaW4gbGFyZ2UgY29sdW1uIHRhYmxlICoqL1xyXG4gICAgICB9O1xyXG4gICAgICBsZXQgc29ydENhZXJ0ID0gY29sdW1uLnNvcnQ/KFV0aWwucmVuZGVyUmVhY3RTb3J0Q2FyZXQoQ29uc3QuU09SVF9ERVNDKSk6bnVsbDtcclxuICAgICAgcmV0dXJuICg8dGggc3R5bGU9e3N0eWxlfSBrZXk9e2l9IGNsYXNzTmFtZT17Y29sdW1uLmNsYXNzTmFtZX0+e2NvbHVtbi50ZXh0fXtzb3J0Q2FlcnR9PC90aD4pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuKFxyXG4gICAgICA8dGhlYWQgcmVmPVwiaGVhZGVyXCI+XHJcbiAgICAgICAgPHRyPntzZWxlY3RSb3dIZWFkZXJ9e3RoZWFkZXJ9PC90cj5cclxuICAgICAgPC90aGVhZD5cclxuICAgIClcclxuICB9XHJcblxyXG4gIGhhbmRsZVJvd01vdXNlT3V0KHJvd0luZGV4KXtcclxuICAgIGNvbnN0IHRhcmdldFJvdyA9IHRoaXMucHJvcHMuZGF0YVtyb3dJbmRleC0xXTtcclxuICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU91dCh0YXJnZXRSb3cpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlUm93TW91c2VPdmVyKHJvd0luZGV4KXtcclxuICAgIGNvbnN0IHRhcmdldFJvdyA9IHRoaXMucHJvcHMuZGF0YVtyb3dJbmRleC0xXTtcclxuICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU92ZXIodGFyZ2V0Um93KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVJvd0NsaWNrKHJvd0luZGV4KXtcclxuICAgIHZhciBrZXksIHNlbGVjdGVkUm93O1xyXG4gICAgdGhpcy5wcm9wcy5kYXRhLmZvckVhY2goZnVuY3Rpb24ocm93LCBpKXtcclxuICAgICAgaWYoaSA9PSByb3dJbmRleC0xKXtcclxuICAgICAgICBrZXkgPSByb3dbdGhpcy5wcm9wcy5rZXlGaWVsZF07XHJcbiAgICAgICAgc2VsZWN0ZWRSb3cgPSByb3c7XHJcbiAgICAgIH1cclxuICAgIH0sIHRoaXMpO1xyXG4gICAgdGhpcy5wcm9wcy5vblJvd0NsaWNrKHNlbGVjdGVkUm93KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNlbGVjdFJvdyhyb3dJbmRleCwgaXNTZWxlY3RlZCl7XHJcbiAgICB2YXIga2V5LCBzZWxlY3RlZFJvdztcclxuICAgIHRoaXMucHJvcHMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKHJvdywgaSl7XHJcbiAgICAgIGlmKGkgPT0gcm93SW5kZXgtMSl7XHJcbiAgICAgICAga2V5ID0gcm93W3RoaXMucHJvcHMua2V5RmllbGRdO1xyXG4gICAgICAgIHNlbGVjdGVkUm93ID0gcm93O1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSwgdGhpcyk7XHJcbiAgICB0aGlzLnByb3BzLm9uU2VsZWN0Um93KHNlbGVjdGVkUm93LCBpc1NlbGVjdGVkKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNlbGVjdFJvd0NvbHVtQ2hhbmdlKGUpe1xyXG4gICAgaWYoIXRoaXMucHJvcHMuc2VsZWN0Um93LmNsaWNrVG9TZWxlY3QgfHwgIXRoaXMucHJvcHMuc2VsZWN0Um93LmNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbCl7XHJcbiAgICAgIHRoaXMuaGFuZGxlU2VsZWN0Um93KFxyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucm93SW5kZXgsIGUuY3VycmVudFRhcmdldC5jaGVja2VkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUVkaXRDZWxsKHJvd0luZGV4LCBjb2x1bW5JbmRleCl7XHJcbiAgICB0aGlzLmVkaXRpbmcgPSB0cnVlO1xyXG4gICAgaWYodGhpcy5faXNTZWxlY3RSb3dEZWZpbmVkKCkpe1xyXG4gICAgICBjb2x1bW5JbmRleC0tO1xyXG4gICAgICBpZih0aGlzLnByb3BzLnNlbGVjdFJvdy5oaWRlU2VsZWN0Q29sdW1uKVxyXG4gICAgICAgIGNvbHVtbkluZGV4Kys7XHJcbiAgICB9XHJcbiAgICByb3dJbmRleC0tO1xyXG4gICAgdmFyIHN0YXRlT2JqID0ge1xyXG4gICAgICBjdXJyRWRpdENlbGw6IHtcclxuICAgICAgICByaWQ6IHJvd0luZGV4LFxyXG4gICAgICAgIGNpZDogY29sdW1uSW5kZXhcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZih0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0QW5kRWRpdENlbGwpe1xyXG4gICAgICB0aGlzLmhhbmRsZVNlbGVjdFJvdyhyb3dJbmRleCsxLCB0cnVlKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGVPYmopO1xyXG4gIH1cclxuXHJcbiAgY2FuY2VsRWRpdCgpe1xyXG4gICAgdmFyIGN1cnJFZGl0Q2VsbD10aGlzLnN0YXRlLmN1cnJFZGl0Q2VsbDtcclxuICAgIGlmKGN1cnJFZGl0Q2VsbCl7XHJcbiAgICAgIHRoaXMuaGFuZGxlQ29tcGxldGVFZGl0Q2VsbChudWxsLGN1cnJFZGl0Q2VsbC5yaWQsY3VyckVkaXRDZWxsLmNpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDb21wbGV0ZUVkaXRDZWxsKG5ld1ZhbCwgcm93SW5kZXgsIGNvbHVtbkluZGV4KXtcclxuICAgIHRoaXMuc2V0U3RhdGUoe2N1cnJFZGl0Q2VsbDogbnVsbH0pO1xyXG4gICAgaWYobnVsbCAhPSBuZXdWYWwpXHJcbiAgICAgIHRoaXMucHJvcHMuY2VsbEVkaXQuX19vbkNvbXBsZXRlRWRpdF9fKG5ld1ZhbCwgcm93SW5kZXgsIGNvbHVtbkluZGV4KTtcclxuICB9XHJcblxyXG4gIHJlbmRlclNlbGVjdFJvd0NvbHVtbihzZWxlY3RlZCl7XHJcbiAgICBpZih0aGlzLnByb3BzLnNlbGVjdFJvdy5tb2RlID09IENvbnN0LlJPV19TRUxFQ1RfU0lOR0xFKSB7XHJcbiAgICAgIHJldHVybiAoPFRhYmxlQ29sdW1uPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBjaGVja2VkPXtzZWxlY3RlZH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlU2VsZWN0Um93Q29sdW1DaGFuZ2UuYmluZCh0aGlzKX0vPjwvVGFibGVDb2x1bW4+KTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgcmV0dXJuICg8VGFibGVDb2x1bW4gPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPXtzZWxlY3RlZH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlU2VsZWN0Um93Q29sdW1DaGFuZ2UuYmluZCh0aGlzKX0vPjwvVGFibGVDb2x1bW4+KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEJvZHlIZWFkZXJEb21Qcm9wKCl7XHJcbiAgICB2YXIgaGVhZGVycyA9IHRoaXMucmVmcy5oZWFkZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xyXG4gICAgdmFyIGhlYWRlckRvbVByb3BzID0gW107XHJcbiAgICBmb3IobGV0IGk9MDtpPGhlYWRlcnMubGVuZ3RoO2krKyl7XHJcbiAgICAgIGhlYWRlckRvbVByb3BzLnB1c2goe1xyXG4gICAgICAgIHdpZHRoOmhlYWRlcnNbaV0ub2Zmc2V0V2lkdGhcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGVhZGVyRG9tUHJvcHM7XHJcbiAgfVxyXG5cclxuICBhZGp1c3RCb2R5KCkge1xyXG4gICAgdGhpcy5oYXJkRml4SGVhZGVyV2lkdGgoKTtcclxuICAgIGlmKHRoaXMucHJvcHMuY29uZGVuc2VkKSB7XHJcbiAgICAgIHRoaXMucmVmcy5ib2R5LnN0eWxlLm1hcmdpblRvcCA9IFwiLTM2cHhcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLnByb3BzLm1heEhlaWdodCAmJlxyXG4gICAgICBwYXJzZUludCh0aGlzLnByb3BzLm1heEhlaWdodCkgPCB0aGlzLnJlZnMuY29udGFpbmVyLm9mZnNldEhlaWdodCkge1xyXG4gICAgICB0aGlzLnJlZnMuY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICh0aGlzLnByb3BzLm1heEhlaWdodCAtIDQyKSArIFwicHhcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhcmRGaXhIZWFkZXJXaWR0aCgpe1xyXG4gICAgdmFyIGhlYWRlcnMgPSB0aGlzLnJlZnMuaGVhZGVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2RlcztcclxuICAgIGZvcihsZXQgaT0wO2k8aGVhZGVycy5sZW5ndGg7aSsrKXtcclxuICAgICAgaGVhZGVyc1tpXS5zdHlsZS53aWR0aCA9IGhlYWRlcnNbaV0ub2Zmc2V0V2lkdGggKyBcInB4XCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVDb250YWluZXJIZWlnaHQoKXtcclxuICAgIGlmKHRoaXMucHJvcHMuaGVpZ2h0ID09IFwiMTAwJVwiKSByZXR1cm4gdGhpcy5wcm9wcy5oZWlnaHQ7XHJcbiAgICBlbHNle1xyXG4gICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5wcm9wcy5oZWlnaHQpIC0gNDI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaXNTZWxlY3RSb3dEZWZpbmVkKCl7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RSb3cubW9kZSA9PT0gQ29uc3QuUk9XX1NFTEVDVF9TSU5HTEUgfHxcclxuICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0Um93Lm1vZGUgPT09IENvbnN0LlJPV19TRUxFQ1RfTVVMVEk7XHJcbiAgfVxyXG59XHJcblRhYmxlQm9keS5wcm9wVHlwZXMgPSB7XHJcbiAgaGVpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRhdGE6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuICBjb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcbiAgc3RyaXBlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgYm9yZGVyZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gIGhvdmVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBjb25kZW5zZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gIGtleUZpZWxkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNlbGVjdGVkUm93S2V5czogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG4gIG9uUm93Q2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gIG9uU2VsZWN0Um93OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICBub0RhdGFUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFRhYmxlQm9keTtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVGFibGVCb2R5LmpzXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4vQ29uc3QnO1xyXG5cclxuY2xhc3MgVGFibGVDb2x1bW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcclxuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XHJcbiAgICBsZXQgc2hvdWxkVXBkYXRlZCA9IHRoaXMucHJvcHMud2lkdGggIT09IG5leHRQcm9wcy53aWR0aFxyXG4gICAgICB8fCB0aGlzLnByb3BzLmNsYXNzTmFtZSAhPT0gbmV4dFByb3BzLmNsYXNzTmFtZVxyXG4gICAgICB8fCB0aGlzLnByb3BzLmhpZGRlbiAhPT0gbmV4dFByb3BzLmhpZGRlblxyXG4gICAgICB8fCB0aGlzLnByb3BzLmRhdGFBbGlnbiAhPT0gbmV4dFByb3BzLmRhdGFBbGlnblxyXG4gICAgICB8fCB0eXBlb2YgY2hpbGRyZW4gIT09IHR5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5cclxuICAgICAgfHwgKCcnK3RoaXMucHJvcHMub25FZGl0KS50b1N0cmluZygpICE9PSAoJycrbmV4dFByb3BzLm9uRWRpdCkudG9TdHJpbmcoKVxyXG5cclxuICAgIGlmKHNob3VsZFVwZGF0ZWQpe1xyXG4gICAgICByZXR1cm4gc2hvdWxkVXBkYXRlZDtcclxuICAgIH1cclxuXHJcbiAgICBpZih0eXBlb2YgY2hpbGRyZW4gPT09ICdvYmplY3QnICYmIGNoaWxkcmVuICE9PSBudWxsICYmIGNoaWxkcmVuLnByb3BzICE9PSBudWxsKSB7XHJcbiAgICAgIGlmKGNoaWxkcmVuLnByb3BzLnR5cGUgPT09ICdjaGVja2JveCcgfHwgY2hpbGRyZW4ucHJvcHMudHlwZSA9PT0gJ3JhZGlvJykge1xyXG4gICAgICAgIHNob3VsZFVwZGF0ZWQgPSBzaG91bGRVcGRhdGVkIHx8XHJcbiAgICAgICAgICBjaGlsZHJlbi5wcm9wcy50eXBlICE9PSBuZXh0UHJvcHMuY2hpbGRyZW4ucHJvcHMudHlwZSB8fFxyXG4gICAgICAgICAgY2hpbGRyZW4ucHJvcHMuY2hlY2tlZCAhPT0gbmV4dFByb3BzLmNoaWxkcmVuLnByb3BzLmNoZWNrZWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2hvdWxkVXBkYXRlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNob3VsZFVwZGF0ZWQgPSBzaG91bGRVcGRhdGVkIHx8IGNoaWxkcmVuICE9PSBuZXh0UHJvcHMuY2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG4gICAgaWYoc2hvdWxkVXBkYXRlZCl7XHJcbiAgICAgIHJldHVybiBzaG91bGRVcGRhdGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKCEodGhpcy5wcm9wcy5jZWxsRWRpdCAmJiBuZXh0UHJvcHMuY2VsbEVkaXQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBzaG91bGRVcGRhdGVkXHJcbiAgICAgICAgfHwgdGhpcy5wcm9wcy5jZWxsRWRpdC5tb2RlICE9PSBuZXh0UHJvcHMuY2VsbEVkaXQubW9kZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUNlbGxFZGl0KGUpe1xyXG4gICAgaWYodGhpcy5wcm9wcy5jZWxsRWRpdC5tb2RlID09IENvbnN0LkNFTExfRURJVF9EQkNMSUNLKXtcclxuICAgICAgaWYoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSkge1xyXG4gICAgICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xyXG4gICAgICB9IGVsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5wcm9wcy5vbkVkaXQoXHJcbiAgICAgIGUuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LnJvd0luZGV4LFxyXG4gICAgICBlLmN1cnJlbnRUYXJnZXQuY2VsbEluZGV4KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpe1xyXG4gICAgdmFyIHdpZHRoID0gdGhpcy5wcm9wcy53aWR0aCA9PSBudWxsID9cclxuICAgICAgdGhpcy5wcm9wcy53aWR0aCA6IHRoaXMucHJvcHMud2lkdGguaW5kZXhPZignJScpICE9PSAtMSA/IHRoaXMucHJvcHMud2lkdGggOiBwYXJzZUludCh0aGlzLnByb3BzLndpZHRoKTtcclxuICAgIHZhciB0ZFN0eWxlID0ge1xyXG4gICAgICB0ZXh0QWxpZ246IHRoaXMucHJvcHMuZGF0YUFsaWduLFxyXG4gICAgICBkaXNwbGF5OiB0aGlzLnByb3BzLmhpZGRlbj9cIm5vbmVcIjpudWxsLFxyXG4gICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgIG1heFdpZHRoOiB3aWR0aFxyXG4gICAgfTtcclxuICAgIHZhciBjbGFzc25hbWUgPSB0aGlzLnByb3BzLmNsYXNzTmFtZTtcclxuICAgIGlmKHRoaXMucHJvcHMud2lkdGgpe1xyXG4gICAgICAgIGNsYXNzbmFtZSArPSBcIiBjb2wtbWQtXCIrd2lkdGg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHZhciBvcHRzID0ge307XHJcbiAgICBpZih0aGlzLnByb3BzLmNlbGxFZGl0KXtcclxuICAgICAgaWYodGhpcy5wcm9wcy5jZWxsRWRpdC5tb2RlID09IENvbnN0LkNFTExfRURJVF9DTElDSyl7XHJcbiAgICAgICAgb3B0cy5vbkNsaWNrID0gdGhpcy5oYW5kbGVDZWxsRWRpdC5iaW5kKHRoaXMpO1xyXG4gICAgICB9ZWxzZSBpZih0aGlzLnByb3BzLmNlbGxFZGl0Lm1vZGUgPT0gQ29uc3QuQ0VMTF9FRElUX0RCQ0xJQ0spe1xyXG4gICAgICAgIG9wdHMub25Eb3VibGVDbGljayA9IHRoaXMuaGFuZGxlQ2VsbEVkaXQuYmluZCh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPHRkIHN0eWxlPXt0ZFN0eWxlfSBjbGFzc05hbWU9e2NsYXNzbmFtZX0gey4uLm9wdHN9PlxyXG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICA8L3RkPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5UYWJsZUNvbHVtbi5wcm9wVHlwZXMgPSB7XHJcbiAgZGF0YUFsaWduOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGhpZGRlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgY2xhc3NOYW1lOlJlYWN0LlByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuXHJcblRhYmxlQ29sdW1uLmRlZmF1bHRQcm9wcyA9IHtcclxuICBkYXRhQWxpZ246IFwibGVmdFwiLFxyXG4gIGhpZGRlbjogZmFsc2UsXHJcbiAgY2xhc3NOYW1lOlwiXCJcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbHVtbjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVGFibGVDb2x1bW4uanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi9Db25zdCc7XHJcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi9FZGl0b3InXHJcbmltcG9ydCBOb3RpZmllciBmcm9tICcuL05vdGlmaWNhdGlvbi5qcyc7XHJcbmltcG9ydCBjbGFzc1NldCBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbmNsYXNzIFRhYmxlRWRpdENvbHVtbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKXtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0ZUNsZWFyPTA7XHJcbiAgICAgICAgdGhpcy5zdGF0ZT17XHJcbiAgICAgICAgICAgIHNoYWtlRWRpdG9yOmZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgaGFuZGxlS2V5UHJlc3MoZSl7XHJcbiAgICBpZiAoZS5rZXlDb2RlID09IDEzKSB7IC8vUHJlc3NlZCBFTlRFUlxyXG4gICAgICBsZXQgdmFsdWUgPSBlLmN1cnJlbnRUYXJnZXQudHlwZSA9PSAnY2hlY2tib3gnP1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldENoZWNrQm94VmFsdWUoZSk6ZS5jdXJyZW50VGFyZ2V0LnZhbHVlO1xyXG5cclxuICAgICAgaWYoIXRoaXMudmFsaWRhdG9yKHZhbHVlKSl7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZUVkaXQoXHJcbiAgICAgICAgdmFsdWUsIHRoaXMucHJvcHMucm93SW5kZXgsIHRoaXMucHJvcHMuY29sSW5kZXgpO1xyXG4gICAgfWVsc2UgaWYoZS5rZXlDb2RlID09IDI3KXtcclxuICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZUVkaXQoXHJcbiAgICAgICAgbnVsbCwgdGhpcy5wcm9wcy5yb3dJbmRleCwgdGhpcy5wcm9wcy5jb2xJbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVCbHVyKGUpe1xyXG4gICAgaWYodGhpcy5wcm9wcy5ibHVyVG9TYXZlKXtcclxuICAgICAgbGV0IHZhbHVlID0gZS5jdXJyZW50VGFyZ2V0LnR5cGUgPT0gJ2NoZWNrYm94Jz9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRDaGVja0JveFZhbHVlKGUpOmUuY3VycmVudFRhcmdldC52YWx1ZTtcclxuICAgICAgaWYoIXRoaXMudmFsaWRhdG9yKHZhbHVlKSl7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZUVkaXQoXHJcbiAgICAgICAgICB2YWx1ZSwgdGhpcy5wcm9wcy5yb3dJbmRleCwgdGhpcy5wcm9wcy5jb2xJbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHZhbGlkYXRvcih2YWx1ZSl7XHJcbiAgICAgIHZhciB0cz10aGlzO1xyXG4gICAgICBpZih0cy5wcm9wcy5lZGl0YWJsZS52YWxpZGF0b3Ipe1xyXG4gICAgICAgICAgdmFyIHZhbGlkPXRzLnByb3BzLmVkaXRhYmxlLnZhbGlkYXRvcih2YWx1ZSk7XHJcbiAgICAgICAgICBpZih2YWxpZCE9PXRydWUpe1xyXG4gICAgICAgICAgICAgIHRzLnJlZnMubm90aWZpZXIubm90aWNlKCdlcnJvcicsdmFsaWQsXCJQcmVzc2VkIEVTQyBjYW4gY2FuY2VsXCIpO1xyXG4gICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRzLnJlZnMuaW5wdXRSZWY7XHJcbiAgICAgICAgICAgICAgLy9hbmltYXRlIGlucHV0XHJcbiAgICAgICAgICAgICAgdHMuY2xlYXJUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgICAgdHMuc2V0U3RhdGUoe3NoYWtlRWRpdG9yOnRydWV9KTtcclxuICAgICAgICAgICAgICB0cy50aW1lb3V0ZUNsZWFyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0cy5zZXRTdGF0ZSh7c2hha2VFZGl0b3I6ZmFsc2V9KTt9LDMwMCk7XHJcbiAgICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gIH1cclxuICBjbGVhclRpbWVvdXQoKXtcclxuICAgICAgaWYodGhpcy50aW1lb3V0ZUNsZWFyIT0wKXtcclxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRlQ2xlYXIpO1xyXG4gICAgICAgICAgdGhpcy50aW1lb3V0ZUNsZWFyPTA7XHJcbiAgICAgIH1cclxuICB9XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKXtcclxuICAgICAgdmFyIGlucHV0ID0gdGhpcy5yZWZzLmlucHV0UmVmO1xyXG4gICAgICAvLyBpbnB1dC52YWx1ZSA9IHRoaXMucHJvcHMuY2hpbGRyZW58fCcnO1xyXG4gICAgICBpbnB1dC5mb2N1cygpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCl7XHJcbiAgICB2YXIgZWRpdGFibGU9dGhpcy5wcm9wcy5lZGl0YWJsZSxcclxuICAgICAgICBmb3JtYXQ9dGhpcy5wcm9wcy5mb3JtYXQsXHJcbiAgICAgICAgYXR0cj17XHJcbiAgICAgICAgICAgIHJlZjpcImlucHV0UmVmXCIsXHJcbiAgICAgICAgICAgIG9uS2V5RG93bjp0aGlzLmhhbmRsZUtleVByZXNzLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIG9uQmx1cjp0aGlzLmhhbmRsZUJsdXIuYmluZCh0aGlzKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9wdXQgcGxhY2Vob2xkZXIgaWYgZXhpc3RcclxuICAgICAgICBlZGl0YWJsZS5wbGFjZWhvbGRlciYmKGF0dHIucGxhY2Vob2xkZXI9ZWRpdGFibGUucGxhY2Vob2xkZXIpO1xyXG5cclxuICAgIHZhciBlZGl0b3JDbGFzcz1jbGFzc1NldCh7J2FuaW1hdGVkJzp0aGlzLnN0YXRlLnNoYWtlRWRpdG9yLCdzaGFrZSc6dGhpcy5zdGF0ZS5zaGFrZUVkaXRvcn0pO1xyXG4gICAgcmV0dXJuKFxyXG4gICAgICAgIDx0ZCByZWY9XCJ0ZFwiIHN0eWxlPXt7cG9zaXRpb246J3JlbGF0aXZlJ319PlxyXG4gICAgICAgICAgICB7RWRpdG9yKGVkaXRhYmxlLGF0dHIsZm9ybWF0LGVkaXRvckNsYXNzLHRoaXMucHJvcHMuY2hpbGRyZW58fCcnKX1cclxuICAgICAgICAgICAgPE5vdGlmaWVyIHJlZj1cIm5vdGlmaWVyXCI+PC9Ob3RpZmllcj5cclxuICAgICAgICA8L3RkPlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgX2dldENoZWNrQm94VmFsdWUoZSl7XHJcbiAgICBsZXQgdmFsdWUgPSAnJztcclxuICAgIGxldCB2YWx1ZXMgPSBlLmN1cnJlbnRUYXJnZXQudmFsdWUuc3BsaXQoJzonKTtcclxuICAgIHZhbHVlID0gZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQ/dmFsdWVzWzBdOnZhbHVlc1sxXTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG59XHJcblRhYmxlRWRpdENvbHVtbi5wcm9wVHlwZXMgPSB7XHJcbiAgY29tcGxldGVFZGl0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICByb3dJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuICBjb2xJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuICBibHVyVG9TYXZlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhYmxlRWRpdENvbHVtbjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVGFibGVFZGl0Q29sdW1uLmpzXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4vQ29uc3QnO1xyXG5pbXBvcnQgY2xhc3NTZXQgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5jbGFzcyBUYWJsZUZpbHRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuZmlsdGVyT2JqID0ge307XHJcbiAgfVxyXG5cclxuICBoYW5kbGVLZXlVcChlKXtcclxuICAgIGlmKGUuY3VycmVudFRhcmdldC52YWx1ZS50cmltKCkgPT09IFwiXCIpXHJcbiAgICAgIGRlbGV0ZSB0aGlzLmZpbHRlck9ialtlLmN1cnJlbnRUYXJnZXQubmFtZV07XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuZmlsdGVyT2JqW2UuY3VycmVudFRhcmdldC5uYW1lXSA9IGUuY3VycmVudFRhcmdldC52YWx1ZTtcclxuXHJcbiAgICB0aGlzLnByb3BzLm9uRmlsdGVyKHRoaXMuZmlsdGVyT2JqKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpe1xyXG4gICAgdmFyIHRhYmxlQ2xhc3NlcyA9IGNsYXNzU2V0KFwidGFibGVcIiwge1xyXG4gICAgICAndGFibGUtc3RyaXBlZCc6IHRoaXMucHJvcHMuc3RyaXBlZCxcclxuICAgICAgJ3RhYmxlLWNvbmRlbnNlZCc6IHRoaXMucHJvcHMuY29uZGVuc2VkXHJcbiAgICB9KTtcclxuICAgIHZhciBzZWxlY3RSb3dIZWFkZXIgPSBudWxsO1xyXG5cclxuICAgIGlmKHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBDb25zdC5ST1dfU0VMRUNUX1NJTkdMRSB8fFxyXG4gICAgICAgIHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBDb25zdC5ST1dfU0VMRUNUX01VTFRJKXtcclxuICAgICAgbGV0IHN0eWxlID0ge1xyXG4gICAgICAgIHdpZHRoOjM1LFxyXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAwLFxyXG4gICAgICAgIHBhZGRpbmdSaWdodDogMFxyXG4gICAgICB9XHJcbiAgICAgIHNlbGVjdFJvd0hlYWRlciA9ICg8dGggc3R5bGU9e3N0eWxlfSBrZXk9ey0xfT5GaWx0ZXI8L3RoPik7XHJcbiAgICB9XHJcbiAgICB2YXIgZmlsdGVyRmllbGQgPSB0aGlzLnByb3BzLmNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbil7XHJcbiAgICAgIHZhciB0aFN0eWxlID0ge1xyXG4gICAgICAgIGRpc3BsYXk6IGNvbHVtbi5oaWRkZW4/XCJub25lXCI6bnVsbCxcclxuICAgICAgICB3aWR0aDogY29sdW1uLndpZHRoXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybihcclxuICAgICAgICA8dGgga2V5PXtjb2x1bW4ubmFtZX0gc3R5bGU9e3RoU3R5bGV9PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aC1pbm5lciB0YWJsZS1oZWFkZXItY29sdW1uXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCBzaXplPVwiMTBcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPXtjb2x1bW4ubmFtZX0gbmFtZT17Y29sdW1uLm5hbWV9IG9uS2V5VXA9e3RoaXMuaGFuZGxlS2V5VXAuYmluZCh0aGlzKX0vPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC90aD5cclxuICAgICAgKVxyXG4gICAgfSwgdGhpcyk7XHJcbiAgICByZXR1cm4oXHJcbiAgICAgIDx0YWJsZSBjbGFzc05hbWU9e3RhYmxlQ2xhc3Nlc30gc3R5bGU9e3ttYXJnaW5Ub3A6NX19PlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0ciBzdHlsZT17e2JvcmRlckJvdHRvbVN0eWxlOiAnaGlkZGVuJ319PlxyXG4gICAgICAgICAgICB7c2VsZWN0Um93SGVhZGVyfXtmaWx0ZXJGaWVsZH1cclxuICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgPC90aGVhZD5cclxuICAgICAgPC90YWJsZT5cclxuICAgIClcclxuICB9XHJcbn1cclxuVGFibGVGaWx0ZXIucHJvcFR5cGVzID0ge1xyXG4gIGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuICByb3dTZWxlY3RUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIG9uRmlsdGVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBUYWJsZUZpbHRlcjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVGFibGVGaWx0ZXIuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4vQ29uc3QnO1xyXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnO1xyXG5pbXBvcnQgY2xhc3NTZXQgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCBTZWxlY3RSb3dIZWFkZXJDb2x1bW4gZnJvbSAnLi9TZWxlY3RSb3dIZWFkZXJDb2x1bW4nO1xyXG5cclxuY2xhc3MgQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7IHRoaXMudXBkYXRlKHRoaXMucHJvcHMuY2hlY2tlZCk7IH1cclxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7IHRoaXMudXBkYXRlKHByb3BzLmNoZWNrZWQpOyB9XHJcbiAgdXBkYXRlKGNoZWNrZWQpIHtcclxuICAgIFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpLmluZGV0ZXJtaW5hdGUgPSBjaGVja2VkID09PSAnaW5kZXRlcm1pbmF0ZSc7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gPGlucHV0IGNsYXNzTmFtZT0ncmVhY3QtYnMtc2VsZWN0LWFsbCcgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17dGhpcy5wcm9wcy5jaGVja2VkfSBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkNoYW5nZX0gLz5cclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFRhYmxlSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zZWxlY3RSb3dDb2x1bW5XaWR0aCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKXtcclxuICAgIHZhciBjb250YWluZXJDbGFzc2VzID0gY2xhc3NTZXQoXCJ0YWJsZS1oZWFkZXJcIik7XHJcbiAgICB2YXIgdGFibGVDbGFzc2VzID0gY2xhc3NTZXQoXCJ0YWJsZVwiLCBcInRhYmxlLWhvdmVyXCIsIHtcclxuICAgICAgICBcInRhYmxlLWJvcmRlcmVkXCI6IHRoaXMucHJvcHMuYm9yZGVyZWQsXHJcbiAgICAgICAgXCJ0YWJsZS1jb25kZW5zZWRcIjogdGhpcy5wcm9wcy5jb25kZW5zZWRcclxuICAgIH0pO1xyXG4gICAgdmFyIHNlbGVjdFJvd0hlYWRlckNvbCA9IHRoaXMucHJvcHMuaGlkZVNlbGVjdENvbHVtbj9udWxsOnRoaXMucmVuZGVyU2VsZWN0Um93SGVhZGVyKCk7XHJcbiAgICB0aGlzLl9hdHRhY2hDbGVhclNvcnRDYXJldEZ1bmMoKTtcclxuXHJcbiAgICByZXR1cm4oXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFibGUtaGVhZGVyLXdyYXBwZXJcIj5cclxuICAgICAgICA8ZGl2IHJlZj1cImNvbnRhaW5lclwiIGNsYXNzTmFtZT17Y29udGFpbmVyQ2xhc3Nlc30+XHJcbiAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPXt0YWJsZUNsYXNzZXN9IGlkPXt0aGlzLnByb3BzLnRhYmxlSUR9PlxyXG4gICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgPHRyIHJlZj1cImhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAge3NlbGVjdFJvd0hlYWRlckNvbH1cclxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcblxyXG4gIHJlbmRlclNlbGVjdFJvd0hlYWRlcigpe1xyXG4gICAgaWYodGhpcy5wcm9wcy5yb3dTZWxlY3RUeXBlID09IENvbnN0LlJPV19TRUxFQ1RfU0lOR0xFKSB7XHJcbiAgICAgIHJldHVybiAoPFNlbGVjdFJvd0hlYWRlckNvbHVtbiB3aWR0aD17dGhpcy5zZWxlY3RSb3dDb2x1bW5XaWR0aH0+PC9TZWxlY3RSb3dIZWFkZXJDb2x1bW4+KTtcclxuICAgIH1lbHNlIGlmKHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBDb25zdC5ST1dfU0VMRUNUX01VTFRJKXtcclxuICAgICAgcmV0dXJuICg8U2VsZWN0Um93SGVhZGVyQ29sdW1uIHdpZHRoPXt0aGlzLnNlbGVjdFJvd0NvbHVtbldpZHRofT5cclxuICAgICAgICAgIDxDaGVja2JveCBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdEFsbFJvd30gY2hlY2tlZD17dGhpcy5wcm9wcy5pc1NlbGVjdEFsbH0vPlxyXG4gICAgICAgIDwvU2VsZWN0Um93SGVhZGVyQ29sdW1uPlxyXG4gICAgICApO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2F0dGFjaENsZWFyU29ydENhcmV0RnVuYygpe1xyXG4gICAgaWYoQXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKSl7XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5wcm9wcy5jaGlsZHJlbi5sZW5ndGg7aSsrKXtcclxuICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMucHJvcHMuY2hpbGRyZW5baV0ucHJvcHMuZGF0YUZpZWxkO1xyXG4gICAgICAgIGNvbnN0IHNvcnQgPSBmaWVsZCA9PT0gdGhpcy5wcm9wcy5zb3J0TmFtZSA/IHRoaXMucHJvcHMuc29ydE9yZGVyIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5baV0gPVxyXG4gICAgICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMuY2hpbGRyZW5baV0sXHJcbiAgICAgICAgICAgIHsga2V5OiBpLCBvblNvcnQ6IHRoaXMucHJvcHMub25Tb3J0LCBzb3J0IH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBmaWVsZCA9IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMuZGF0YUZpZWxkO1xyXG4gICAgICBjb25zdCBzb3J0ID0gZmllbGQgPT09IHRoaXMucHJvcHMuc29ydE5hbWUgPyB0aGlzLnByb3BzLnNvcnRPcmRlciA6IHVuZGVmaW5lZDtcclxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiA9XHJcbiAgICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMuY2hpbGRyZW4sIHtrZXk6IDAsIG9uU29ydDogdGhpcy5wcm9wcy5vblNvcnQsIHNvcnR9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpdEhlYWRlcihoZWFkZXJQcm9wcywgaXNWZXJ0aWNhbFNjcm9sbEJhcil7XHJcbiAgICBpZihBcnJheS5pc0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pKXtcclxuICAgICAgbGV0IHN0YXJ0UG9zaXRpb24gPSAodGhpcy5wcm9wcy5yb3dTZWxlY3RUeXBlID09IENvbnN0LlJPV19TRUxFQ1RfU0lOR0xFIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucm93U2VsZWN0VHlwZSA9PSBDb25zdC5ST1dfU0VMRUNUX01VTFRJKSAmJiAhdGhpcy5wcm9wcy5oaWRlU2VsZWN0Q29sdW1uID8gMTowO1xyXG4gICAgICBpZihzdGFydFBvc2l0aW9uID09IDEpXHJcbiAgICAgICAgdGhpcy5zZWxlY3RSb3dDb2x1bW5XaWR0aCA9IGhlYWRlclByb3BzWzBdLndpZHRoO1xyXG4gICAgICBmb3IobGV0IGk9MDtpPHRoaXMucHJvcHMuY2hpbGRyZW4ubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbltpXSA9XHJcbiAgICAgICAgICBSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbltpXSwge3dpZHRoOiBoZWFkZXJQcm9wc1tpK3N0YXJ0UG9zaXRpb25dLndpZHRoK1wicHhcIn0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuID1cclxuICAgICAgICBSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbiwge3dpZHRoOiBoZWFkZXJQcm9wc1swXS53aWR0aCtcInB4XCJ9KTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMucHJvcHMuY29uZGVuc2VkICYmICF0aGlzLnByb3BzLmlzRmlsdGVyZWQpIHtcclxuICAgICAgdGhpcy5yZWZzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIjM2cHhcIjtcclxuICAgIH1cclxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIGlmKGlzVmVydGljYWxTY3JvbGxCYXIpXHJcbiAgICAgIHRoaXMucmVmcy5jb250YWluZXIuc3R5bGUubWFyZ2luUmlnaHQgPSBVdGlsLmdldFNjcm9sbEJhcldpZHRoKCkgKyBcInB4XCI7XHJcbiAgfVxyXG59XHJcblRhYmxlSGVhZGVyLnByb3BUeXBlcyA9IHtcclxuICByb3dTZWxlY3RUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIG9uU29ydDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgb25TZWxlY3RBbGxSb3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gIHNvcnROYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNvcnRPcmRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuICBoaWRlU2VsZWN0Q29sdW1uOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBib3JkZXJlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgY29uZGVuc2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBpc0ZpbHRlcmVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBpc1NlbGVjdEFsbDogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFt0cnVlLCAnaW5kZXRlcm1pbmF0ZScsIGZhbHNlXSlcclxufTtcclxuXHJcblRhYmxlSGVhZGVyLmRlZmF1bHRQcm9wcyA9IHtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgVGFibGVIZWFkZXI7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1RhYmxlSGVhZGVyLmpzXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzU2V0IGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi9Db25zdCc7XHJcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCc7XHJcbmltcG9ydCBEYXRlRmlsdGVyIGZyb20gJy4vZmlsdGVycy9EYXRlJztcclxuaW1wb3J0IFRleHRGaWx0ZXIgZnJvbSAnLi9maWx0ZXJzL1RleHQnO1xyXG5pbXBvcnQgU2VsZWN0RmlsdGVyIGZyb20gJy4vZmlsdGVycy9TZWxlY3QnO1xyXG5pbXBvcnQgTnVtYmVyRmlsdGVyIGZyb20gJy4vZmlsdGVycy9OdW1iZXInO1xyXG5cclxuY2xhc3MgVGFibGVIZWFkZXJDb2x1bW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5oYW5kbGVGaWx0ZXIgPSB0aGlzLmhhbmRsZUZpbHRlci5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ29sdW1uQ2xpY2soZSkge1xyXG4gICAgaWYgKCF0aGlzLnByb3BzLmRhdGFTb3J0KXJldHVybjtcclxuICAgIGxldCBvcmRlciA9IHRoaXMucHJvcHMuc29ydCA9PSBDb25zdC5TT1JUX0RFU0MgPyBDb25zdC5TT1JUX0FTQyA6IENvbnN0LlNPUlRfREVTQztcclxuICAgIHRoaXMucHJvcHMub25Tb3J0KG9yZGVyLCB0aGlzLnByb3BzLmRhdGFGaWVsZCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVGaWx0ZXIodmFsdWUsIHR5cGUpIHtcclxuICAgIHRoaXMucHJvcHMuZmlsdGVyLmVtaXR0ZXIuaGFuZGxlRmlsdGVyKHRoaXMucHJvcHMuZGF0YUZpZWxkLCB2YWx1ZSwgdHlwZSk7XHJcbiAgfVxyXG5cclxuICBnZXRGaWx0ZXJzKCkge1xyXG4gICAgc3dpdGNoICh0aGlzLnByb3BzLmZpbHRlci50eXBlKSB7XHJcbiAgICAgIGNhc2UgQ29uc3QuRklMVEVSX1RZUEUuVEVYVDpcclxuICAgICAge1xyXG4gICAgICAgIHJldHVybiA8VGV4dEZpbHRlciB7Li4udGhpcy5wcm9wcy5maWx0ZXJ9IGNvbHVtbk5hbWU9e3RoaXMucHJvcHMuY2hpbGRyZW59IGZpbHRlckhhbmRsZXI9e3RoaXMuaGFuZGxlRmlsdGVyfS8+O1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgQ29uc3QuRklMVEVSX1RZUEUuU0VMRUNUOlxyXG4gICAgICB7XHJcbiAgICAgICAgcmV0dXJuIDxTZWxlY3RGaWx0ZXIgey4uLnRoaXMucHJvcHMuZmlsdGVyfSBjb2x1bW5OYW1lPXt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVySGFuZGxlcj17dGhpcy5oYW5kbGVGaWx0ZXJ9Lz47XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBDb25zdC5GSUxURVJfVFlQRS5OVU1CRVI6XHJcbiAgICAgIHtcclxuICAgICAgICByZXR1cm4gPE51bWJlckZpbHRlciB7Li4udGhpcy5wcm9wcy5maWx0ZXJ9IGNvbHVtbk5hbWU9e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJIYW5kbGVyPXt0aGlzLmhhbmRsZUZpbHRlcn0vPjtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIENvbnN0LkZJTFRFUl9UWVBFLkRBVEU6XHJcbiAgICAgIHtcclxuICAgICAgICByZXR1cm4gPERhdGVGaWx0ZXIgey4uLnRoaXMucHJvcHMuZmlsdGVyfSBjb2x1bW5OYW1lPXt0aGlzLnByb3BzLmNoaWxkcmVufSBmaWx0ZXJIYW5kbGVyPXt0aGlzLmhhbmRsZUZpbHRlcn0vPjtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIENvbnN0LkZJTFRFUl9UWVBFLkNVU1RPTTpcclxuICAgICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmZpbHRlci5nZXRFbGVtZW50KHRoaXMuaGFuZGxlRmlsdGVyLCB0aGlzLnByb3BzLmZpbHRlci5jdXN0b21GaWx0ZXJQYXJhbWV0ZXJzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLnJlZnMuaW5uZXJEaXYuc2V0QXR0cmlidXRlKFwiZGF0YS1maWVsZFwiLCB0aGlzLnByb3BzLmRhdGFGaWVsZCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB2YXIgd2lkdGggPSB0aGlzLnByb3BzLndpZHRoICE9PSBudWxsID8gcGFyc2VJbnQodGhpcy5wcm9wcy53aWR0aCkgOiBudWxsO1xyXG4gICAgdmFyIHRoU3R5bGUgPSB7XHJcbiAgICAgIHRleHRBbGlnbjogdGhpcy5wcm9wcy5kYXRhQWxpZ24sXHJcbiAgICAgIGRpc3BsYXk6IHRoaXMucHJvcHMuaGlkZGVuID8gXCJub25lXCIgOiBudWxsLFxyXG4gICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgIG1heFdpZHRoOiB3aWR0aFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBkZWZhdWx0Q2FyZXQgPSAoIXRoaXMucHJvcHMuZGF0YVNvcnQpID8gbnVsbCA6IChcclxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwib3JkZXJcIj5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkcm9wZG93blwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZXRcIiBzdHlsZT17e21hcmdpbjogJzEwcHggMCAxMHB4IDVweCcsIGNvbG9yOiAnI2NjYyd9fT48L3NwYW4+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImRyb3B1cFwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZXRcIiBzdHlsZT17e21hcmdpbjogJzEwcHggMCcsIGNvbG9yOiAnI2NjYyd9fT48L3NwYW4+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICA8L3NwYW4+XHJcbiAgICApO1xyXG4gICAgY29uc3Qgc29ydENhcmV0ID0gdGhpcy5wcm9wcy5zb3J0ID8gVXRpbC5yZW5kZXJSZWFjdFNvcnRDYXJldCh0aGlzLnByb3BzLnNvcnQpIDogZGVmYXVsdENhcmV0O1xyXG5cclxuICAgIHZhciBjbGFzc2VzID0gdGhpcy5wcm9wcy5jbGFzc05hbWUgKyBcIiBcIiArICh0aGlzLnByb3BzLmRhdGFTb3J0ID8gXCJzb3J0LWNvbHVtblwiIDogXCJcIik7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8dGggcmVmPSdoZWFkZXItY29sJyBjbGFzc05hbWU9e2NsYXNzZXN9IHN0eWxlPXt0aFN0eWxlfT5cclxuICAgICAgICA8ZGl2IHJlZj1cImlubmVyRGl2XCIgY2xhc3NOYW1lPVwidGgtaW5uZXIgdGFibGUtaGVhZGVyLWNvbHVtblwiXHJcbiAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNvbHVtbkNsaWNrLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59e3NvcnRDYXJldH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICB7dGhpcy5wcm9wcy5maWx0ZXIgPyB0aGlzLmdldEZpbHRlcnMoKSA6IG51bGx9XHJcbiAgICAgIDwvdGg+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG52YXIgZmlsdGVyVHlwZUFycmF5ID0gW107XHJcbmZvciAobGV0IGtleSBpbiBDb25zdC5GSUxURVJfVFlQRSkge1xyXG4gIGZpbHRlclR5cGVBcnJheS5wdXNoKENvbnN0LkZJTFRFUl9UWVBFW2tleV0pO1xyXG59XHJcblxyXG5UYWJsZUhlYWRlckNvbHVtbi5wcm9wVHlwZXMgPSB7XHJcbiAgZGF0YUZpZWxkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRhdGFBbGlnbjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuICBkYXRhU29ydDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgb25Tb3J0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICBkYXRhRm9ybWF0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICBpc0tleTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgZWRpdGFibGU6IFJlYWN0LlByb3BUeXBlcy5hbnksXHJcbiAgaGlkZGVuOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBoaWRkZW5JblBvcHVwOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBzZWFyY2hhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgd2lkdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgc29ydEZ1bmM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gIGNvbHVtbkNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLmFueSxcclxuICBmaWx0ZXJGb3JtYXR0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gIHNvcnQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgZm9ybWF0RXh0cmFEYXRhOiBSZWFjdC5Qcm9wVHlwZXMuYW55LFxyXG4gIGZpbHRlcjogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgIHR5cGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihmaWx0ZXJUeXBlQXJyYXkpLFxyXG4gICAgZGVsYXk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgICBvcHRpb25zOiBSZWFjdC5Qcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuICAgICAgUmVhY3QuUHJvcFR5cGVzLm9iamVjdCwgLy8gZm9yIFNlbGVjdEZpbHRlclxyXG4gICAgICBSZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZihSZWFjdC5Qcm9wVHlwZXMubnVtYmVyKSAvL2ZvciBOdW1iZXJGaWx0ZXJcclxuICAgIF0pLFxyXG4gICAgbnVtYmVyQ29tcGFyYXRvcnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheU9mKFJlYWN0LlByb3BUeXBlcy5zdHJpbmcpLFxyXG4gICAgZW1pdHRlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuICAgIHBsYWNlaG9sZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgZ2V0RWxlbWVudDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBjdXN0b21GaWx0ZXJQYXJhbWV0ZXJzOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XHJcbiAgfSlcclxufTtcclxuXHJcblRhYmxlSGVhZGVyQ29sdW1uLmRlZmF1bHRQcm9wcyA9IHtcclxuICBkYXRhQWxpZ246IFwibGVmdFwiLFxyXG4gIGRhdGFTb3J0OiBmYWxzZSxcclxuICBkYXRhRm9ybWF0OiB1bmRlZmluZWQsXHJcbiAgaXNLZXk6IGZhbHNlLFxyXG4gIGVkaXRhYmxlOiB0cnVlLFxyXG4gIG9uU29ydDogdW5kZWZpbmVkLFxyXG4gIGhpZGRlbjogZmFsc2UsXHJcbiAgaGlkZGVuSW5Qb3B1cDogZmFsc2UsXHJcbiAgc2VhcmNoYWJsZTogdHJ1ZSxcclxuICBjbGFzc05hbWU6IFwiXCIsXHJcbiAgd2lkdGg6IG51bGwsXHJcbiAgc29ydEZ1bmM6IHVuZGVmaW5lZCxcclxuICBjb2x1bW5DbGFzc05hbWU6ICcnLFxyXG4gIGZpbHRlckZvcm1hdHRlZDogZmFsc2UsXHJcbiAgc29ydDogdW5kZWZpbmVkLFxyXG4gIGZvcm1hdEV4dHJhRGF0YTogdW5kZWZpbmVkLFxyXG4gIGZpbHRlcjogdW5kZWZpbmVkXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUYWJsZUhlYWRlckNvbHVtbjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVGFibGVIZWFkZXJDb2x1bW4uanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi9Db25zdCc7XHJcblxyXG5jbGFzcyBUYWJsZVJvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuY2xpY2tOdW0gPSAwO1xyXG4gIH1cclxuXHJcbiAgcm93Q2xpY2soZSl7XHJcbiAgICBpZihlLnRhcmdldC50YWdOYW1lICE9PSBcIklOUFVUXCIgJiZcclxuICAgICAgICBlLnRhcmdldC50YWdOYW1lICE9PSBcIlNFTEVDVFwiICYmXHJcbiAgICAgICAgZS50YXJnZXQudGFnTmFtZSAhPT0gXCJURVhUQVJFQVwiKSB7XHJcbiAgICAgIGNvbnN0IHJvd0luZGV4ID0gZS5jdXJyZW50VGFyZ2V0LnJvd0luZGV4O1xyXG4gICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RSb3cpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25TZWxlY3RSb3cocm93SW5kZXgsICF0aGlzLnByb3BzLmlzU2VsZWN0ZWQpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0QW5kRWRpdENlbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGlja051bSsrO1xyXG4gICAgICAgICAgICAvKiogaWYgY2xpY2tUb1NlbGVjdEFuZEVkaXRDZWxsIGlzIGVuYWJsZWQsXHJcbiAgICAgICAgICAgICAqICB0aGVyZSBzaG91bGQgYmUgYSBkZWxheSB0byBwcmV2ZW50IGEgc2VsZWN0aW9uIGNoYW5nZWQgd2hlblxyXG4gICAgICAgICAgICAgKiAgdXNlciBkYmxpY2sgdG8gZWRpdCBjZWxsIG9uIHNhbWUgcm93IGJ1dCBkaWZmZXJlbnQgY2VsbFxyXG4gICAgICAgICAgICAqKi9cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5jbGlja051bSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdFJvdyhyb3dJbmRleCwgIXRoaXMucHJvcHMuaXNTZWxlY3RlZCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRoaXMuY2xpY2tOdW0gPSAwO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUm93Q2xpY2spIHRoaXMucHJvcHMub25Sb3dDbGljayhyb3dJbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByb3dNb3VzZU91dChlKSB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5vblJvd01vdXNlT3V0KSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU91dChlLmN1cnJlbnRUYXJnZXQucm93SW5kZXgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcm93TW91c2VPdmVyKGUpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLm9uUm93TW91c2VPdmVyKSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25Sb3dNb3VzZU92ZXIoZS5jdXJyZW50VGFyZ2V0LnJvd0luZGV4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpe1xyXG4gICAgdGhpcy5jbGlja051bSA9IDA7XHJcbiAgICB2YXIgdHJDc3M9e1xyXG4gICAgICBzdHlsZTp7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnByb3BzLmlzU2VsZWN0ZWQ/dGhpcy5wcm9wcy5zZWxlY3RSb3cuYmdDb2xvcjpudWxsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNsYXNzTmFtZToodGhpcy5wcm9wcy5pc1NlbGVjdGVkICYmIHRoaXMucHJvcHMuc2VsZWN0Um93LmNsYXNzTmFtZSA/IHRoaXMucHJvcHMuc2VsZWN0Um93LmNsYXNzTmFtZSA6ICcnKSArICh0aGlzLnByb3BzLmNsYXNzTmFtZXx8JycpXHJcbiAgICB9O1xyXG5cclxuICAgIGlmKHRoaXMucHJvcHMuc2VsZWN0Um93ICYmICh0aGlzLnByb3BzLnNlbGVjdFJvdy5jbGlja1RvU2VsZWN0IHx8XHJcbiAgICAgIHRoaXMucHJvcHMuc2VsZWN0Um93LmNsaWNrVG9TZWxlY3RBbmRFZGl0Q2VsbCkgfHwgdGhpcy5wcm9wcy5vblJvd0NsaWNrKXtcclxuICAgICAgcmV0dXJuKFxyXG4gICAgICAgIDx0ciB7Li4udHJDc3N9XHJcbiAgICAgICAgICAgIG9uTW91c2VPdmVyPXt0aGlzLnJvd01vdXNlT3Zlci5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICBvbk1vdXNlT3V0PXt0aGlzLnJvd01vdXNlT3V0LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucm93Q2xpY2suYmluZCh0aGlzKX0+e3RoaXMucHJvcHMuY2hpbGRyZW59PC90cj5cclxuICAgICAgKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIHJldHVybihcclxuICAgICAgICA8dHIgey4uLnRyQ3NzfT57dGhpcy5wcm9wcy5jaGlsZHJlbn08L3RyPlxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblRhYmxlUm93LnByb3BUeXBlcyA9IHtcclxuICBpc1NlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBlbmFibGVDZWxsRWRpdDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgb25Sb3dDbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgb25TZWxlY3RSb3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gIG9uUm93TW91c2VPdXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gIG9uUm93TW91c2VPdmVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xyXG59O1xyXG5UYWJsZVJvdy5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgb25Sb3dDbGljazogdW5kZWZpbmVkXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVGFibGVSb3c7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1RhYmxlUm93LmpzXG4gKiovIiwiaWYodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpe1xyXG4gIHZhciBmaWxlc2F2ZXIgPSByZXF1aXJlKCcuL2ZpbGVzYXZlcicpO1xyXG4gIHZhciBzYXZlQXMgPSBmaWxlc2F2ZXIuc2F2ZUFzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvU3RyaW5nKGRhdGEsIGtleXMpIHtcclxuICB2YXIgZGF0YVN0cmluZyA9IFwiXCI7XHJcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSByZXR1cm4gZGF0YVN0cmluZztcclxuXHJcbiAgZGF0YVN0cmluZyArPSBrZXlzLmpvaW4oJywnKSArICdcXG4nXHJcblxyXG4gIGRhdGEubWFwKGZ1bmN0aW9uKHJvdykge1xyXG4gICAga2V5cy5tYXAoZnVuY3Rpb24oY29sLCBpKSB7XHJcbiAgICAgIGxldCBjZWxsID0gdHlwZW9mIHJvd1tjb2xdICE9PSAndW5kZWZpbmVkJyA/ICgnXCInK3Jvd1tjb2xdKydcIicpIDogXCJcIjtcclxuICAgICAgZGF0YVN0cmluZyArPSBjZWxsO1xyXG4gICAgICBpZiAoaSsxIDwga2V5cy5sZW5ndGgpXHJcbiAgICAgICAgZGF0YVN0cmluZyArPSAnLCc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkYXRhU3RyaW5nICs9ICdcXG4nO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZGF0YVN0cmluZztcclxufTtcclxuXHJcbnZhciBleHBvcnRDU1YgPSBmdW5jdGlvbihkYXRhLCBrZXlzLCBmaWxlbmFtZSkge1xyXG4gIHZhciBkYXRhU3RyaW5nID0gdG9TdHJpbmcoZGF0YSwga2V5cyk7XHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBzYXZlQXMoIG5ldyBCbG9iKFtkYXRhU3RyaW5nXSwge3R5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJ9KSwgZmlsZW5hbWUgfHwgJ3NwcmVhZHNoZWV0LmNzdicgKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0Q1NWO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9jc3ZfZXhwb3J0X3V0aWwuanNcbiAqKi8iLCIvKiBGaWxlU2F2ZXIuanNcclxuICogQSBzYXZlQXMoKSBGaWxlU2F2ZXIgaW1wbGVtZW50YXRpb24uXHJcbiAqIDEuMS4yMDE1MTAwM1xyXG4gKlxyXG4gKiBCeSBFbGkgR3JleSwgaHR0cDovL2VsaWdyZXkuY29tXHJcbiAqIExpY2Vuc2U6IE1JVFxyXG4gKiAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxyXG4gKi9cclxuXHJcbi8qZ2xvYmFsIHNlbGYgKi9cclxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSwgaW5kZW50OiA0LCBsYXhicmVhazogdHJ1ZSwgbGF4Y29tbWE6IHRydWUsIHNtYXJ0dGFiczogdHJ1ZSwgcGx1c3BsdXM6IHRydWUgKi9cclxuXHJcbi8qISBAc291cmNlIGh0dHA6Ly9wdXJsLmVsaWdyZXkuY29tL2dpdGh1Yi9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvRmlsZVNhdmVyLmpzICovXHJcblxyXG52YXIgc2F2ZUFzID0gc2F2ZUFzIHx8IChmdW5jdGlvbih2aWV3KSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0Ly8gSUUgPDEwIGlzIGV4cGxpY2l0bHkgdW5zdXBwb3J0ZWRcclxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAvTVNJRSBbMS05XVxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHR2YXJcclxuXHRcdCAgZG9jID0gdmlldy5kb2N1bWVudFxyXG5cdFx0ICAvLyBvbmx5IGdldCBVUkwgd2hlbiBuZWNlc3NhcnkgaW4gY2FzZSBCbG9iLmpzIGhhc24ndCBvdmVycmlkZGVuIGl0IHlldFxyXG5cdFx0LCBnZXRfVVJMID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB2aWV3LlVSTCB8fCB2aWV3LndlYmtpdFVSTCB8fCB2aWV3O1xyXG5cdFx0fVxyXG5cdFx0LCBzYXZlX2xpbmsgPSBkb2MuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLCBcImFcIilcclxuXHRcdCwgY2FuX3VzZV9zYXZlX2xpbmsgPSBcImRvd25sb2FkXCIgaW4gc2F2ZV9saW5rXHJcblx0XHQsIGNsaWNrID0gZnVuY3Rpb24obm9kZSkge1xyXG5cdFx0XHR2YXIgZXZlbnQgPSBuZXcgTW91c2VFdmVudChcImNsaWNrXCIpO1xyXG5cdFx0XHRub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG5cdFx0fVxyXG5cdFx0LCBpc19zYWZhcmkgPSAvVmVyc2lvblxcL1tcXGRcXC5dKy4qU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXHJcblx0XHQsIHdlYmtpdF9yZXFfZnMgPSB2aWV3LndlYmtpdFJlcXVlc3RGaWxlU3lzdGVtXHJcblx0XHQsIHJlcV9mcyA9IHZpZXcucmVxdWVzdEZpbGVTeXN0ZW0gfHwgd2Via2l0X3JlcV9mcyB8fCB2aWV3Lm1velJlcXVlc3RGaWxlU3lzdGVtXHJcblx0XHQsIHRocm93X291dHNpZGUgPSBmdW5jdGlvbihleCkge1xyXG5cdFx0XHQodmlldy5zZXRJbW1lZGlhdGUgfHwgdmlldy5zZXRUaW1lb3V0KShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR0aHJvdyBleDtcclxuXHRcdFx0fSwgMCk7XHJcblx0XHR9XHJcblx0XHQsIGZvcmNlX3NhdmVhYmxlX3R5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXHJcblx0XHQsIGZzX21pbl9zaXplID0gMFxyXG5cdFx0Ly8gU2VlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzUyOTcjYzcgYW5kXHJcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9GaWxlU2F2ZXIuanMvY29tbWl0LzQ4NTkzMGEjY29tbWl0Y29tbWVudC04NzY4MDQ3XHJcblx0XHQvLyBmb3IgdGhlIHJlYXNvbmluZyBiZWhpbmQgdGhlIHRpbWVvdXQgYW5kIHJldm9jYXRpb24gZmxvd1xyXG5cdFx0LCBhcmJpdHJhcnlfcmV2b2tlX3RpbWVvdXQgPSA1MDAgLy8gaW4gbXNcclxuXHRcdCwgcmV2b2tlID0gZnVuY3Rpb24oZmlsZSkge1xyXG5cdFx0XHR2YXIgcmV2b2tlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgZmlsZSA9PT0gXCJzdHJpbmdcIikgeyAvLyBmaWxlIGlzIGFuIG9iamVjdCBVUkxcclxuXHRcdFx0XHRcdGdldF9VUkwoKS5yZXZva2VPYmplY3RVUkwoZmlsZSk7XHJcblx0XHRcdFx0fSBlbHNlIHsgLy8gZmlsZSBpcyBhIEZpbGVcclxuXHRcdFx0XHRcdGZpbGUucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZiAodmlldy5jaHJvbWUpIHtcclxuXHRcdFx0XHRyZXZva2VyKCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2V0VGltZW91dChyZXZva2VyLCBhcmJpdHJhcnlfcmV2b2tlX3RpbWVvdXQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQsIGRpc3BhdGNoID0gZnVuY3Rpb24oZmlsZXNhdmVyLCBldmVudF90eXBlcywgZXZlbnQpIHtcclxuXHRcdFx0ZXZlbnRfdHlwZXMgPSBbXS5jb25jYXQoZXZlbnRfdHlwZXMpO1xyXG5cdFx0XHR2YXIgaSA9IGV2ZW50X3R5cGVzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKGktLSkge1xyXG5cdFx0XHRcdHZhciBsaXN0ZW5lciA9IGZpbGVzYXZlcltcIm9uXCIgKyBldmVudF90eXBlc1tpXV07XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRsaXN0ZW5lci5jYWxsKGZpbGVzYXZlciwgZXZlbnQgfHwgZmlsZXNhdmVyKTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XHJcblx0XHRcdFx0XHRcdHRocm93X291dHNpZGUoZXgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0LCBhdXRvX2JvbSA9IGZ1bmN0aW9uKGJsb2IpIHtcclxuXHRcdFx0Ly8gcHJlcGVuZCBCT00gZm9yIFVURi04IFhNTCBhbmQgdGV4dC8qIHR5cGVzIChpbmNsdWRpbmcgSFRNTClcclxuXHRcdFx0aWYgKC9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KGJsb2IudHlwZSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gbmV3IEJsb2IoW1wiXFx1ZmVmZlwiLCBibG9iXSwge3R5cGU6IGJsb2IudHlwZX0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBibG9iO1xyXG5cdFx0fVxyXG5cdFx0LCBGaWxlU2F2ZXIgPSBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xyXG5cdFx0XHRpZiAoIW5vX2F1dG9fYm9tKSB7XHJcblx0XHRcdFx0YmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIEZpcnN0IHRyeSBhLmRvd25sb2FkLCB0aGVuIHdlYiBmaWxlc3lzdGVtLCB0aGVuIG9iamVjdCBVUkxzXHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdCAgZmlsZXNhdmVyID0gdGhpc1xyXG5cdFx0XHRcdCwgdHlwZSA9IGJsb2IudHlwZVxyXG5cdFx0XHRcdCwgYmxvYl9jaGFuZ2VkID0gZmFsc2VcclxuXHRcdFx0XHQsIG9iamVjdF91cmxcclxuXHRcdFx0XHQsIHRhcmdldF92aWV3XHJcblx0XHRcdFx0LCBkaXNwYXRjaF9hbGwgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGRpc3BhdGNoKGZpbGVzYXZlciwgXCJ3cml0ZXN0YXJ0IHByb2dyZXNzIHdyaXRlIHdyaXRlZW5kXCIuc3BsaXQoXCIgXCIpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gb24gYW55IGZpbGVzeXMgZXJyb3JzIHJldmVydCB0byBzYXZpbmcgd2l0aCBvYmplY3QgVVJMc1xyXG5cdFx0XHRcdCwgZnNfZXJyb3IgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICh0YXJnZXRfdmlldyAmJiBpc19zYWZhcmkgJiYgdHlwZW9mIEZpbGVSZWFkZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuXHRcdFx0XHRcdFx0Ly8gU2FmYXJpIGRvZXNuJ3QgYWxsb3cgZG93bmxvYWRpbmcgb2YgYmxvYiB1cmxzXHJcblx0XHRcdFx0XHRcdHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cdFx0XHRcdFx0XHRyZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGJhc2U2NERhdGEgPSByZWFkZXIucmVzdWx0O1xyXG5cdFx0XHRcdFx0XHRcdHRhcmdldF92aWV3LmxvY2F0aW9uLmhyZWYgPSBcImRhdGE6YXR0YWNobWVudC9maWxlXCIgKyBiYXNlNjREYXRhLnNsaWNlKGJhc2U2NERhdGEuc2VhcmNoKC9bLDtdLykpO1xyXG5cdFx0XHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XHJcblx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xyXG5cdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5JTklUO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBkb24ndCBjcmVhdGUgbW9yZSBvYmplY3QgVVJMcyB0aGFuIG5lZWRlZFxyXG5cdFx0XHRcdFx0aWYgKGJsb2JfY2hhbmdlZCB8fCAhb2JqZWN0X3VybCkge1xyXG5cdFx0XHRcdFx0XHRvYmplY3RfdXJsID0gZ2V0X1VSTCgpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICh0YXJnZXRfdmlldykge1xyXG5cdFx0XHRcdFx0XHR0YXJnZXRfdmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybDtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHZhciBuZXdfdGFiID0gdmlldy5vcGVuKG9iamVjdF91cmwsIFwiX2JsYW5rXCIpO1xyXG5cdFx0XHRcdFx0XHRpZiAobmV3X3RhYiA9PSB1bmRlZmluZWQgJiYgaXNfc2FmYXJpKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly9BcHBsZSBkbyBub3QgYWxsb3cgd2luZG93Lm9wZW4sIHNlZSBodHRwOi8vYml0Lmx5LzFrWmZmUklcclxuXHRcdFx0XHRcdFx0XHR2aWV3LmxvY2F0aW9uLmhyZWYgPSBvYmplY3RfdXJsXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XHJcblx0XHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcclxuXHRcdFx0XHRcdHJldm9rZShvYmplY3RfdXJsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0LCBhYm9ydGFibGUgPSBmdW5jdGlvbihmdW5jKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGlmIChmaWxlc2F2ZXIucmVhZHlTdGF0ZSAhPT0gZmlsZXNhdmVyLkRPTkUpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQsIGNyZWF0ZV9pZl9ub3RfZm91bmQgPSB7Y3JlYXRlOiB0cnVlLCBleGNsdXNpdmU6IGZhbHNlfVxyXG5cdFx0XHRcdCwgc2xpY2VcclxuXHRcdFx0O1xyXG5cdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5JTklUO1xyXG5cdFx0XHRpZiAoIW5hbWUpIHtcclxuXHRcdFx0XHRuYW1lID0gXCJkb3dubG9hZFwiO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChjYW5fdXNlX3NhdmVfbGluaykge1xyXG5cdFx0XHRcdG9iamVjdF91cmwgPSBnZXRfVVJMKCkuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cdFx0XHRcdHNhdmVfbGluay5ocmVmID0gb2JqZWN0X3VybDtcclxuXHRcdFx0XHRzYXZlX2xpbmsuZG93bmxvYWQgPSBuYW1lO1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRjbGljayhzYXZlX2xpbmspO1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XHJcblx0XHRcdFx0XHRyZXZva2Uob2JqZWN0X3VybCk7XHJcblx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBPYmplY3QgYW5kIHdlYiBmaWxlc3lzdGVtIFVSTHMgaGF2ZSBhIHByb2JsZW0gc2F2aW5nIGluIEdvb2dsZSBDaHJvbWUgd2hlblxyXG5cdFx0XHQvLyB2aWV3ZWQgaW4gYSB0YWIsIHNvIEkgZm9yY2Ugc2F2ZSB3aXRoIGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVxyXG5cdFx0XHQvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MTE1OFxyXG5cdFx0XHQvLyBVcGRhdGU6IEdvb2dsZSBlcnJhbnRseSBjbG9zZWQgOTExNTgsIEkgc3VibWl0dGVkIGl0IGFnYWluOlxyXG5cdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzg5NjQyXHJcblx0XHRcdGlmICh2aWV3LmNocm9tZSAmJiB0eXBlICYmIHR5cGUgIT09IGZvcmNlX3NhdmVhYmxlX3R5cGUpIHtcclxuXHRcdFx0XHRzbGljZSA9IGJsb2Iuc2xpY2UgfHwgYmxvYi53ZWJraXRTbGljZTtcclxuXHRcdFx0XHRibG9iID0gc2xpY2UuY2FsbChibG9iLCAwLCBibG9iLnNpemUsIGZvcmNlX3NhdmVhYmxlX3R5cGUpO1xyXG5cdFx0XHRcdGJsb2JfY2hhbmdlZCA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gU2luY2UgSSBjYW4ndCBiZSBzdXJlIHRoYXQgdGhlIGd1ZXNzZWQgbWVkaWEgdHlwZSB3aWxsIHRyaWdnZXIgYSBkb3dubG9hZFxyXG5cdFx0XHQvLyBpbiBXZWJLaXQsIEkgYXBwZW5kIC5kb3dubG9hZCB0byB0aGUgZmlsZW5hbWUuXHJcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD02NTQ0MFxyXG5cdFx0XHRpZiAod2Via2l0X3JlcV9mcyAmJiBuYW1lICE9PSBcImRvd25sb2FkXCIpIHtcclxuXHRcdFx0XHRuYW1lICs9IFwiLmRvd25sb2FkXCI7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHR5cGUgPT09IGZvcmNlX3NhdmVhYmxlX3R5cGUgfHwgd2Via2l0X3JlcV9mcykge1xyXG5cdFx0XHRcdHRhcmdldF92aWV3ID0gdmlldztcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIXJlcV9mcykge1xyXG5cdFx0XHRcdGZzX2Vycm9yKCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZzX21pbl9zaXplICs9IGJsb2Iuc2l6ZTtcclxuXHRcdFx0cmVxX2ZzKHZpZXcuVEVNUE9SQVJZLCBmc19taW5fc2l6ZSwgYWJvcnRhYmxlKGZ1bmN0aW9uKGZzKSB7XHJcblx0XHRcdFx0ZnMucm9vdC5nZXREaXJlY3RvcnkoXCJzYXZlZFwiLCBjcmVhdGVfaWZfbm90X2ZvdW5kLCBhYm9ydGFibGUoZnVuY3Rpb24oZGlyKSB7XHJcblx0XHRcdFx0XHR2YXIgc2F2ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRkaXIuZ2V0RmlsZShuYW1lLCBjcmVhdGVfaWZfbm90X2ZvdW5kLCBhYm9ydGFibGUoZnVuY3Rpb24oZmlsZSkge1xyXG5cdFx0XHRcdFx0XHRcdGZpbGUuY3JlYXRlV3JpdGVyKGFib3J0YWJsZShmdW5jdGlvbih3cml0ZXIpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHdyaXRlci5vbndyaXRlZW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0X3ZpZXcubG9jYXRpb24uaHJlZiA9IGZpbGUudG9VUkwoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuRE9ORTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2goZmlsZXNhdmVyLCBcIndyaXRlZW5kXCIsIGV2ZW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV2b2tlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0XHRcdHdyaXRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvciA9IHdyaXRlci5lcnJvcjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGVycm9yLmNvZGUgIT09IGVycm9yLkFCT1JUX0VSUikge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZzX2Vycm9yKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdFx0XHRcIndyaXRlc3RhcnQgcHJvZ3Jlc3Mgd3JpdGUgYWJvcnRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR3cml0ZXJbXCJvblwiICsgZXZlbnRdID0gZmlsZXNhdmVyW1wib25cIiArIGV2ZW50XTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0d3JpdGVyLndyaXRlKGJsb2IpO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZmlsZXNhdmVyLmFib3J0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHdyaXRlci5hYm9ydCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xyXG5cdFx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLldSSVRJTkc7XHJcblx0XHRcdFx0XHRcdFx0fSksIGZzX2Vycm9yKTtcclxuXHRcdFx0XHRcdFx0fSksIGZzX2Vycm9yKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRkaXIuZ2V0RmlsZShuYW1lLCB7Y3JlYXRlOiBmYWxzZX0sIGFib3J0YWJsZShmdW5jdGlvbihmaWxlKSB7XHJcblx0XHRcdFx0XHRcdC8vIGRlbGV0ZSBmaWxlIGlmIGl0IGFscmVhZHkgZXhpc3RzXHJcblx0XHRcdFx0XHRcdGZpbGUucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdHNhdmUoKTtcclxuXHRcdFx0XHRcdH0pLCBhYm9ydGFibGUoZnVuY3Rpb24oZXgpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGV4LmNvZGUgPT09IGV4Lk5PVF9GT1VORF9FUlIpIHtcclxuXHRcdFx0XHRcdFx0XHRzYXZlKCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0ZnNfZXJyb3IoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdH0pLCBmc19lcnJvcik7XHJcblx0XHRcdH0pLCBmc19lcnJvcik7XHJcblx0XHR9XHJcblx0XHQsIEZTX3Byb3RvID0gRmlsZVNhdmVyLnByb3RvdHlwZVxyXG5cdFx0LCBzYXZlQXMgPSBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IEZpbGVTYXZlcihibG9iLCBuYW1lLCBub19hdXRvX2JvbSk7XHJcblx0XHR9XHJcblx0O1xyXG5cdC8vIElFIDEwKyAobmF0aXZlIHNhdmVBcylcclxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGJsb2IsIG5hbWUsIG5vX2F1dG9fYm9tKSB7XHJcblx0XHRcdGlmICghbm9fYXV0b19ib20pIHtcclxuXHRcdFx0XHRibG9iID0gYXV0b19ib20oYmxvYik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGJsb2IsIG5hbWUgfHwgXCJkb3dubG9hZFwiKTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRGU19wcm90by5hYm9ydCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGZpbGVzYXZlciA9IHRoaXM7XHJcblx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xyXG5cdFx0ZGlzcGF0Y2goZmlsZXNhdmVyLCBcImFib3J0XCIpO1xyXG5cdH07XHJcblx0RlNfcHJvdG8ucmVhZHlTdGF0ZSA9IEZTX3Byb3RvLklOSVQgPSAwO1xyXG5cdEZTX3Byb3RvLldSSVRJTkcgPSAxO1xyXG5cdEZTX3Byb3RvLkRPTkUgPSAyO1xyXG5cclxuXHRGU19wcm90by5lcnJvciA9XHJcblx0RlNfcHJvdG8ub253cml0ZXN0YXJ0ID1cclxuXHRGU19wcm90by5vbnByb2dyZXNzID1cclxuXHRGU19wcm90by5vbndyaXRlID1cclxuXHRGU19wcm90by5vbmFib3J0ID1cclxuXHRGU19wcm90by5vbmVycm9yID1cclxuXHRGU19wcm90by5vbndyaXRlZW5kID1cclxuXHRcdG51bGw7XHJcblxyXG5cdHJldHVybiBzYXZlQXM7XHJcbn0oXHJcblx0ICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZlxyXG5cdHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XHJcblx0fHwgdGhpcy5jb250ZW50XHJcbikpO1xyXG4vLyBgc2VsZmAgaXMgdW5kZWZpbmVkIGluIEZpcmVmb3ggZm9yIEFuZHJvaWQgY29udGVudCBzY3JpcHQgY29udGV4dFxyXG4vLyB3aGlsZSBgdGhpc2AgaXMgbnNJQ29udGVudEZyYW1lTWVzc2FnZU1hbmFnZXJcclxuLy8gd2l0aCBhbiBhdHRyaWJ1dGUgYGNvbnRlbnRgIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHdpbmRvd1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICBtb2R1bGUuZXhwb3J0cy5zYXZlQXMgPSBzYXZlQXM7XHJcbn0gZWxzZSBpZiAoKHR5cGVvZiBkZWZpbmUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGVmaW5lICE9PSBudWxsKSAmJiAoZGVmaW5lLmFtZCAhPSBudWxsKSkge1xyXG4gIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gc2F2ZUFzO1xyXG4gIH0pO1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2ZpbGVzYXZlci5qc1xuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBDb25zdCBmcm9tICcuLi9Db25zdCc7XHJcblxyXG5jbGFzcyBEYXRlRmlsdGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyID0gdGhpcy5maWx0ZXIuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXREZWZhdWx0RGF0ZSgpIHtcclxuICAgICAgICBsZXQgZGVmYXVsdERhdGUgID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gU2V0IHRoZSBhcHByb3ByaWF0ZSBmb3JtYXQgZm9yIHRoZSBpbnB1dCB0eXBlPWRhdGUsIGkuZS4gXCJZWVlZLU1NLUREXCJcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gbmV3IERhdGUodGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgICAgICBkZWZhdWx0RGF0ZSA9IGAke2RlZmF1bHRWYWx1ZS5nZXRGdWxsWWVhcigpfS0keyhcIjBcIiArIChkZWZhdWx0VmFsdWUuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMil9LSR7KFwiMFwiICsgZGVmYXVsdFZhbHVlLmdldERhdGUoKSkuc2xpY2UoLTIpfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXIoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBkYXRlVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgaWYgKGRhdGVWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmZpbHRlckhhbmRsZXIobmV3IERhdGUoZGF0ZVZhbHVlKSwgQ29uc3QuRklMVEVSX1RZUEUuREFURSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKG51bGwsIENvbnN0LkZJTFRFUl9UWVBFLkRBVEUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICBjb25zdCBkYXRlVmFsdWUgPSB0aGlzLnJlZnMuaW5wdXREYXRlLmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICBpZiAoZGF0ZVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZmlsdGVySGFuZGxlcihuZXcgRGF0ZShkYXRlVmFsdWUpLCBDb25zdC5GSUxURVJfVFlQRS5EQVRFKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxpbnB1dCByZWY9XCJpbnB1dERhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlsdGVyIGRhdGUtZmlsdGVyIGZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICB0eXBlPVwiZGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5maWx0ZXJ9XHJcbiAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3RoaXMuc2V0RGVmYXVsdERhdGUoKX0gLz5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuRGF0ZUZpbHRlci5wcm9wVHlwZXMgPSB7XHJcbiAgICBmaWx0ZXJIYW5kbGVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgY29sdW1uTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0ZUZpbHRlcjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZmlsdGVycy9EYXRlLmpzXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzU2V0IGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi4vQ29uc3QnO1xyXG5cclxuY29uc3QgbGVnYWxDb21wYXJhdG9ycyA9IFtcIj1cIiwgXCI+XCIsIFwiPj1cIiwgXCI8XCIsIFwiPD1cIiwgXCIhPVwiXTtcclxuXHJcbmNsYXNzIE51bWJlckZpbHRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLm51bWJlckNvbXBhcmF0b3JzID0gdGhpcy5wcm9wcy5udW1iZXJDb21wYXJhdG9ycyB8fCBsZWdhbENvbXBhcmF0b3JzO1xyXG4gICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaXNQbGFjZWhvbGRlclNlbGVjdGVkOiAodGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlLm51bWJlciA9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucHJvcHMub3B0aW9ucyAmJiB0aGlzLnByb3BzLm9wdGlvbnMuaW5kZXhPZih0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZS5udW1iZXIpID09IC0xKSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VOdW1iZXIgPSB0aGlzLm9uQ2hhbmdlTnVtYmVyLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZU51bWJlclNldCA9IHRoaXMub25DaGFuZ2VOdW1iZXJTZXQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlQ29tcGFyYXRvciA9IHRoaXMub25DaGFuZ2VDb21wYXJhdG9yLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DaGFuZ2VOdW1iZXIoZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5yZWZzLm51bWJlckZpbHRlckNvbXBhcmF0b3IudmFsdWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy50aW1lb3V0KSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLnByb3BzLmZpbHRlckhhbmRsZXIoe251bWJlcjogZmlsdGVyVmFsdWUsIGNvbXBhcmF0b3I6IHNlbGYucmVmcy5udW1iZXJGaWx0ZXJDb21wYXJhdG9yLnZhbHVlfSxcclxuICAgICAgICAgICAgICAgIENvbnN0LkZJTFRFUl9UWVBFLk5VTUJFUik7XHJcbiAgICAgICAgfSwgc2VsZi5wcm9wcy5kZWxheSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DaGFuZ2VOdW1iZXJTZXQoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtpc1BsYWNlaG9sZGVyU2VsZWN0ZWQ6IChldmVudC50YXJnZXQudmFsdWUgPT09IFwiXCIpfSk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVmcy5udW1iZXJGaWx0ZXJDb21wYXJhdG9yLnZhbHVlID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKHtudW1iZXI6IGV2ZW50LnRhcmdldC52YWx1ZSwgY29tcGFyYXRvcjogdGhpcy5yZWZzLm51bWJlckZpbHRlckNvbXBhcmF0b3IudmFsdWV9LFxyXG4gICAgICAgICAgICBDb25zdC5GSUxURVJfVFlQRS5OVU1CRVIpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlQ29tcGFyYXRvcihldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJlZnMubnVtYmVyRmlsdGVyLnZhbHVlID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKHtudW1iZXI6IHRoaXMucmVmcy5udW1iZXJGaWx0ZXIudmFsdWUsIGNvbXBhcmF0b3I6IGV2ZW50LnRhcmdldC52YWx1ZX0sXHJcbiAgICAgICAgICAgIENvbnN0LkZJTFRFUl9UWVBFLk5VTUJFUik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29tcGFyYXRvck9wdGlvbnMoKSB7XHJcbiAgICAgICAgbGV0IG9wdGlvblRhZ3MgPSBbXTtcclxuICAgICAgICBvcHRpb25UYWdzLnB1c2goPG9wdGlvbiBrZXk9XCItMVwiPjwvb3B0aW9uPik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bWJlckNvbXBhcmF0b3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9wdGlvblRhZ3MucHVzaCg8b3B0aW9uIGtleT17aX0gdmFsdWU9e3RoaXMubnVtYmVyQ29tcGFyYXRvcnNbaV19Pnt0aGlzLm51bWJlckNvbXBhcmF0b3JzW2ldfTwvb3B0aW9uPik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gb3B0aW9uVGFncztcclxuICAgIH1cclxuXHJcbiAgICBnZXROdW1iZXJPcHRpb25zKCkge1xyXG4gICAgICAgIGxldCBvcHRpb25UYWdzID0gW107XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucHJvcHMub3B0aW9ucztcclxuXHJcbiAgICAgICAgb3B0aW9uVGFncy5wdXNoKDxvcHRpb24ga2V5PVwiLTFcIiB2YWx1ZT1cIlwiPnt0aGlzLnByb3BzLnBsYWNlaG9sZGVyIHx8IGBTZWxlY3QgJHt0aGlzLnByb3BzLmNvbHVtbk5hbWV9Li4uYH08L29wdGlvbj4pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBvcHRpb25UYWdzLnB1c2goPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtvcHRpb25zW2ldfT57b3B0aW9uc1tpXX08L29wdGlvbj4pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvblRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVmcy5udW1iZXJGaWx0ZXJDb21wYXJhdG9yLnZhbHVlICYmIHRoaXMucmVmcy5udW1iZXJGaWx0ZXIudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKHtudW1iZXI6IHRoaXMucmVmcy5udW1iZXJGaWx0ZXIudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBjb21wYXJhdG9yOiB0aGlzLnJlZnMubnVtYmVyRmlsdGVyQ29tcGFyYXRvci52YWx1ZX0sXHJcbiAgICAgICAgICAgICAgICBDb25zdC5GSUxURVJfVFlQRS5OVU1CRVIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdENsYXNzID0gY2xhc3NTZXQoXCJzZWxlY3QtZmlsdGVyXCIsIFwibnVtYmVyLWZpbHRlci1pbnB1dFwiLCBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcInBsYWNlaG9sZGVyLXNlbGVjdGVkXCI6IHRoaXMuc3RhdGUuaXNQbGFjZWhvbGRlclNlbGVjdGVkIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlciBudW1iZXItZmlsdGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IHJlZj1cIm51bWJlckZpbHRlckNvbXBhcmF0b3JcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJudW1iZXItZmlsdGVyLWNvbXBhcmF0b3IgZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2VDb21wYXJhdG9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9eyh0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSkgPyB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZS5jb21wYXJhdG9yIDogXCJcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2V0Q29tcGFyYXRvck9wdGlvbnMoKX1cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgeyh0aGlzLnByb3BzLm9wdGlvbnMpID8gPHNlbGVjdCByZWY9XCJudW1iZXJGaWx0ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3NlbGVjdENsYXNzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZU51bWJlclNldH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXsodGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlLm51bWJlciA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5nZXROdW1iZXJPcHRpb25zKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4gOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCByZWY9XCJudW1iZXJGaWx0ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm51bWJlci1maWx0ZXItaW5wdXQgZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCBgRW50ZXIgJHt0aGlzLnByb3BzLmNvbHVtbk5hbWV9Li4uYH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZU51bWJlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9eyh0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUubnVtYmVyIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCJ9IC8+fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuTnVtYmVyRmlsdGVyLnByb3BUeXBlcyA9IHtcclxuICAgIGZpbHRlckhhbmRsZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICBvcHRpb25zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZihSZWFjdC5Qcm9wVHlwZXMubnVtYmVyKSxcclxuICAgIGRlZmF1bHRWYWx1ZTogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgICAgICBudW1iZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgICAgICAgY29tcGFyYXRvcjogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKGxlZ2FsQ29tcGFyYXRvcnMpXHJcbiAgICB9KSxcclxuICAgIGRlbGF5OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxyXG4gICAgbnVtYmVyQ29tcGFyYXRvcnM6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSkge1xyXG4gICAgICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1twcm9wTmFtZV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNvbXBhcmF0b3JJc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGVnYWxDb21wYXJhdG9ycy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlZ2FsQ29tcGFyYXRvcnNbal0gPT09IHByb3BzW3Byb3BOYW1lXVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmF0b3JJc1ZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWNvbXBhcmF0b3JJc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGBOdW1iZXIgY29tcGFyYXRvciBwcm92aWRlZCBpcyBub3Qgc3VwcG9ydGVkLiBVc2Ugb25seSAke2xlZ2FsQ29tcGFyYXRvcnN9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcGxhY2Vob2xkZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICBjb2x1bW5OYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXHJcbn07XHJcblxyXG5OdW1iZXJGaWx0ZXIuZGVmYXVsdFByb3BzID0ge1xyXG4gICAgZGVsYXk6IENvbnN0LkZJTFRFUl9ERUxBWVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVyRmlsdGVyO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9maWx0ZXJzL051bWJlci5qc1xuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc1NldCBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4uL0NvbnN0JztcclxuXHJcbmNsYXNzIFNlbGVjdEZpbHRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IocHJvcHMpIHtcclxuXHRcdHN1cGVyKHByb3BzKTtcclxuXHRcdHRoaXMuZmlsdGVyID0gdGhpcy5maWx0ZXIuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuc3RhdGUgPSB7XHJcblx0XHRcdGlzUGxhY2Vob2xkZXJTZWxlY3RlZDogKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlID09IHVuZGVmaW5lZCB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQhdGhpcy5wcm9wcy5vcHRpb25zLmhhc093blByb3BlcnR5KHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlKSlcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRmaWx0ZXIoZXZlbnQpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe2lzUGxhY2Vob2xkZXJTZWxlY3RlZDogKGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gXCJcIil9KTtcclxuXHRcdHRoaXMucHJvcHMuZmlsdGVySGFuZGxlcihldmVudC50YXJnZXQudmFsdWUsIENvbnN0LkZJTFRFUl9UWVBFLlNFTEVDVCk7XHJcblx0fVxyXG5cclxuXHRnZXRPcHRpb25zKCkge1xyXG5cdFx0bGV0IG9wdGlvblRhZ3MgPSBbXTtcclxuXHRcdGNvbnN0IG9wdGlvbnMgPSB0aGlzLnByb3BzLm9wdGlvbnM7XHJcblx0XHRvcHRpb25UYWdzLnB1c2goPG9wdGlvbiBrZXk9XCItMVwiIHZhbHVlPVwiXCI+e3RoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgYFNlbGVjdCAke3RoaXMucHJvcHMuY29sdW1uTmFtZX0uLi5gfTwvb3B0aW9uPik7XHJcblx0XHRPYmplY3Qua2V5cyhvcHRpb25zKS5tYXAoKGtleSkgPT4ge1xyXG5cdFx0XHRvcHRpb25UYWdzLnB1c2goPG9wdGlvbiBrZXk9e2tleX0gdmFsdWU9e2tleX0+e29wdGlvbnNba2V5XX08L29wdGlvbj4pO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gb3B0aW9uVGFncztcclxuXHR9XHJcblxyXG5cdGNvbXBvbmVudERpZE1vdW50KCkge1xyXG5cdFx0aWYgKHRoaXMucmVmcy5zZWxlY3RJbnB1dC52YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnByb3BzLmZpbHRlckhhbmRsZXIodGhpcy5yZWZzLnNlbGVjdElucHV0LnZhbHVlLCBDb25zdC5GSUxURVJfVFlQRS5TRUxFQ1QpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmVuZGVyKCkge1xyXG5cdFx0dmFyIHNlbGVjdENsYXNzID0gY2xhc3NTZXQoXCJmaWx0ZXJcIiwgXCJzZWxlY3QtZmlsdGVyXCIsIFwiZm9ybS1jb250cm9sXCIsXHJcblx0XHRcdFx0XHRcdFx0e1wicGxhY2Vob2xkZXItc2VsZWN0ZWRcIjogdGhpcy5zdGF0ZS5pc1BsYWNlaG9sZGVyU2VsZWN0ZWR9KTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8c2VsZWN0IHJlZj1cInNlbGVjdElucHV0XCJcclxuXHRcdFx0XHRcdGNsYXNzTmFtZT17c2VsZWN0Q2xhc3N9XHJcblx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy5maWx0ZXJ9XHJcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU9eyh0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSAhPSB1bmRlZmluZWQpID8gdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgOiBcIlwifT5cclxuXHRcdFx0XHR7dGhpcy5nZXRPcHRpb25zKCl9XHJcblx0XHRcdDwvc2VsZWN0PlxyXG5cdFx0KTtcclxuXHR9XHJcbn07XHJcblxyXG5TZWxlY3RGaWx0ZXIucHJvcFR5cGVzID0ge1xyXG5cdGZpbHRlckhhbmRsZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0b3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdHBsYWNlaG9sZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGNvbHVtbk5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEZpbHRlcjtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZmlsdGVycy9TZWxlY3QuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi4vQ29uc3QnO1xyXG5cclxuY2xhc3MgVGV4dEZpbHRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IocHJvcHMpIHtcclxuXHRcdHN1cGVyKHByb3BzKTtcclxuXHRcdHRoaXMuZmlsdGVyID0gdGhpcy5maWx0ZXIuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMudGltZW91dCA9IG51bGw7XHJcblx0fVxyXG5cclxuXHRmaWx0ZXIoZXZlbnQpIHtcclxuXHRcdGlmICh0aGlzLnRpbWVvdXQpIHtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcblx0XHR9XHJcblx0XHRjb25zdCBzZWxmID0gdGhpcztcclxuXHRcdGNvbnN0IGZpbHRlclZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG5cdFx0dGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0c2VsZi5wcm9wcy5maWx0ZXJIYW5kbGVyKGZpbHRlclZhbHVlLCBDb25zdC5GSUxURVJfVFlQRS5URVhUKTtcclxuXHRcdH0sIHNlbGYucHJvcHMuZGVsYXkpO1xyXG5cdH1cclxuXHJcblx0Y29tcG9uZW50RGlkTW91bnQoKSB7XHJcblx0XHRpZiAodGhpcy5yZWZzLmlucHV0VGV4dC5kZWZhdWx0VmFsdWUpIHtcclxuXHRcdFx0dGhpcy5wcm9wcy5maWx0ZXJIYW5kbGVyKHRoaXMucmVmcy5pbnB1dFRleHQuZGVmYXVsdFZhbHVlLCBDb25zdC5GSUxURVJfVFlQRS5URVhUKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcblx0fVxyXG5cclxuXHRyZW5kZXIoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8aW5wdXQgcmVmPVwiaW5wdXRUZXh0XCJcclxuXHRcdFx0XHQgICBjbGFzc05hbWU9XCJmaWx0ZXIgdGV4dC1maWx0ZXIgZm9ybS1jb250cm9sXCJcclxuXHRcdFx0XHQgICB0eXBlPVwidGV4dFwiXHJcblx0XHRcdFx0ICAgb25DaGFuZ2U9e3RoaXMuZmlsdGVyfVxyXG5cdFx0XHRcdCAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyIHx8IGBFbnRlciAke3RoaXMucHJvcHMuY29sdW1uTmFtZX0uLi5gfVxyXG5cdFx0XHRcdCAgIGRlZmF1bHRWYWx1ZT17KHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlKSA/IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlIDogXCJcIn0gLz5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuVGV4dEZpbHRlci5wcm9wVHlwZXMgPSB7XHJcblx0ZmlsdGVySGFuZGxlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRkZWZhdWx0VmFsdWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0ZGVsYXk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0cGxhY2Vob2xkZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0Y29sdW1uTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuVGV4dEZpbHRlci5kZWZhdWx0UHJvcHMgPSB7XHJcblx0ZGVsYXk6IENvbnN0LkZJTFRFUl9ERUxBWVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0RmlsdGVyO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9maWx0ZXJzL1RleHQuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NTZXQgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5jbGFzcyBQYWdlQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdFx0c3VwZXIocHJvcHMpO1xyXG5cdH1cclxuXHJcbiAgcGFnZUJ0bkNsaWNrKGUpe1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5wcm9wcy5jaGFuZ2VQYWdlKGUuY3VycmVudFRhcmdldC50ZXh0KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpe1xyXG4gICAgdmFyIGNsYXNzZXMgPSBjbGFzc1NldCh7XHJcbiAgICAgICAgJ2FjdGl2ZSc6IHRoaXMucHJvcHMuYWN0aXZlLFxyXG4gICAgICAgICdkaXNhYmxlZCc6IHRoaXMucHJvcHMuZGlzYWJsZSxcclxuICAgICAgICAnaGlkZGVuJzogdGhpcy5wcm9wcy5oaWRkZW5cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8bGkgY2xhc3NOYW1lPXtjbGFzc2VzfT48YSBocmVmPVwiI1wiIG9uQ2xpY2s9e3RoaXMucGFnZUJ0bkNsaWNrLmJpbmQodGhpcyl9Pnt0aGlzLnByb3BzLmNoaWxkcmVufTwvYT48L2xpPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5QYWdlQnV0dG9uLnByb3BUeXBlcyA9IHtcclxuICBjaGFuZ2VQYWdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICBhY3RpdmU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gIGRpc2FibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlQnV0dG9uO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9wYWdpbmF0aW9uL1BhZ2VCdXR0b24uanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUGFnZUJ1dHRvbiBmcm9tICcuL1BhZ2VCdXR0b24uanMnO1xyXG5pbXBvcnQgQ29uc3QgZnJvbSAnLi4vQ29uc3QnO1xyXG5cclxuY2xhc3MgUGFnaW5hdGlvbkxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICBjaGFuZ2VQYWdlKHBhZ2UpIHtcclxuICAgIGlmIChwYWdlID09IHRoaXMucHJvcHMucHJlUGFnZSkge1xyXG4gICAgICBwYWdlID0gdGhpcy5wcm9wcy5jdXJyUGFnZSAtIDEgPCAxID8gMSA6IHRoaXMucHJvcHMuY3VyclBhZ2UgLSAxO1xyXG4gICAgfSBlbHNlIGlmIChwYWdlID09IHRoaXMucHJvcHMubmV4dFBhZ2UpIHtcclxuICAgICAgcGFnZSA9IHRoaXMucHJvcHMuY3VyclBhZ2UgKyAxID4gdGhpcy50b3RhbFBhZ2VzID8gdGhpcy50b3RhbFBhZ2VzIDogdGhpcy5wcm9wcy5jdXJyUGFnZSArIDE7XHJcbiAgICB9IGVsc2UgaWYgKHBhZ2UgPT0gdGhpcy5wcm9wcy5sYXN0UGFnZSkge1xyXG4gICAgICBwYWdlID0gdGhpcy50b3RhbFBhZ2VzO1xyXG4gICAgfSBlbHNlIGlmIChwYWdlID09IHRoaXMucHJvcHMuZmlyc3RQYWdlKSB7XHJcbiAgICAgIHBhZ2UgPSAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcGFnZSA9IHBhcnNlSW50KHBhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYWdlICE9IHRoaXMucHJvcHMuY3VyclBhZ2UpIHtcclxuICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VQYWdlKHBhZ2UsIHRoaXMucHJvcHMuc2l6ZVBlclBhZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hhbmdlU2l6ZVBlclBhZ2UoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdFNpemUgPSBwYXJzZUludChlLmN1cnJlbnRUYXJnZXQudGV4dCk7XHJcbiAgICBsZXQgeyBjdXJyUGFnZSB9ID0gdGhpcy5wcm9wcztcclxuICAgIGlmIChzZWxlY3RTaXplICE9IHRoaXMucHJvcHMuc2l6ZVBlclBhZ2UpIHtcclxuICAgICAgdGhpcy50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRoaXMucHJvcHMuZGF0YVNpemUgLyBzZWxlY3RTaXplKTtcclxuICAgICAgaWYgKGN1cnJQYWdlID4gdGhpcy50b3RhbFBhZ2VzKVxyXG4gICAgICAgIGN1cnJQYWdlID0gdGhpcy50b3RhbFBhZ2VzO1xyXG5cclxuICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VQYWdlKGN1cnJQYWdlLCBzZWxlY3RTaXplKTtcclxuICAgICAgaWYodGhpcy5wcm9wcy5vblNpemVQZXJQYWdlTGlzdCl7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vblNpemVQZXJQYWdlTGlzdChzZWxlY3RTaXplKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRoaXMucHJvcHMuZGF0YVNpemUgLyB0aGlzLnByb3BzLnNpemVQZXJQYWdlKTtcclxuICAgIHZhciBwYWdlQnRucyA9IHRoaXMubWFrZVBhZ2UoKTtcclxuICAgIHZhciBwYWdlTGlzdFN0eWxlID0ge1xyXG4gICAgICBmbG9hdDogXCJyaWdodFwiLFxyXG4gICAgICBtYXJnaW5Ub3A6IFwiMHB4XCIgIC8vb3ZlcnJpZGUgdGhlIG1hcmdpbi10b3AgZGVmaW5lZCBpbiAucGFnaW5hdGlvbiBjbGFzcyBpbiBib290c3RyYXAuXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNpemVQZXJQYWdlTGlzdCA9IHRoaXMucHJvcHMuc2l6ZVBlclBhZ2VMaXN0Lm1hcCgoc2l6ZVBlclBhZ2UpID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8bGkga2V5PXtzaXplUGVyUGFnZX0gcm9sZT1cInByZXNlbnRhdGlvblwiPlxyXG4gICAgICAgICAgPGEgcm9sZT1cIm1lbnVpdGVtXCIgdGFiSW5kZXg9XCItMVwiIGhyZWY9XCIjXCIgb25DbGljaz17dGhpcy5jaGFuZ2VTaXplUGVyUGFnZS5iaW5kKHRoaXMpfT57c2l6ZVBlclBhZ2V9PC9hPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiIHN0eWxlPXt7IG1hcmdpblRvcDogMTUgfX0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGhpcy5wcm9wcy5zaXplUGVyUGFnZUxpc3QubGVuZ3RoID4gMVxyXG4gICAgICAgICAgPyA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTZcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVwiIHR5cGU9XCJidXR0b25cIiBpZD1cInBhZ2VEcm9wRG93blwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnNpemVQZXJQYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIiBcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZXRcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiIGFyaWEtbGFiZWxsZWRieT1cInBhZ2VEcm9wRG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAge3NpemVQZXJQYWdlTGlzdH1cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtNlwiPlxyXG4gICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwicGFnaW5hdGlvblwiIHN0eWxlPXtwYWdlTGlzdFN0eWxlfT5cclxuICAgICAgICAgICAgICAgICAgICB7cGFnZUJ0bnN9XHJcbiAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDogPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwicGFnaW5hdGlvblwiIHN0eWxlPXtwYWdlTGlzdFN0eWxlfT5cclxuICAgICAgICAgICAgICAgIHtwYWdlQnRuc31cclxuICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgbWFrZVBhZ2UoKSB7XHJcbiAgICB2YXIgcGFnZXMgPSB0aGlzLmdldFBhZ2VzKCk7XHJcbiAgICByZXR1cm4gcGFnZXMubWFwKGZ1bmN0aW9uIChwYWdlKSB7XHJcbiAgICAgIHZhciBpc0FjdGl2ZSA9IHBhZ2UgPT09IHRoaXMucHJvcHMuY3VyclBhZ2U7XHJcbiAgICAgIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICB2YXIgaGlkZGVuID0gZmFsc2U7XHJcbiAgICAgIGlmKHRoaXMucHJvcHMuY3VyclBhZ2UgPT0gMSAmJlxyXG4gICAgICAgIChwYWdlID09PSB0aGlzLnByb3BzLmZpcnN0UGFnZSB8fCBwYWdlID09PSB0aGlzLnByb3BzLnByZVBhZ2UpKXtcclxuICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgIGhpZGRlbiA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGhpcy5wcm9wcy5jdXJyUGFnZSA9PSB0aGlzLnRvdGFsUGFnZXMgJiZcclxuICAgICAgICAocGFnZSA9PT0gdGhpcy5wcm9wcy5uZXh0UGFnZSB8fCBwYWdlID09PSB0aGlzLnByb3BzLmxhc3RQYWdlKSl7XHJcbiAgICAgICAgICBkaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICBoaWRkZW4gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhZ2VCdXR0b24gY2hhbmdlUGFnZT17dGhpcy5jaGFuZ2VQYWdlLmJpbmQodGhpcyl9IGFjdGl2ZT17aXNBY3RpdmV9IGRpc2FibGU9e2Rpc2FibGVkfSBoaWRkZW49e2hpZGRlbn0ga2V5PXtwYWdlfT57cGFnZX08L1BhZ2VCdXR0b24+XHJcbiAgICAgIClcclxuICAgIH0sIHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZXMoKSB7XHJcbiAgICB2YXIgc3RhcnRQYWdlID0gMSwgZW5kUGFnZSA9IHRoaXMudG90YWxQYWdlcztcclxuXHJcbiAgICBzdGFydFBhZ2UgPSBNYXRoLm1heCh0aGlzLnByb3BzLmN1cnJQYWdlIC0gTWF0aC5mbG9vcih0aGlzLnByb3BzLnBhZ2luYXRpb25TaXplIC8gMiksIDEpO1xyXG4gICAgZW5kUGFnZSA9IHN0YXJ0UGFnZSArIHRoaXMucHJvcHMucGFnaW5hdGlvblNpemUgLSAxO1xyXG5cclxuICAgIGlmIChlbmRQYWdlID4gdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgIGVuZFBhZ2UgPSB0aGlzLnRvdGFsUGFnZXM7XHJcbiAgICAgIHN0YXJ0UGFnZSA9IGVuZFBhZ2UgLSB0aGlzLnByb3BzLnBhZ2luYXRpb25TaXplICsgMTtcclxuICAgIH1cclxuICAgIHZhciBwYWdlcztcclxuICAgIGlmKHN0YXJ0UGFnZSAhPSAxICYmIHRoaXMudG90YWxQYWdlcyA+IHRoaXMucHJvcHMucGFnaW5hdGlvblNpemUpIHtcclxuICAgICAgcGFnZXMgPSBbdGhpcy5wcm9wcy5maXJzdFBhZ2UsIHRoaXMucHJvcHMucHJlUGFnZV07XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMudG90YWxQYWdlcyA+IDEpIHtcclxuICAgICAgcGFnZXMgPSBbdGhpcy5wcm9wcy5wcmVQYWdlXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBwYWdlcyA9IFtdXHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gc3RhcnRQYWdlOyBpIDw9IGVuZFBhZ2U7IGkrKykge1xyXG4gICAgICBpZiAoaSA+IDApcGFnZXMucHVzaChpKTtcclxuICAgIH1cclxuICAgIGlmIChlbmRQYWdlICE9IHRoaXMudG90YWxQYWdlcykge1xyXG4gICAgICBwYWdlcy5wdXNoKHRoaXMucHJvcHMubmV4dFBhZ2UpO1xyXG4gICAgICBwYWdlcy5wdXNoKHRoaXMucHJvcHMubGFzdFBhZ2UpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnRvdGFsUGFnZXMgPiAxKXtcclxuICAgICAgcGFnZXMucHVzaCh0aGlzLnByb3BzLm5leHRQYWdlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYWdlcztcclxuICB9XHJcblxyXG4gIGdldEN1cnJlbnRQYWdlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY3VyclBhZ2U7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplUGVyUGFnZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3BzLnNpemVQZXJQYWdlO1xyXG4gIH1cclxufVxyXG5QYWdpbmF0aW9uTGlzdC5wcm9wVHlwZXMgPSB7XHJcbiAgY3VyclBhZ2U6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgc2l6ZVBlclBhZ2U6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgZGF0YVNpemU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgY2hhbmdlUGFnZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgc2l6ZVBlclBhZ2VMaXN0OiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcbiAgcGFnaW5hdGlvblNpemU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcbiAgcmVtb3RlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICBvblNpemVQZXJQYWdlTGlzdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgcHJlUGFnZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuUGFnaW5hdGlvbkxpc3QuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNpemVQZXJQYWdlOiBDb25zdC5TSVpFX1BFUl9QQUdFXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uTGlzdDtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcGFnaW5hdGlvbi9QYWdpbmF0aW9uTGlzdC5qc1xuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc1NldCBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IENvbnN0IGZyb20gJy4uL0NvbnN0JztcclxuaW1wb3J0IEVkaXRvciBmcm9tICcuLi9FZGl0b3InO1xyXG5pbXBvcnQgTm90aWZpZXIgZnJvbSAnLi4vTm90aWZpY2F0aW9uLmpzJztcclxuaW1wb3J0IFN3aXRjaCBmcm9tICdyYy1zd2l0Y2gnO1xyXG5cclxuY2xhc3MgVG9vbEJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0ZUNsZWFyID0gMDtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpc0luc2VydFJvd1RyaWdnZXI6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbGlkYXRlU3RhdGU6IG51bGwsXHJcbiAgICAgICAgICAgIHNoYWtlRWRpdG9yOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd1NlbGVjdGVkOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhclRpbWVvdXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclRpbWVvdXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZW91dGVDbGVhcikge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0ZUNsZWFyKTtcclxuICAgICAgICAgICAgdGhpcy50aW1lb3V0ZUNsZWFyID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tBbmRQYXJzZUZvcm0oKSB7XHJcbiAgICAgICAgdmFyIHRzID0gdGhpcywgbmV3T2JqID0ge30sIGlzVmFsaWQgPSB0cnVlLCB0ZW1wVmFsdWUsIHRlbXBNc2csIHZhbGlkYXRlU3RhdGUgPSB7fTtcclxuICAgICAgICB0aGlzLnByb3BzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4uYXV0b1ZhbHVlKSB7Ly93aGVuIHlvdSB3YW50IHNhbWUgYXV0byBnZW5lcmF0ZSB2YWx1ZSBhbmQgbm90IGFsbG93IGVkaXQsIGV4YW1wbGUgSUQgZmllbGRcclxuICAgICAgICAgICAgICAgIHRlbXBWYWx1ZSA9IHR5cGVvZiBjb2x1bW4uYXV0b1ZhbHVlID09ICdmdW5jdGlvbicgPyBjb2x1bW4uYXV0b1ZhbHVlKCkgOiAoJ2F1dG92YWx1ZS0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IHRoaXMucmVmc1tjb2x1bW4uZmllbGQgKyBpXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgIGRvbSAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFZhbHVlID0gZG9tLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBWYWx1ZSA9IHRydWVcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmVkaXRhYmxlICYmIGNvbHVtbi5lZGl0YWJsZS50eXBlID09ICdjaGVja2JveCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWVzID0gZG9tLnZhbHVlLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFZhbHVlID0gZG9tLmNoZWNrZWQgPyB2YWx1ZXNbMF0gOiB2YWx1ZXNbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5lZGl0YWJsZSAmJiBjb2x1bW4uZWRpdGFibGUudmFsaWRhdG9yKSB7Ly9wcm9jZXNzIHZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcE1zZyA9IGNvbHVtbi5lZGl0YWJsZS52YWxpZGF0b3IodGVtcFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wTXNnICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVTdGF0ZVtjb2x1bW4uZmllbGRdID0gdGVtcE1zZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5ld09ialtjb2x1bW4uZmllbGRdID0gdGVtcFZhbHVlO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3T2JqO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRzLmNsZWFyVGltZW91dCgpO1xyXG4gICAgICAgICAgICAvL3Nob3cgZXJyb3IgaW4gZm9ybSBhbmQgc2hha2UgaXRcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7dmFsaWRhdGVTdGF0ZTogdmFsaWRhdGVTdGF0ZSwgc2hha2VFZGl0b3I6IHRydWV9KTtcclxuICAgICAgICAgICAgLy9ub3RpZmllciBlcnJvclxyXG4gICAgICAgICAgICB0cy5yZWZzLm5vdGlmaWVyLm5vdGljZSgnZXJyb3InLCBcIkZvcm0gdmFsaWRhdGUgZXJyb3JzLCBwbGVhc2UgY2hlY2tpbmchXCIsIFwiUHJlc3NlZCBFU0MgY2FuIGNhbmNlbFwiKTtcclxuICAgICAgICAgICAgLy9jbGVhciBhbmltYXRlIGNsYXNzXHJcbiAgICAgICAgICAgIHRzLnRpbWVvdXRlQ2xlYXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRzLnNldFN0YXRlKHtzaGFrZUVkaXRvcjogZmFsc2V9KTtcclxuICAgICAgICAgICAgfSwgMzAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVNhdmVCdG5DbGljayhlKSB7XHJcbiAgICAgICAgdmFyIG5ld09iaiA9IHRoaXMuY2hlY2tBbmRQYXJzZUZvcm0oKTtcclxuICAgICAgICBpZiAoIW5ld09iaikgey8vdmFsaWRhdGUgZXJyb3JzXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkFkZFJvdyhuZXdPYmopLnRoZW4oKG1zZyk9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICcnXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvcnMubWFwKChlcnJvcik9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gKGVycm9yLm1lc3NhZ2UgKyAnLiAnKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gbXNnLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdHMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgdHMucmVmcy5ub3RpZmllci5ub3RpY2UoJ2Vycm9yJywgbWVzc2FnZSwgXCJQcmVzc2VkIEVTQyBjYW4gY2FuY2VsXCIpO1xyXG4gICAgICAgICAgICAgICAgdHMuY2xlYXJUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAvL3NoYWtlIGZvcm0gYW5kIGhhY2sgcHJldmVudCBtb2RhbCBoaWRlXHJcbiAgICAgICAgICAgICAgICB0cy5zZXRTdGF0ZSh7c2hha2VFZGl0b3I6IHRydWUsIHZhbGlkYXRlU3RhdGU6IFwidGhpcyBpcyBoYWNrIGZvciBwcmV2ZW50IGJvb3RzdHJhcCBtb2RhbCBoaWRlXCJ9KTtcclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgYW5pbWF0ZSBjbGFzc1xyXG4gICAgICAgICAgICAgICAgdHMudGltZW91dGVDbGVhciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRzLnNldFN0YXRlKHtzaGFrZUVkaXRvcjogZmFsc2V9KTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL3Jlc2V0IHN0YXRlIGFuZCBoaWRlIG1vZGFsIGhpZGVcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlU3RhdGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgc2hha2VFZGl0b3I6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgXCJtb2RhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtW2ldLmNsaWNrKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vcmVzZXQgZm9ybVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZzLmZvcm0ucmVzZXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVTaG93T25seVRvZ2dsZSA9IGUgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93U2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLnNob3dTZWxlY3RlZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucHJvcHMub25TaG93T25seVNlbGVjdGVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlRHJvcFJvd0J0bkNsaWNrKGUpIHtcclxuICAgICAgICB0aGlzLnByb3BzLm9uRHJvcFJvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNsb3NlQnRuKGUpIHtcclxuICAgICAgICB0aGlzLnJlZnMud2FybmluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlS2V5VXAoZSkge1xyXG4gICAgICAgIHRoaXMucHJvcHMub25TZWFyY2goZS5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVFeHBvcnRDU1YoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkV4cG9ydENTVigpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNsZWFyQnRuQ2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZWZzLnNlYWNoSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLnByb3BzLm9uU2VhcmNoKCcnKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdmFyIG1vZGFsQ2xhc3NOYW1lID0gXCJicy10YWJsZS1tb2RhbC1zbVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgdmFyIGluc2VydEJ0biA9IHRoaXMucHJvcHMuZW5hYmxlSW5zZXJ0ID9cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5wcm9wcy5vbkFkZFJvd0JlZ2lufSBjbGFzc05hbWU9XCJidG4gYnRuLWluZm8gcmVhY3QtYnMtdGFibGUtYWRkLWJ0blwiXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XCJtb2RhbFwiIGRhdGEtdGFyZ2V0PXsnLicrbW9kYWxDbGFzc05hbWV9PlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzXCI+PC9pPiBOZXc8L2J1dHRvbj4gOiBudWxsO1xyXG5cclxuICAgICAgICB2YXIgZGVsZXRlQnRuID0gdGhpcy5wcm9wcy5lbmFibGVEZWxldGUgP1xyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgcmVhY3QtYnMtdGFibGUtZGVsLWJ0blwiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9XCJyaWdodFwiIHRpdGxlPVwiRHJvcCBzZWxlY3RlZCByb3dcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRHJvcFJvd0J0bkNsaWNrLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmFzaFwiPjwvaT4gRGVsZXRlXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPiA6IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBzZWFyY2hUZXh0SW5wdXQgPSB0aGlzLnJlbmRlclNlYXJjaFBhbmVsKCk7XHJcblxyXG4gICAgICAgIHZhciBzaG93U2VsZWN0ZWRPbmx5QnRuID0gdGhpcy5wcm9wcy5lbmFibGVTaG93T25seVNlbGVjdGVkID9cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5oYW5kbGVTaG93T25seVRvZ2dsZS5iaW5kKHRoaXMpfSBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwiYnV0dG9uXCIgYXJpYS1wcmVzc2VkPVwiZmFsc2VcIj5cclxuICAgICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5zaG93U2VsZWN0ZWQgPyBDb25zdC5TSE9XX0FMTCA6IENvbnN0LlNIT1dfT05MWV9TRUxFQ1QgfVxyXG4gICAgICAgICAgICA8L2J1dHRvbj4gOiBudWxsO1xyXG5cclxuICAgICAgICB2YXIgbW9kYWwgPSB0aGlzLnByb3BzLmVuYWJsZUluc2VydCA/IHRoaXMucmVuZGVySW5zZXJ0Um93TW9kYWwobW9kYWxDbGFzc05hbWUpIDogbnVsbDtcclxuICAgICAgICB2YXIgd2FybmluZ1N0eWxlID0ge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcclxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGV4cG9ydENTViA9IHRoaXMucHJvcHMuZW5hYmxlRXhwb3J0Q1NWID9cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzXCIgb25DbGljaz17dGhpcy5oYW5kbGVFeHBvcnRDU1YuYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWV4cG9ydFwiPjwvaT4gRXhwb3J0IHRvIENTVjwvYnV0dG9uPiA6IG51bGw7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC14cy0xMiBjb2wtc20tNiBjb2wtbWQtNiBjb2wtbGctOFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC1zbVwiIHJvbGU9XCJncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ZXhwb3J0Q1NWfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aW5zZXJ0QnRufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ZGVsZXRlQnRufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7c2hvd1NlbGVjdGVkT25seUJ0bn1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wteHMtMTIgY29sLXNtLTYgY29sLW1kLTYgY29sLWxnLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7c2VhcmNoVGV4dElucHV0fVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8Tm90aWZpZXIgcmVmPVwibm90aWZpZXJcIj48L05vdGlmaWVyPlxyXG4gICAgICAgICAgICAgICAge21vZGFsfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyU2VhcmNoUGFuZWwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZW5hYmxlU2VhcmNoKSB7XHJcbiAgICAgICAgICAgIGxldCBjbGFzc05hbWVzID0gJ2Zvcm0tZ3JvdXAgZm9ybS1ncm91cC1zbSc7XHJcbiAgICAgICAgICAgIGxldCBjbGVhckJ0biA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNsZWFyU2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhckJ0biA9IChcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1idG5cIj5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0XCJcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17IHRoaXMuaGFuZGxlQ2xlYXJCdG5DbGljayB9PkNsZWFyXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMgPSAnZm9ybS1ncm91cCBmb3JtLWdyb3VwLXNtIGlucHV0LWdyb3VwIGlucHV0LWdyb3VwLXNtJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzfT5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgcmVmPSdzZWFjaElucHV0JyBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5zZWFyY2hQbGFjZWhvbGRlcj90aGlzLnByb3BzLnNlYXJjaFBsYWNlaG9sZGVyOidTZWFyY2gnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBvbktleVVwPXt0aGlzLmhhbmRsZUtleVVwLmJpbmQodGhpcyl9Lz5cclxuICAgICAgICAgICAgICAgICAgICB7IGNsZWFyQnRuIH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJJbnNlcnRSb3dNb2RhbChtb2RhbENsYXNzTmFtZSkge1xyXG4gICAgICAgIHZhciB2YWxpZGF0ZVN0YXRlID0gdGhpcy5zdGF0ZS52YWxpZGF0ZVN0YXRlIHx8IHt9O1xyXG4gICAgICAgIHZhciBpbnB1dEZpZWxkID0gdGhpcy5wcm9wcy5jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBlZGl0YWJsZSA9IGNvbHVtbi5lZGl0YWJsZSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IGNvbHVtbi5mb3JtYXQsXHJcbiAgICAgICAgICAgICAgICBhdHRyID0ge3JlZjogY29sdW1uLmZpZWxkICsgaSwgcGxhY2Vob2xkZXI6IGVkaXRhYmxlLnBsYWNlaG9sZGVyID8gZWRpdGFibGUucGxhY2Vob2xkZXIgOiBjb2x1bW4ubmFtZX07XHJcblxyXG4gICAgICAgICAgICBpZiAoY29sdW1uLmF1dG9WYWx1ZSkgey8vd2hlbiB5b3Ugd2FudCBzYW1lIGF1dG8gZ2VuZXJhdGUgdmFsdWUgYW5kIG5vdCBhbGxvdyBlZGl0LCBleGFtcGxlIElEIGZpZWxkXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZXJyb3IgPSB2YWxpZGF0ZVN0YXRlW2NvbHVtbi5maWVsZF0gPyAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoZWxwLWJsb2NrIGJnLWRhbmdlclwiPnt2YWxpZGF0ZVN0YXRlW2NvbHVtbi5maWVsZF19PC9zcGFuPikgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gbGV0IGVkaXRvciA9IEVkaXRvcihlZGl0YWJsZSxhdHRyLGZvcm1hdCk7XHJcbiAgICAgICAgICAgIC8vIGlmKGVkaXRvci5wcm9wcy50eXBlICYmIGVkaXRvci5wcm9wcy50eXBlID09ICdjaGVja2JveCcpe1xyXG4gICAgICAgICAgICBsZXQgc3R5bGUgPSB7ZGlzcGxheTogY29sdW1uLmhpZGRlbkluUG9wdXAgPyAnbm9uZScgOiAnYmxvY2snfVxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCIga2V5PXtjb2x1bW4uZmllbGR9IHN0eWxlPXtzdHlsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPntjb2x1bW4ubmFtZX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIHtFZGl0b3IoZWRpdGFibGUsIGF0dHIsIGZvcm1hdCwgJycpfVxyXG4gICAgICAgICAgICAgICAgICAgIHtlcnJvcn1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBtb2RhbENsYXNzID0gY2xhc3NTZXQoXCJtb2RhbFwiLCBcImZhZGVcIiwgbW9kYWxDbGFzc05hbWUsIHtcclxuICAgICAgICAgICAgJ2luJzogdGhpcy5zdGF0ZS5zaGFrZUVkaXRvciB8fCB0aGlzLnN0YXRlLnZhbGlkYXRlU3RhdGUvL2hhY2sgcHJldmVudCBib290c3RyYXAgbW9kYWwgaGlkZSBieSByZVJlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBkaWFsb2dDbGFzcyA9IGNsYXNzU2V0KFwibW9kYWwtZGlhbG9nXCIsIFwibW9kYWwtc21cIiwge1xyXG4gICAgICAgICAgICBcImFuaW1hdGVkXCI6IHRoaXMuc3RhdGUuc2hha2VFZGl0b3IsXHJcbiAgICAgICAgICAgIFwic2hha2VcIjogdGhpcy5zdGF0ZS5zaGFrZUVkaXRvclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgcmVmPVwibW9kYWxcIiBjbGFzc05hbWU9e21vZGFsQ2xhc3N9IHRhYkluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZGlhbG9nQ2xhc3N9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJtb2RhbC10aXRsZVwiPk5ldyBSZWNvcmQ8L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSByZWY9XCJmb3JtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lucHV0RmllbGR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0XCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzXCIgb25DbGljaz17dGhpcy5oYW5kbGVTYXZlQnRuQ2xpY2suYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5Ub29sQmFyLnByb3BUeXBlcyA9IHtcclxuICAgIG9uQWRkUm93OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuICAgIG9uRHJvcFJvdzogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBvblNob3dPbmx5U2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgZW5hYmxlSW5zZXJ0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuICAgIGVuYWJsZURlbGV0ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBlbmFibGVTZWFyY2g6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gICAgZW5hYmxlU2hvd09ubHlTZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBjb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIGNsZWFyU2VhcmNoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxyXG59O1xyXG5cclxuVG9vbEJhci5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBlbmFibGVJbnNlcnQ6IGZhbHNlLFxyXG4gICAgZW5hYmxlRGVsZXRlOiBmYWxzZSxcclxuICAgIGVuYWJsZVNlYXJjaDogZmFsc2UsXHJcbiAgICBlbmFibGVTaG93T25seVNlbGVjdGVkOiBmYWxzZSxcclxuICAgIGNsZWFyU2VhcmNoOiBmYWxzZVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCYXI7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3Rvb2xiYXIvVG9vbEJhci5qc1xuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucmMtc3dpdGNoe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDo0NHB4O2hlaWdodDoyMnB4O2xpbmUtaGVpZ2h0OjIwcHg7dmVydGljYWwtYWxpZ246bWlkZGxlO2JvcmRlci1yYWRpdXM6MjBweCAyMHB4O2JvcmRlcjoxcHggc29saWQgI2NjYztiYWNrZ3JvdW5kLWNvbG9yOiNjY2M7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjphbGwgLjNzIGN1YmljLWJlemllciguMzUsMCwuMjUsMSl9LnJjLXN3aXRjaC1pbm5lcntjb2xvcjojZmZmO2ZvbnQtc2l6ZToxMnB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MjRweH0ucmMtc3dpdGNoOmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7bGVmdDoycHg7dG9wOjFweDtib3JkZXItcmFkaXVzOjUwJSA1MCU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbnRlbnQ6XFxcIiBcXFwiO2N1cnNvcjpwb2ludGVyO2JveC1zaGFkb3c6MCAycHggNXB4IHJnYmEoMCwwLDAsLjI2KTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNpdGlvbjpsZWZ0IC4zcyBjdWJpYy1iZXppZXIoLjM1LDAsLjI1LDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjM1LDAsLjI1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4zNSwwLC4yNSwxKTstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouM3M7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJjU3dpdGNoT2ZmO2FuaW1hdGlvbi1uYW1lOnJjU3dpdGNoT2ZmfS5yYy1zd2l0Y2g6aG92ZXI6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKTstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJjU3dpdGNoT247YW5pbWF0aW9uLW5hbWU6cmNTd2l0Y2hPbn0ucmMtc3dpdGNoLWNoZWNrZWR7Ym9yZGVyOjFweCBzb2xpZCAjODdkMDY4O2JhY2tncm91bmQtY29sb3I6Izg3ZDA2OH0ucmMtc3dpdGNoLWNoZWNrZWQgLnJjLXN3aXRjaC1pbm5lcntsZWZ0OjZweH0ucmMtc3dpdGNoLWNoZWNrZWQ6YWZ0ZXJ7bGVmdDoyMnB4fS5yYy1zd2l0Y2gtZGlzYWJsZWR7Y3Vyc29yOm5vLWRyb3A7YmFja2dyb3VuZDojY2NjO2JvcmRlci1jb2xvcjojY2NjfS5yYy1zd2l0Y2gtZGlzYWJsZWQ6YWZ0ZXJ7YmFja2dyb3VuZDojOWU5ZTllOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6bm9uZTthbmltYXRpb24tbmFtZTpub25lO2N1cnNvcjpuby1kcm9wfS5yYy1zd2l0Y2gtZGlzYWJsZWQ6aG92ZXI6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6bm9uZTthbmltYXRpb24tbmFtZTpub25lfS5yYy1zd2l0Y2gtbGFiZWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7bGluZS1oZWlnaHQ6MjBweDtmb250LXNpemU6MTRweDtwYWRkaW5nLWxlZnQ6MTBweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7d2hpdGUtc3BhY2U6bm9ybWFsO3BvaW50ZXItZXZlbnRzOm5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0Oy1tb3otdXNlci1zZWxlY3Q6dGV4dDstbXMtdXNlci1zZWxlY3Q6dGV4dDt1c2VyLXNlbGVjdDp0ZXh0fUAtd2Via2l0LWtleWZyYW1lcyByY1N3aXRjaE9uezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4yNSk7dHJhbnNmb3JtOnNjYWxlKDEuMjUpfXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSk7dHJhbnNmb3JtOnNjYWxlKDEuMSl9fUBrZXlmcmFtZXMgcmNTd2l0Y2hPbnswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMjUpO3RyYW5zZm9ybTpzY2FsZSgxLjI1KX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgcmNTd2l0Y2hPZmZ7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fUBrZXlmcmFtZXMgcmNTd2l0Y2hPZmZ7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L3JjLXN3aXRjaC9hc3NldHMvaW5kZXguY3NzXG4gKiogbW9kdWxlIGlkID0gMzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHJcblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xyXG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXHJcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcclxuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59O1xyXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBTd2l0Y2ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU3dpdGNoJyxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgcHJlZml4Q2xzOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGVja2VkQ2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5hbnksXG4gICAgdW5DaGVja2VkQ2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5hbnksXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVmaXhDbHM6ICdyYy1zd2l0Y2gnLFxuICAgICAgc3R5bGU6IHt9LFxuICAgICAgY2hlY2tlZENoaWxkcmVuOiBudWxsLFxuICAgICAgdW5DaGVja2VkQ2hpbGRyZW46IG51bGwsXG4gICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgZGVmYXVsdENoZWNrZWQ6IGZhbHNlLFxuICAgICAgb25DaGFuZ2U6IG5vb3BcbiAgICB9O1xuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjaGVja2VkID0gZmFsc2U7XG4gICAgaWYgKCdjaGVja2VkJyBpbiBwcm9wcykge1xuICAgICAgY2hlY2tlZCA9ICEhcHJvcHMuY2hlY2tlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tlZCA9ICEhcHJvcHMuZGVmYXVsdENoZWNrZWQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjaGVja2VkOiBjaGVja2VkXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAoJ2NoZWNrZWQnIGluIG5leHRQcm9wcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNoZWNrZWQ6ICEhbmV4dFByb3BzLmNoZWNrZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgdmFyIGNoZWNrZWQgPSAhdGhpcy5zdGF0ZS5jaGVja2VkO1xuICAgIGlmICghKCdjaGVja2VkJyBpbiB0aGlzLnByb3BzKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNoZWNrZWQ6IGNoZWNrZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNoZWNrZWQpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcbiAgICB2YXIgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscztcbiAgICB2YXIgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQ7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciBjaGVja2VkQ2hpbGRyZW4gPSBfcHJvcHMuY2hlY2tlZENoaWxkcmVuO1xuICAgIHZhciB1bkNoZWNrZWRDaGlsZHJlbiA9IF9wcm9wcy51bkNoZWNrZWRDaGlsZHJlbjtcblxuICAgIHZhciBjaGVja2VkID0gdGhpcy5zdGF0ZS5jaGVja2VkO1xuICAgIHZhciBzd2l0Y2hDbGFzc05hbWUgPSBjbGFzc05hbWVzKChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIGNsYXNzTmFtZSwgISFjbGFzc05hbWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscywgdHJ1ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1jaGVja2VkJywgY2hlY2tlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1kaXNhYmxlZCcsIGRpc2FibGVkKSwgX2NsYXNzTmFtZXMpKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgY2xhc3NOYW1lOiBzd2l0Y2hDbGFzc05hbWUsXG4gICAgICAgIG9uQ2xpY2s6IGRpc2FibGVkID8gbm9vcCA6IHRoaXMudG9nZ2xlLFxuICAgICAgICBzdHlsZTogc3R5bGUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctaW5uZXInIH0sXG4gICAgICAgIGNoZWNrZWQgPyBjaGVja2VkQ2hpbGRyZW4gOiB1bkNoZWNrZWRDaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN3aXRjaDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYy1zd2l0Y2gvbGliL1N3aXRjaC5qc1xuICoqIG1vZHVsZSBpZCA9IDM3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX1NlbGVjdCA9IHJlcXVpcmUoJy4vU2VsZWN0Jyk7XG5cbnZhciBfU2VsZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdCk7XG5cbnZhciBfdXRpbHNTdHJpcERpYWNyaXRpY3MgPSByZXF1aXJlKCcuL3V0aWxzL3N0cmlwRGlhY3JpdGljcycpO1xuXG52YXIgX3V0aWxzU3RyaXBEaWFjcml0aWNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWxzU3RyaXBEaWFjcml0aWNzKTtcblxudmFyIHJlcXVlc3RJZCA9IDA7XG5cbmZ1bmN0aW9uIGluaXRDYWNoZShjYWNoZSkge1xuXHRpZiAoY2FjaGUgJiYgdHlwZW9mIGNhY2hlICE9PSAnb2JqZWN0Jykge1xuXHRcdGNhY2hlID0ge307XG5cdH1cblx0cmV0dXJuIGNhY2hlID8gY2FjaGUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDYWNoZShjYWNoZSwgaW5wdXQsIGRhdGEpIHtcblx0aWYgKCFjYWNoZSkgcmV0dXJuO1xuXHRjYWNoZVtpbnB1dF0gPSBkYXRhO1xufVxuXG5mdW5jdGlvbiBnZXRGcm9tQ2FjaGUoY2FjaGUsIGlucHV0KSB7XG5cdGlmICghY2FjaGUpIHJldHVybjtcblx0Zm9yICh2YXIgaSA9IGlucHV0Lmxlbmd0aDsgaSA+PSAwOyAtLWkpIHtcblx0XHR2YXIgY2FjaGVLZXkgPSBpbnB1dC5zbGljZSgwLCBpKTtcblx0XHRpZiAoY2FjaGVbY2FjaGVLZXldICYmIChpbnB1dCA9PT0gY2FjaGVLZXkgfHwgY2FjaGVbY2FjaGVLZXldLmNvbXBsZXRlKSkge1xuXHRcdFx0cmV0dXJuIGNhY2hlW2NhY2hlS2V5XTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gdGhlblByb21pc2UocHJvbWlzZSwgY2FsbGJhY2spIHtcblx0aWYgKCFwcm9taXNlIHx8IHR5cGVvZiBwcm9taXNlLnRoZW4gIT09ICdmdW5jdGlvbicpIHJldHVybjtcblx0cmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuXHR9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0Y2FsbGJhY2soZXJyKTtcblx0fSk7XG59XG5cbnZhciBzdHJpbmdPck5vZGUgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9uZU9mVHlwZShbX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsIF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubm9kZV0pO1xuXG52YXIgQXN5bmMgPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0FzeW5jJyxcblxuXHRwcm9wVHlwZXM6IHtcblx0XHRjYWNoZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5hbnksIC8vIG9iamVjdCB0byB1c2UgdG8gY2FjaGUgcmVzdWx0cywgY2FuIGJlIG51bGwgdG8gZGlzYWJsZSBjYWNoZVxuXHRcdGlnbm9yZUFjY2VudHM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBzdHJpcCBkaWFjcml0aWNzIHdoZW4gZmlsdGVyaW5nIChzaGFyZWQgd2l0aCBTZWxlY3QpXG5cdFx0aWdub3JlQ2FzZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRvIHBlcmZvcm0gY2FzZS1pbnNlbnNpdGl2ZSBmaWx0ZXJpbmcgKHNoYXJlZCB3aXRoIFNlbGVjdClcblx0XHRpc0xvYWRpbmc6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gb3ZlcnJpZGVzIHRoZSBpc0xvYWRpbmcgc3RhdGUgd2hlbiBzZXQgdG8gdHJ1ZVxuXHRcdGxvYWRPcHRpb25zOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwgLy8gZnVuY3Rpb24gdG8gY2FsbCB0byBsb2FkIG9wdGlvbnMgYXN5bmNocm9ub3VzbHlcblx0XHRsb2FkaW5nUGxhY2Vob2xkZXI6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyByZXBsYWNlcyB0aGUgcGxhY2Vob2xkZXIgd2hpbGUgb3B0aW9ucyBhcmUgbG9hZGluZ1xuXHRcdG1pbmltdW1JbnB1dDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIsIC8vIHRoZSBtaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgdHJpZ2dlciBsb2FkT3B0aW9uc1xuXHRcdG5vUmVzdWx0c1RleHQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBwbGFjZWhvbGRlciBkaXNwbGF5ZWQgd2hlbiB0aGVyZSBhcmUgbm8gbWF0Y2hpbmcgc2VhcmNoIHJlc3VsdHMgKHNoYXJlZCB3aXRoIFNlbGVjdClcblx0XHRwbGFjZWhvbGRlcjogc3RyaW5nT3JOb2RlLCAvLyBmaWVsZCBwbGFjZWhvbGRlciwgZGlzcGxheWVkIHdoZW4gdGhlcmUncyBubyB2YWx1ZSAoc2hhcmVkIHdpdGggU2VsZWN0KVxuXHRcdHNlYXJjaFByb21wdFRleHQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBsYWJlbCB0byBwcm9tcHQgZm9yIHNlYXJjaCBpbnB1dFxuXHRcdHNlYXJjaGluZ1RleHQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nIH0sXG5cdC8vIG1lc3NhZ2UgdG8gZGlzcGxheSB3aGlsZSBvcHRpb25zIGFyZSBsb2FkaW5nXG5cdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjYWNoZTogdHJ1ZSxcblx0XHRcdGlnbm9yZUFjY2VudHM6IHRydWUsXG5cdFx0XHRpZ25vcmVDYXNlOiB0cnVlLFxuXHRcdFx0bG9hZGluZ1BsYWNlaG9sZGVyOiAnTG9hZGluZy4uLicsXG5cdFx0XHRtaW5pbXVtSW5wdXQ6IDAsXG5cdFx0XHRzZWFyY2hpbmdUZXh0OiAnU2VhcmNoaW5nLi4uJyxcblx0XHRcdHNlYXJjaFByb21wdFRleHQ6ICdUeXBlIHRvIHNlYXJjaCdcblx0XHR9O1xuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2FjaGU6IGluaXRDYWNoZSh0aGlzLnByb3BzLmNhY2hlKSxcblx0XHRcdGlzTG9hZGluZzogZmFsc2UsXG5cdFx0XHRvcHRpb25zOiBbXVxuXHRcdH07XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuXHRcdHRoaXMuX2xhc3RJbnB1dCA9ICcnO1xuXHR9LFxuXHRjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0dGhpcy5sb2FkT3B0aW9ucygnJyk7XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG5cdFx0aWYgKG5leHRQcm9wcy5jYWNoZSAhPT0gdGhpcy5wcm9wcy5jYWNoZSkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGNhY2hlOiBpbml0Q2FjaGUobmV4dFByb3BzLmNhY2hlKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXHRmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG5cdFx0dGhpcy5yZWZzLnNlbGVjdC5mb2N1cygpO1xuXHR9LFxuXHRyZXNldFN0YXRlOiBmdW5jdGlvbiByZXNldFN0YXRlKCkge1xuXHRcdHRoaXMuX2N1cnJlbnRSZXF1ZXN0SWQgPSAtMTtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzTG9hZGluZzogZmFsc2UsXG5cdFx0XHRvcHRpb25zOiBbXVxuXHRcdH0pO1xuXHR9LFxuXHRnZXRSZXNwb25zZUhhbmRsZXI6IGZ1bmN0aW9uIGdldFJlc3BvbnNlSGFuZGxlcihpbnB1dCkge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHR2YXIgX3JlcXVlc3RJZCA9IHRoaXMuX2N1cnJlbnRSZXF1ZXN0SWQgPSByZXF1ZXN0SWQrKztcblx0XHRyZXR1cm4gZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHRcdFx0aWYgKGVycikgdGhyb3cgZXJyO1xuXHRcdFx0aWYgKCFfdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuO1xuXHRcdFx0dXBkYXRlQ2FjaGUoX3RoaXMuc3RhdGUuY2FjaGUsIGlucHV0LCBkYXRhKTtcblx0XHRcdGlmIChfcmVxdWVzdElkICE9PSBfdGhpcy5fY3VycmVudFJlcXVlc3RJZCkgcmV0dXJuO1xuXHRcdFx0X3RoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRvcHRpb25zOiBkYXRhICYmIGRhdGEub3B0aW9ucyB8fCBbXVxuXHRcdFx0fSk7XG5cdFx0fTtcblx0fSxcblx0bG9hZE9wdGlvbnM6IGZ1bmN0aW9uIGxvYWRPcHRpb25zKGlucHV0KSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuaWdub3JlQWNjZW50cykgaW5wdXQgPSAoMCwgX3V0aWxzU3RyaXBEaWFjcml0aWNzMlsnZGVmYXVsdCddKShpbnB1dCk7XG5cdFx0aWYgKHRoaXMucHJvcHMuaWdub3JlQ2FzZSkgaW5wdXQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuXHRcdHRoaXMuX2xhc3RJbnB1dCA9IGlucHV0O1xuXHRcdGlmIChpbnB1dC5sZW5ndGggPCB0aGlzLnByb3BzLm1pbmltdW1JbnB1dCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRTdGF0ZSgpO1xuXHRcdH1cblx0XHR2YXIgY2FjaGVSZXN1bHQgPSBnZXRGcm9tQ2FjaGUodGhpcy5zdGF0ZS5jYWNoZSwgaW5wdXQpO1xuXHRcdGlmIChjYWNoZVJlc3VsdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRvcHRpb25zOiBjYWNoZVJlc3VsdC5vcHRpb25zXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc0xvYWRpbmc6IHRydWVcblx0XHR9KTtcblx0XHR2YXIgcmVzcG9uc2VIYW5kbGVyID0gdGhpcy5nZXRSZXNwb25zZUhhbmRsZXIoaW5wdXQpO1xuXHRcdHJldHVybiB0aGVuUHJvbWlzZSh0aGlzLnByb3BzLmxvYWRPcHRpb25zKGlucHV0LCByZXNwb25zZUhhbmRsZXIpLCByZXNwb25zZUhhbmRsZXIpO1xuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHR2YXIgbm9SZXN1bHRzVGV4dCA9IHRoaXMucHJvcHMubm9SZXN1bHRzVGV4dDtcblx0XHR2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZTtcblx0XHR2YXIgaXNMb2FkaW5nID0gX3N0YXRlLmlzTG9hZGluZztcblx0XHR2YXIgb3B0aW9ucyA9IF9zdGF0ZS5vcHRpb25zO1xuXG5cdFx0aWYgKHRoaXMucHJvcHMuaXNMb2FkaW5nKSBpc0xvYWRpbmcgPSB0cnVlO1xuXHRcdHZhciBwbGFjZWhvbGRlciA9IGlzTG9hZGluZyA/IHRoaXMucHJvcHMubG9hZGluZ1BsYWNlaG9sZGVyIDogdGhpcy5wcm9wcy5wbGFjZWhvbGRlcjtcblx0XHRpZiAoIW9wdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRpZiAodGhpcy5fbGFzdElucHV0Lmxlbmd0aCA8IHRoaXMucHJvcHMubWluaW11bUlucHV0KSBub1Jlc3VsdHNUZXh0ID0gdGhpcy5wcm9wcy5zZWFyY2hQcm9tcHRUZXh0O1xuXHRcdFx0aWYgKGlzTG9hZGluZykgbm9SZXN1bHRzVGV4dCA9IHRoaXMucHJvcHMuc2VhcmNoaW5nVGV4dDtcblx0XHR9XG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9TZWxlY3QyWydkZWZhdWx0J10sIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG5cdFx0XHRyZWY6ICdzZWxlY3QnLFxuXHRcdFx0aXNMb2FkaW5nOiBpc0xvYWRpbmcsXG5cdFx0XHRub1Jlc3VsdHNUZXh0OiBub1Jlc3VsdHNUZXh0LFxuXHRcdFx0b25JbnB1dENoYW5nZTogdGhpcy5sb2FkT3B0aW9ucyxcblx0XHRcdG9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXJcblx0XHR9KSk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzeW5jO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LXNlbGVjdC9saWIvQXN5bmMuanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBPcHRpb24gPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ09wdGlvbicsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hpbGRyZW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubm9kZSxcblx0XHRjbGFzc05hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgKGJhc2VkIG9uIG1vdXNlIHBvc2l0aW9uKVxuXHRcdGlzRGlzYWJsZWQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuYm9vbCwgLy8gdGhlIG9wdGlvbiBpcyBkaXNhYmxlZFxuXHRcdGlzRm9jdXNlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyB0aGUgb3B0aW9uIGlzIGZvY3VzZWRcblx0XHRpc1NlbGVjdGVkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmJvb2wsIC8vIHRoZSBvcHRpb24gaXMgc2VsZWN0ZWRcblx0XHRvbkZvY3VzOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgbW91c2VFbnRlciBvbiBvcHRpb24gZWxlbWVudFxuXHRcdG9uU2VsZWN0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgY2xpY2sgb24gb3B0aW9uIGVsZW1lbnRcblx0XHRvblVuZm9jdXM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBtb3VzZUxlYXZlIG9uIG9wdGlvbiBlbGVtZW50XG5cdFx0b3B0aW9uOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkIH0sXG5cdC8vIG9iamVjdCB0aGF0IGlzIGJhc2UgZm9yIHRoYXQgb3B0aW9uXG5cdGJsb2NrRXZlbnQ6IGZ1bmN0aW9uIGJsb2NrRXZlbnQoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0EnIHx8ICEoJ2hyZWYnIGluIGV2ZW50LnRhcmdldCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGV2ZW50LnRhcmdldC50YXJnZXQpIHtcblx0XHRcdHdpbmRvdy5vcGVuKGV2ZW50LnRhcmdldC5ocmVmLCBldmVudC50YXJnZXQudGFyZ2V0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSBldmVudC50YXJnZXQuaHJlZjtcblx0XHR9XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMucHJvcHMub25TZWxlY3QodGhpcy5wcm9wcy5vcHRpb24sIGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKGV2ZW50KSB7XG5cdFx0dGhpcy5vbkZvY3VzKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVNb3VzZU1vdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuXHRcdHRoaXMub25Gb2N1cyhldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0Ly8gd2UgZG9uJ3Qgd2FudCB0byBmaXJlIHRoZSBjbGljayBldmVudCAoYmVjYXVzZSB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHNjcm9sbClcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0dGhpcy5oYW5kbGVNb3VzZURvd24oZXZlbnQpO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIG5vdCBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuXHR9LFxuXG5cdG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNGb2N1c2VkKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uRm9jdXModGhpcy5wcm9wcy5vcHRpb24sIGV2ZW50KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBvcHRpb24gPSB0aGlzLnByb3BzLm9wdGlvbjtcblxuXHRcdHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKHRoaXMucHJvcHMuY2xhc3NOYW1lLCBvcHRpb24uY2xhc3NOYW1lKTtcblxuXHRcdHJldHVybiBvcHRpb24uZGlzYWJsZWQgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdkaXYnLFxuXHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdFx0b25Nb3VzZURvd246IHRoaXMuYmxvY2tFdmVudCxcblx0XHRcdFx0b25DbGljazogdGhpcy5ibG9ja0V2ZW50IH0sXG5cdFx0XHR0aGlzLnByb3BzLmNoaWxkcmVuXG5cdFx0KSA6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXHRcdFx0XHRzdHlsZTogb3B0aW9uLnN0eWxlLFxuXHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG5cdFx0XHRcdG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVNb3VzZUVudGVyLFxuXHRcdFx0XHRvbk1vdXNlTW92ZTogdGhpcy5oYW5kbGVNb3VzZU1vdmUsXG5cdFx0XHRcdG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuXHRcdFx0XHRvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUsXG5cdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG5cdFx0XHRcdHRpdGxlOiBvcHRpb24udGl0bGUgfSxcblx0XHRcdHRoaXMucHJvcHMuY2hpbGRyZW5cblx0XHQpO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcHRpb247XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3Qtc2VsZWN0L2xpYi9PcHRpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBWYWx1ZSA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVDbGFzcyh7XG5cblx0ZGlzcGxheU5hbWU6ICdWYWx1ZScsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hpbGRyZW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubm9kZSxcblx0XHRkaXNhYmxlZDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5ib29sLCAvLyBkaXNhYmxlZCBwcm9wIHBhc3NlZCB0byBSZWFjdFNlbGVjdFxuXHRcdG9uQ2xpY2s6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBjbGljayBvbiB2YWx1ZSBsYWJlbFxuXHRcdG9uUmVtb3ZlOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgcmVtb3ZhbCBvZiB0aGUgdmFsdWVcblx0XHR2YWx1ZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCB9LFxuXG5cdC8vIHRoZSBvcHRpb24gb2JqZWN0IGZvciB0aGlzIHZhbHVlXG5cdGhhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLnZhbHVlLCBldmVudCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLnByb3BzLnZhbHVlLmhyZWYpIHtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblxuXHRvblJlbW92ZTogZnVuY3Rpb24gb25SZW1vdmUoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMucHJvcHMub25SZW1vdmUodGhpcy5wcm9wcy52YWx1ZSk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hFbmRSZW1vdmU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kUmVtb3ZlKGV2ZW50KSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0Ly8gd2UgZG9uJ3Qgd2FudCB0byBmaXJlIHRoZSBjbGljayBldmVudCAoYmVjYXVzZSB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHNjcm9sbClcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0Ly8gRmlyZSB0aGUgbW91c2UgZXZlbnRzXG5cdFx0dGhpcy5vblJlbW92ZShldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hNb3ZlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZFxuXHRcdHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgbm90IGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cdH0sXG5cblx0cmVuZGVyUmVtb3ZlSWNvbjogZnVuY3Rpb24gcmVuZGVyUmVtb3ZlSWNvbigpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCAhdGhpcy5wcm9wcy5vblJlbW92ZSkgcmV0dXJuO1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LXZhbHVlLWljb24nLFxuXHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5vblJlbW92ZSxcblx0XHRcdFx0b25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZFJlbW92ZSxcblx0XHRcdFx0b25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG5cdFx0XHRcdG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSB9LFxuXHRcdFx0J8OXJ1xuXHRcdCk7XG5cdH0sXG5cblx0cmVuZGVyTGFiZWw6IGZ1bmN0aW9uIHJlbmRlckxhYmVsKCkge1xuXHRcdHZhciBjbGFzc05hbWUgPSAnU2VsZWN0LXZhbHVlLWxhYmVsJztcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrIHx8IHRoaXMucHJvcHMudmFsdWUuaHJlZiA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2EnLFxuXHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgaHJlZjogdGhpcy5wcm9wcy52YWx1ZS5ocmVmLCB0YXJnZXQ6IHRoaXMucHJvcHMudmFsdWUudGFyZ2V0LCBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlTW91c2VEb3duIH0sXG5cdFx0XHR0aGlzLnByb3BzLmNoaWxkcmVuXG5cdFx0KSA6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J3NwYW4nLFxuXHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzTmFtZSB9LFxuXHRcdFx0dGhpcy5wcm9wcy5jaGlsZHJlblxuXHRcdCk7XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnU2VsZWN0LXZhbHVlJywgdGhpcy5wcm9wcy52YWx1ZS5jbGFzc05hbWUpLFxuXHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy52YWx1ZS5zdHlsZSxcblx0XHRcdFx0dGl0bGU6IHRoaXMucHJvcHMudmFsdWUudGl0bGVcblx0XHRcdH0sXG5cdFx0XHR0aGlzLnJlbmRlclJlbW92ZUljb24oKSxcblx0XHRcdHRoaXMucmVuZGVyTGFiZWwoKVxuXHRcdCk7XG5cdH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsdWU7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3Qtc2VsZWN0L2xpYi9WYWx1ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBzaXplclN0eWxlID0geyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdmlzaWJpbGl0eTogJ2hpZGRlbicsIGhlaWdodDogMCwgd2lkdGg6IDAsIG92ZXJmbG93OiAnc2Nyb2xsJywgd2hpdGVTcGFjZTogJ25vd3JhcCcgfTtcblxudmFyIG5leHRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuXHR9O1xufSkoKS5iaW5kKHdpbmRvdykgOiB1bmRlZmluZWQ7IC8vIElmIHdpbmRvdyBpcyB1bmRlZmluZWQsIHRoZW4gd2UgY2FuJ3QgZGVmaW5lIGEgbmV4dEZyYW1lIGZ1bmN0aW9uXG5cbnZhciBBdXRvc2l6ZUlucHV0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0F1dG9zaXplSW5wdXQnLFxuXG5cdHByb3BUeXBlczoge1xuXHRcdHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuYW55LCAvLyBmaWVsZCB2YWx1ZVxuXHRcdGRlZmF1bHRWYWx1ZTogUmVhY3QuUHJvcFR5cGVzLmFueSwgLy8gZGVmYXVsdCBmaWVsZCB2YWx1ZVxuXHRcdG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24obmV3VmFsdWUpIHt9XG5cdFx0c3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdFx0bWluV2lkdGg6IFJlYWN0LlByb3BUeXBlcy5vbmVPZlR5cGUoWy8vIG1pbmltdW0gd2lkdGggZm9yIGlucHV0IGVsZW1lbnRcblx0XHRSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLCBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXSksXG5cdFx0aW5wdXRTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCwgLy8gY3NzIHN0eWxlcyBmb3IgdGhlIGlucHV0IGVsZW1lbnRcblx0XHRpbnB1dENsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyAvLyBjbGFzc05hbWUgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdH0sXG5cdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRtaW5XaWR0aDogMVxuXHRcdH07XG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRpbnB1dFdpZHRoOiB0aGlzLnByb3BzLm1pbldpZHRoXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdHRoaXMuY29weUlucHV0U3R5bGVzKCk7XG5cdFx0dGhpcy51cGRhdGVJbnB1dFdpZHRoKCk7XG5cdH0sXG5cdGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuXHRcdHRoaXMucXVldWVVcGRhdGVJbnB1dFdpZHRoKCk7XG5cdH0sXG5cdGNvcHlJbnB1dFN0eWxlczogZnVuY3Rpb24gY29weUlucHV0U3R5bGVzKCkge1xuXHRcdGlmICghdGhpcy5pc01vdW50ZWQoKSB8fCAhd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGlucHV0U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnJlZnMuaW5wdXQpO1xuXHRcdHZhciB3aWR0aE5vZGUgPSB0aGlzLnJlZnMuc2l6ZXI7XG5cdFx0d2lkdGhOb2RlLnN0eWxlLmZvbnRTaXplID0gaW5wdXRTdHlsZS5mb250U2l6ZTtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGlucHV0U3R5bGUuZm9udEZhbWlseTtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFdlaWdodCA9IGlucHV0U3R5bGUuZm9udFdlaWdodDtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFN0eWxlID0gaW5wdXRTdHlsZS5mb250U3R5bGU7XG5cdFx0d2lkdGhOb2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBpbnB1dFN0eWxlLmxldHRlclNwYWNpbmc7XG5cdFx0aWYgKHRoaXMucHJvcHMucGxhY2Vob2xkZXIpIHtcblx0XHRcdHZhciBwbGFjZWhvbGRlck5vZGUgPSB0aGlzLnJlZnMucGxhY2Vob2xkZXJTaXplcjtcblx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5mb250U2l6ZSA9IGlucHV0U3R5bGUuZm9udFNpemU7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGlucHV0U3R5bGUuZm9udEZhbWlseTtcblx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gaW5wdXRTdHlsZS5mb250V2VpZ2h0O1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmZvbnRTdHlsZSA9IGlucHV0U3R5bGUuZm9udFN0eWxlO1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBpbnB1dFN0eWxlLmxldHRlclNwYWNpbmc7XG5cdFx0fVxuXHR9LFxuXHRxdWV1ZVVwZGF0ZUlucHV0V2lkdGg6IGZ1bmN0aW9uIHF1ZXVlVXBkYXRlSW5wdXRXaWR0aCgpIHtcblx0XHRuZXh0RnJhbWUodGhpcy51cGRhdGVJbnB1dFdpZHRoKTtcblx0fSxcblx0dXBkYXRlSW5wdXRXaWR0aDogZnVuY3Rpb24gdXBkYXRlSW5wdXRXaWR0aCgpIHtcblx0XHRpZiAoIXRoaXMuaXNNb3VudGVkKCkgfHwgdHlwZW9mIHRoaXMucmVmcy5zaXplci5zY3JvbGxXaWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIG5ld0lucHV0V2lkdGggPSB1bmRlZmluZWQ7XG5cdFx0aWYgKHRoaXMucHJvcHMucGxhY2Vob2xkZXIpIHtcblx0XHRcdG5ld0lucHV0V2lkdGggPSBNYXRoLm1heCh0aGlzLnJlZnMuc2l6ZXIuc2Nyb2xsV2lkdGgsIHRoaXMucmVmcy5wbGFjZWhvbGRlclNpemVyLnNjcm9sbFdpZHRoKSArIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ld0lucHV0V2lkdGggPSB0aGlzLnJlZnMuc2l6ZXIuc2Nyb2xsV2lkdGggKyAyO1xuXHRcdH1cblx0XHRpZiAobmV3SW5wdXRXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcblx0XHRcdG5ld0lucHV0V2lkdGggPSB0aGlzLnByb3BzLm1pbldpZHRoO1xuXHRcdH1cblx0XHRpZiAobmV3SW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aW5wdXRXaWR0aDogbmV3SW5wdXRXaWR0aFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXHRnZXRJbnB1dDogZnVuY3Rpb24gZ2V0SW5wdXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVmcy5pbnB1dDtcblx0fSxcblx0Zm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHRcdHRoaXMucmVmcy5pbnB1dC5mb2N1cygpO1xuXHR9LFxuXHRibHVyOiBmdW5jdGlvbiBibHVyKCkge1xuXHRcdHRoaXMucmVmcy5pbnB1dC5ibHVyKCk7XG5cdH0sXG5cdHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KCkge1xuXHRcdHRoaXMucmVmcy5pbnB1dC5zZWxlY3QoKTtcblx0fSxcblx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0dmFyIGVzY2FwZWRWYWx1ZSA9ICh0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSB8fCB0aGlzLnByb3BzLnZhbHVlIHx8ICcnKS5yZXBsYWNlKC9cXCYvZywgJyZhbXA7JykucmVwbGFjZSgvIC9nLCAnJm5ic3A7JykucmVwbGFjZSgvXFw8L2csICcmbHQ7JykucmVwbGFjZSgvXFw+L2csICcmZ3Q7Jyk7XG5cdFx0dmFyIHdyYXBwZXJTdHlsZSA9IHRoaXMucHJvcHMuc3R5bGUgfHwge307XG5cdFx0aWYgKCF3cmFwcGVyU3R5bGUuZGlzcGxheSkgd3JhcHBlclN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcblx0XHR2YXIgaW5wdXRTdHlsZSA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLmlucHV0U3R5bGUpO1xuXHRcdGlucHV0U3R5bGUud2lkdGggPSB0aGlzLnN0YXRlLmlucHV0V2lkdGg7XG5cdFx0aW5wdXRTdHlsZS5ib3hTaXppbmcgPSAnY29udGVudC1ib3gnO1xuXHRcdHZhciBwbGFjZWhvbGRlciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IHJlZjogJ3BsYWNlaG9sZGVyU2l6ZXInLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlclxuXHRcdCkgOiBudWxsO1xuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsIHN0eWxlOiB3cmFwcGVyU3R5bGUgfSxcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgcmVmOiAnaW5wdXQnLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuaW5wdXRDbGFzc05hbWUsIHN0eWxlOiBpbnB1dFN0eWxlIH0pKSxcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiAnc2l6ZXInLCBzdHlsZTogc2l6ZXJTdHlsZSwgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBlc2NhcGVkVmFsdWUgfSB9KSxcblx0XHRcdHBsYWNlaG9sZGVyXG5cdFx0KTtcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b3NpemVJbnB1dDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1zZWxlY3Qvfi9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qc1xuICoqIG1vZHVsZSBpZCA9IDQxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RBZGRvbnNVcGRhdGUgPSByZXF1aXJlKFwicmVhY3QtYWRkb25zLXVwZGF0ZVwiKTtcblxudmFyIF9yZWFjdEFkZG9uc1VwZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdEFkZG9uc1VwZGF0ZSk7XG5cbnZhciBfVG9hc3RNZXNzYWdlID0gcmVxdWlyZShcIi4vVG9hc3RNZXNzYWdlXCIpO1xuXG52YXIgX1RvYXN0TWVzc2FnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub2FzdE1lc3NhZ2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUb2FzdENvbnRhaW5lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUb2FzdENvbnRhaW5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9hc3RDb250YWluZXIoKSB7XG4gICAgdmFyIF9PYmplY3QkZ2V0UHJvdG90eXBlTztcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9hc3RDb250YWluZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX09iamVjdCRnZXRQcm90b3R5cGVPID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKFRvYXN0Q29udGFpbmVyKSkuY2FsbC5hcHBseShfT2JqZWN0JGdldFByb3RvdHlwZU8sIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRvYXN0czogW10sXG4gICAgICB0b2FzdElkOiAwLFxuICAgICAgcHJldmlvdXNNZXNzYWdlOiBudWxsXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9hc3RDb250YWluZXIsIFt7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIHRpdGxlLCBvcHRpb25zT3ZlcnJpZGUpIHtcbiAgICAgIHRoaXMuX25vdGlmeSh0aGlzLnByb3BzLnRvYXN0VHlwZS5lcnJvciwgbWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mbyhtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKSB7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5wcm9wcy50b2FzdFR5cGUuaW5mbywgbWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN1Y2Nlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKSB7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5wcm9wcy50b2FzdFR5cGUuc3VjY2VzcywgbWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndhcm5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCB0aXRsZSwgb3B0aW9uc092ZXJyaWRlKSB7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5wcm9wcy50b2FzdFR5cGUud2FybmluZywgbWVzc2FnZSwgdGl0bGUsIG9wdGlvbnNPdmVycmlkZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucmVmcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzMi5yZWZzW2tleV0uaGlkZVRvYXN0KGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfbm90aWZ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3RpZnkodHlwZSwgbWVzc2FnZSwgdGl0bGUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9uc092ZXJyaWRlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbM107XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnByZXZlbnREdXBsaWNhdGVzKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnByZXZpb3VzTWVzc2FnZSA9PT0gbWVzc2FnZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHRoaXMuc3RhdGUudG9hc3RJZCsrO1xuICAgICAgdmFyIHRvYXN0SWQgPSBrZXk7XG4gICAgICB2YXIgbmV3VG9hc3QgPSAoMCwgX3JlYWN0QWRkb25zVXBkYXRlMi5kZWZhdWx0KShvcHRpb25zT3ZlcnJpZGUsIHtcbiAgICAgICAgJG1lcmdlOiB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICB0b2FzdElkOiB0b2FzdElkLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHJlZjogXCJ0b2FzdHNfX1wiICsga2V5LFxuICAgICAgICAgIGhhbmRsZU9uQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZU9uQ2xpY2soZSkge1xuICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG9wdGlvbnNPdmVycmlkZS5oYW5kbGVPbkNsaWNrKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnNPdmVycmlkZS5oYW5kbGVPbkNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLl9oYW5kbGVfdG9hc3Rfb25fY2xpY2soZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYW5kbGVSZW1vdmU6IHRoaXMuX2hhbmRsZV90b2FzdF9yZW1vdmUuYmluZCh0aGlzKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciB0b2FzdE9wZXJhdGlvbiA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIiArICh0aGlzLnByb3BzLm5ld2VzdE9uVG9wID8gXCIkdW5zaGlmdFwiIDogXCIkcHVzaFwiKSwgW25ld1RvYXN0XSk7XG5cbiAgICAgIHZhciBuZXh0U3RhdGUgPSAoMCwgX3JlYWN0QWRkb25zVXBkYXRlMi5kZWZhdWx0KSh0aGlzLnN0YXRlLCB7XG4gICAgICAgIHRvYXN0czogdG9hc3RPcGVyYXRpb24sXG4gICAgICAgIHByZXZpb3VzTWVzc2FnZTogeyAkc2V0OiBtZXNzYWdlIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlX3RvYXN0X29uX2NsaWNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVfdG9hc3Rfb25fY2xpY2soZXZlbnQpIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVfdG9hc3RfcmVtb3ZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVfdG9hc3RfcmVtb3ZlKHRvYXN0SWQpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgb3BlcmF0aW9uTmFtZSA9IFwiXCIgKyAodGhpcy5wcm9wcy5uZXdlc3RPblRvcCA/IFwicmVkdWNlUmlnaHRcIiA6IFwicmVkdWNlXCIpO1xuICAgICAgdGhpcy5zdGF0ZS50b2FzdHNbb3BlcmF0aW9uTmFtZV0oZnVuY3Rpb24gKGZvdW5kLCB0b2FzdCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGZvdW5kIHx8IHRvYXN0LnRvYXN0SWQgIT09IHRvYXN0SWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM0LnNldFN0YXRlKCgwLCBfcmVhY3RBZGRvbnNVcGRhdGUyLmRlZmF1bHQpKF90aGlzNC5zdGF0ZSwge1xuICAgICAgICAgIHRvYXN0czogeyAkc3BsaWNlOiBbW2luZGV4LCAxXV0gfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIiwgcm9sZTogXCJhbGVydFwiIH0pLFxuICAgICAgICB0aGlzLnN0YXRlLnRvYXN0cy5tYXAoZnVuY3Rpb24gKHRvYXN0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNS5wcm9wcy50b2FzdE1lc3NhZ2VGYWN0b3J5KHRvYXN0KTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvYXN0Q29udGFpbmVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVG9hc3RDb250YWluZXIucHJvcFR5cGVzID0ge1xuICB0b2FzdFR5cGU6IF9yZWFjdC5Qcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVycm9yOiBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbmZvOiBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdWNjZXNzOiBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB3YXJuaW5nOiBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9KS5pc1JlcXVpcmVkLFxuICBpZDogX3JlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgdG9hc3RNZXNzYWdlRmFjdG9yeTogX3JlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHByZXZlbnREdXBsaWNhdGVzOiBfcmVhY3QuUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgbmV3ZXN0T25Ub3A6IF9yZWFjdC5Qcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBvbkNsaWNrOiBfcmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblRvYXN0Q29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdG9hc3RUeXBlOiB7XG4gICAgZXJyb3I6IFwiZXJyb3JcIixcbiAgICBpbmZvOiBcImluZm9cIixcbiAgICBzdWNjZXNzOiBcInN1Y2Nlc3NcIixcbiAgICB3YXJuaW5nOiBcIndhcm5pbmdcIlxuICB9LFxuICBpZDogXCJ0b2FzdC1jb250YWluZXJcIixcbiAgdG9hc3RNZXNzYWdlRmFjdG9yeTogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUZhY3RvcnkoX1RvYXN0TWVzc2FnZTIuZGVmYXVsdCksXG4gIHByZXZlbnREdXBsaWNhdGVzOiBmYWxzZSxcbiAgbmV3ZXN0T25Ub3A6IHRydWUsXG4gIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7fVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRvYXN0Q29udGFpbmVyO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LXRvYXN0ci9saWIvVG9hc3RDb250YWluZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzID0gcmVxdWlyZShcInJlYWN0L2xpYi9SZWFjdFRyYW5zaXRpb25FdmVudHNcIik7XG5cbnZhciBfUmVhY3RUcmFuc2l0aW9uRXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlYWN0VHJhbnNpdGlvbkV2ZW50cyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9lbGVtZW50Q2xhc3MgPSByZXF1aXJlKFwiZWxlbWVudC1jbGFzc1wiKTtcblxudmFyIF9lbGVtZW50Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudENsYXNzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFRJQ0sgPSAxNztcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uOiBudWxsLCAvLyBzb21lIGV4YW1wbGVzIGRlZmluZWQgaW4gaW5kZXguc2NzcyAoc2NhbGUsIGZhZGVJbk91dCwgcm90YXRlKVxuICAgICAgc2hvd0FuaW1hdGlvbjogXCJhbmltYXRlZCBib3VuY2VJblwiLCAvLyBvciBvdGhlciBhbmltYXRpb25zIGZyb20gYW5pbWF0ZS5jc3NcbiAgICAgIGhpZGVBbmltYXRpb246IFwiYW5pbWF0ZWQgYm91bmNlT3V0XCIsXG4gICAgICB0aW1lT3V0OiA1MDAwLFxuICAgICAgZXh0ZW5kZWRUaW1lT3V0OiAxMDAwXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZSA9IFtdO1xuICAgIHRoaXMuaXNIaWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmludGVydmFsSWQgPSBudWxsO1xuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX2lzX21vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3Nob3coKTtcbiAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgIHZhciBvbkhpZGVDb21wbGV0ZSA9IGZ1bmN0aW9uIG9uSGlkZUNvbXBsZXRlKCkge1xuICAgICAgaWYgKF90aGlzLmlzSGlkaW5nKSB7XG4gICAgICAgIF90aGlzLl9zZXRfaXNfaGlkaW5nKGZhbHNlKTtcbiAgICAgICAgX1JlYWN0VHJhbnNpdGlvbkV2ZW50czIuZGVmYXVsdC5yZW1vdmVFbmRFdmVudExpc3RlbmVyKG5vZGUsIG9uSGlkZUNvbXBsZXRlKTtcbiAgICAgICAgX3RoaXMuX2hhbmRsZV9yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF9SZWFjdFRyYW5zaXRpb25FdmVudHMyLmRlZmF1bHQuYWRkRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBvbkhpZGVDb21wbGV0ZSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy50aW1lT3V0ID4gMCkge1xuICAgICAgdGhpcy5fc2V0X2ludGVydmFsX2lkKHNldFRpbWVvdXQodGhpcy5oaWRlVG9hc3QsIHRoaXMucHJvcHMudGltZU91dCkpO1xuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2lzX21vdW50ZWQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5pbnRlcnZhbElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5pbnRlcnZhbElkKTtcbiAgICB9XG4gIH0sXG4gIF9zZXRfdHJhbnNpdGlvbjogZnVuY3Rpb24gX3NldF90cmFuc2l0aW9uKGhpZGUpIHtcbiAgICB2YXIgYW5pbWF0aW9uVHlwZSA9IGhpZGUgPyBcImxlYXZlXCIgOiBcImVudGVyXCI7XG4gICAgdmFyIG5vZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMudHJhbnNpdGlvbiArIFwiLVwiICsgYW5pbWF0aW9uVHlwZTtcbiAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gY2xhc3NOYW1lICsgXCItYWN0aXZlXCI7XG5cbiAgICB2YXIgZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBlbmRMaXN0ZW5lcihlKSB7XG4gICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gbm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjbGFzc0xpc3QgPSAoMCwgX2VsZW1lbnRDbGFzczIuZGVmYXVsdCkobm9kZSk7XG4gICAgICBjbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICBjbGFzc0xpc3QucmVtb3ZlKGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIF9SZWFjdFRyYW5zaXRpb25FdmVudHMyLmRlZmF1bHQucmVtb3ZlRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRMaXN0ZW5lcik7XG4gICAgfTtcblxuICAgIF9SZWFjdFRyYW5zaXRpb25FdmVudHMyLmRlZmF1bHQuYWRkRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRMaXN0ZW5lcik7XG5cbiAgICAoMCwgX2VsZW1lbnRDbGFzczIuZGVmYXVsdCkobm9kZSkuYWRkKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBOZWVkIHRvIGRvIHRoaXMgdG8gYWN0dWFsbHkgdHJpZ2dlciBhIHRyYW5zaXRpb24uXG4gICAgdGhpcy5fcXVldWVfY2xhc3MoYWN0aXZlQ2xhc3NOYW1lKTtcbiAgfSxcbiAgX2NsZWFyX3RyYW5zaXRpb246IGZ1bmN0aW9uIF9jbGVhcl90cmFuc2l0aW9uKGhpZGUpIHtcbiAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgYW5pbWF0aW9uVHlwZSA9IGhpZGUgPyBcImxlYXZlXCIgOiBcImVudGVyXCI7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMudHJhbnNpdGlvbiArIFwiLVwiICsgYW5pbWF0aW9uVHlwZTtcbiAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gY2xhc3NOYW1lICsgXCItYWN0aXZlXCI7XG5cbiAgICB2YXIgY2xhc3NMaXN0ID0gKDAsIF9lbGVtZW50Q2xhc3MyLmRlZmF1bHQpKG5vZGUpO1xuICAgIGNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICBjbGFzc0xpc3QucmVtb3ZlKGFjdGl2ZUNsYXNzTmFtZSk7XG4gIH0sXG4gIF9zZXRfYW5pbWF0aW9uOiBmdW5jdGlvbiBfc2V0X2FuaW1hdGlvbihoaWRlKSB7XG4gICAgdmFyIG5vZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLl9nZXRfYW5pbWF0aW9uX2NsYXNzZXMoaGlkZSk7XG4gICAgdmFyIGVuZExpc3RlbmVyID0gZnVuY3Rpb24gZW5kTGlzdGVuZXIoZSkge1xuICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW0pIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKS5yZW1vdmUoYW5pbSk7XG4gICAgICB9KTtcblxuICAgICAgX1JlYWN0VHJhbnNpdGlvbkV2ZW50czIuZGVmYXVsdC5yZW1vdmVFbmRFdmVudExpc3RlbmVyKG5vZGUsIGVuZExpc3RlbmVyKTtcbiAgICB9O1xuXG4gICAgX1JlYWN0VHJhbnNpdGlvbkV2ZW50czIuZGVmYXVsdC5hZGRFbmRFdmVudExpc3RlbmVyKG5vZGUsIGVuZExpc3RlbmVyKTtcblxuICAgIGFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbSkge1xuICAgICAgcmV0dXJuICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKS5hZGQoYW5pbSk7XG4gICAgfSk7XG4gIH0sXG4gIF9nZXRfYW5pbWF0aW9uX2NsYXNzZXM6IGZ1bmN0aW9uIF9nZXRfYW5pbWF0aW9uX2NsYXNzZXMoaGlkZSkge1xuICAgIHZhciBhbmltYXRpb25zID0gaGlkZSA/IHRoaXMucHJvcHMuaGlkZUFuaW1hdGlvbiA6IHRoaXMucHJvcHMuc2hvd0FuaW1hdGlvbjtcbiAgICBpZiAoXCJbb2JqZWN0IEFycmF5XVwiID09PSB0b1N0cmluZy5jYWxsKGFuaW1hdGlvbnMpKSB7XG4gICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9IGVsc2UgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBhbmltYXRpb25zKSB7XG4gICAgICByZXR1cm4gYW5pbWF0aW9ucy5zcGxpdChcIiBcIik7XG4gICAgfVxuICB9LFxuICBfY2xlYXJfYW5pbWF0aW9uOiBmdW5jdGlvbiBfY2xlYXJfYW5pbWF0aW9uKGhpZGUpIHtcbiAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuX2dldF9hbmltYXRpb25fY2xhc3NlcyhoaWRlKTtcbiAgICBhbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgcmV0dXJuICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKS5yZW1vdmUoYW5pbWF0aW9uKTtcbiAgICB9KTtcbiAgfSxcbiAgX3F1ZXVlX2NsYXNzOiBmdW5jdGlvbiBfcXVldWVfY2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5wdXNoKGNsYXNzTmFtZSk7XG5cbiAgICBpZiAoIXRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9mbHVzaF9jbGFzc19uYW1lX3F1ZXVlLCBUSUNLKTtcbiAgICB9XG4gIH0sXG4gIF9mbHVzaF9jbGFzc19uYW1lX3F1ZXVlOiBmdW5jdGlvbiBfZmx1c2hfY2xhc3NfbmFtZV9xdWV1ZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9pc19tb3VudGVkKSB7XG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpczIpO1xuICAgICAgICBfdGhpczIuY2xhc3NOYW1lUXVldWUuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfZWxlbWVudENsYXNzMi5kZWZhdWx0KShub2RlKS5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSgpO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzTmFtZVF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgfSxcbiAgX3Nob3c6IGZ1bmN0aW9uIF9zaG93KCkge1xuICAgIGlmICh0aGlzLnByb3BzLnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX3NldF90cmFuc2l0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNob3dBbmltYXRpb24pIHtcbiAgICAgIHRoaXMuX3NldF9hbmltYXRpb24oKTtcbiAgICB9XG4gIH0sXG4gIGhhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaW50ZXJ2YWxJZCk7XG4gICAgdGhpcy5fc2V0X2ludGVydmFsX2lkKG51bGwpO1xuICAgIGlmICh0aGlzLmlzSGlkaW5nKSB7XG4gICAgICB0aGlzLl9zZXRfaXNfaGlkaW5nKGZhbHNlKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaGlkZUFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLl9jbGVhcl9hbmltYXRpb24odHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgICB0aGlzLl9jbGVhcl90cmFuc2l0aW9uKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNIaWRpbmcgJiYgKHRoaXMucHJvcHMudGltZU91dCA+IDAgfHwgdGhpcy5wcm9wcy5leHRlbmRlZFRpbWVPdXQgPiAwKSkge1xuICAgICAgdGhpcy5fc2V0X2ludGVydmFsX2lkKHNldFRpbWVvdXQodGhpcy5oaWRlVG9hc3QsIHRoaXMucHJvcHMuZXh0ZW5kZWRUaW1lT3V0KSk7XG4gICAgfVxuICB9LFxuICBoaWRlVG9hc3Q6IGZ1bmN0aW9uIGhpZGVUb2FzdChvdmVycmlkZSkge1xuICAgIGlmICh0aGlzLmlzSGlkaW5nIHx8IHRoaXMuaW50ZXJ2YWxJZCA9PT0gbnVsbCAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRfaXNfaGlkaW5nKHRydWUpO1xuICAgIGlmICh0aGlzLnByb3BzLnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX3NldF90cmFuc2l0aW9uKHRydWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5oaWRlQW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLl9zZXRfYW5pbWF0aW9uKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVfcmVtb3ZlKCk7XG4gICAgfVxuICB9LFxuICBfc2V0X2ludGVydmFsX2lkOiBmdW5jdGlvbiBfc2V0X2ludGVydmFsX2lkKGludGVydmFsSWQpIHtcbiAgICB0aGlzLmludGVydmFsSWQgPSBpbnRlcnZhbElkO1xuICB9LFxuICBfc2V0X2lzX2hpZGluZzogZnVuY3Rpb24gX3NldF9pc19oaWRpbmcoaXNIaWRpbmcpIHtcbiAgICB0aGlzLmlzSGlkaW5nID0gaXNIaWRpbmc7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QtdG9hc3RyL2xpYi9Ub2FzdE1lc3NhZ2UvYW5pbWF0aW9uTWl4aW4uanNcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY2FsbF9zaG93X21ldGhvZCgkbm9kZSwgcHJvcHMpIHtcbiAgJG5vZGVbcHJvcHMuc2hvd01ldGhvZF0oe1xuICAgIGR1cmF0aW9uOiBwcm9wcy5zaG93RHVyYXRpb24sXG4gICAgZWFzaW5nOiBwcm9wcy5zaG93RWFzaW5nXG4gIH0pO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIiB9LFxuICAgICAgLy8gZWZmZWN0aXZlICQuaGlkZSgpXG4gICAgICBzaG93TWV0aG9kOiBcImZhZGVJblwiLCAvLyBzbGlkZURvd24sIGFuZCBzaG93IGFyZSBidWlsdCBpbnRvIGpRdWVyeVxuICAgICAgc2hvd0R1cmF0aW9uOiAzMDAsXG4gICAgICBzaG93RWFzaW5nOiBcInN3aW5nXCIsIC8vIGFuZCBsaW5lYXIgYXJlIGJ1aWx0IGludG8galF1ZXJ5XG4gICAgICBoaWRlTWV0aG9kOiBcImZhZGVPdXRcIixcbiAgICAgIGhpZGVEdXJhdGlvbjogMTAwMCxcbiAgICAgIGhpZGVFYXNpbmc6IFwic3dpbmdcIixcbiAgICAgIC8vXG4gICAgICB0aW1lT3V0OiA1MDAwLFxuICAgICAgZXh0ZW5kZWRUaW1lT3V0OiAxMDAwXG4gICAgfTtcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGludGVydmFsSWQ6IG51bGwsXG4gICAgICBpc0hpZGluZzogZmFsc2VcbiAgICB9O1xuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY2FsbF9zaG93X21ldGhvZCh0aGlzLl9nZXRfJF9ub2RlKCksIHRoaXMucHJvcHMpO1xuICAgIGlmICh0aGlzLnByb3BzLnRpbWVPdXQgPiAwKSB7XG4gICAgICB0aGlzLl9zZXRfaW50ZXJ2YWxfaWQoc2V0VGltZW91dCh0aGlzLmhpZGVUb2FzdCwgdGhpcy5wcm9wcy50aW1lT3V0KSk7XG4gICAgfVxuICB9LFxuICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXRlLmludGVydmFsSWQpO1xuICAgIHRoaXMuX3NldF9pbnRlcnZhbF9pZChudWxsKTtcbiAgICB0aGlzLl9zZXRfaXNfaGlkaW5nKGZhbHNlKTtcblxuICAgIGNhbGxfc2hvd19tZXRob2QodGhpcy5fZ2V0XyRfbm9kZSgpLnN0b3AodHJ1ZSwgdHJ1ZSksIHRoaXMucHJvcHMpO1xuICB9LFxuICBoYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pc0hpZGluZyAmJiAodGhpcy5wcm9wcy50aW1lT3V0ID4gMCB8fCB0aGlzLnByb3BzLmV4dGVuZGVkVGltZU91dCA+IDApKSB7XG4gICAgICB0aGlzLl9zZXRfaW50ZXJ2YWxfaWQoc2V0VGltZW91dCh0aGlzLmhpZGVUb2FzdCwgdGhpcy5wcm9wcy5leHRlbmRlZFRpbWVPdXQpKTtcbiAgICB9XG4gIH0sXG4gIGhpZGVUb2FzdDogZnVuY3Rpb24gaGlkZVRvYXN0KG92ZXJyaWRlKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXNIaWRpbmcgfHwgdGhpcy5zdGF0ZS5pbnRlcnZhbElkID09PSBudWxsICYmICFvdmVycmlkZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNIaWRpbmc6IHRydWUgfSk7XG5cbiAgICB0aGlzLl9nZXRfJF9ub2RlKClbdGhpcy5wcm9wcy5oaWRlTWV0aG9kXSh7XG4gICAgICBkdXJhdGlvbjogdGhpcy5wcm9wcy5oaWRlRHVyYXRpb24sXG4gICAgICBlYXNpbmc6IHRoaXMucHJvcHMuaGlkZUVhc2luZyxcbiAgICAgIGNvbXBsZXRlOiB0aGlzLl9oYW5kbGVfcmVtb3ZlXG4gICAgfSk7XG4gIH0sXG4gIF9nZXRfJF9ub2RlOiBmdW5jdGlvbiBfZ2V0XyRfbm9kZSgpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgIHJldHVybiBqUXVlcnkoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG4gIH0sXG4gIF9zZXRfaW50ZXJ2YWxfaWQ6IGZ1bmN0aW9uIF9zZXRfaW50ZXJ2YWxfaWQoaW50ZXJ2YWxJZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW50ZXJ2YWxJZDogaW50ZXJ2YWxJZFxuICAgIH0pO1xuICB9LFxuICBfc2V0X2lzX2hpZGluZzogZnVuY3Rpb24gX3NldF9pc19oaWRpbmcoaXNIaWRpbmcpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSGlkaW5nOiBpc0hpZGluZ1xuICAgIH0pO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LXRvYXN0ci9saWIvVG9hc3RNZXNzYWdlL2pRdWVyeU1peGluLmpzXG4gKiogbW9kdWxlIGlkID0gNDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ub2FzdE1lc3NhZ2UgPSBleHBvcnRzLlRvYXN0Q29udGFpbmVyID0gdW5kZWZpbmVkO1xuXG52YXIgX1RvYXN0Q29udGFpbmVyID0gcmVxdWlyZShcIi4vVG9hc3RDb250YWluZXJcIik7XG5cbnZhciBfVG9hc3RDb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVG9hc3RDb250YWluZXIpO1xuXG52YXIgX1RvYXN0TWVzc2FnZSA9IHJlcXVpcmUoXCIuL1RvYXN0TWVzc2FnZVwiKTtcblxudmFyIF9Ub2FzdE1lc3NhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVG9hc3RNZXNzYWdlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5Ub2FzdENvbnRhaW5lciA9IF9Ub2FzdENvbnRhaW5lcjIuZGVmYXVsdDtcbmV4cG9ydHMuVG9hc3RNZXNzYWdlID0gX1RvYXN0TWVzc2FnZTIuZGVmYXVsdDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC10b2FzdHIvbGliL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0cykge1xuICByZXR1cm4gbmV3IEVsZW1lbnRDbGFzcyhvcHRzKVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKGFyciwgcHJvcCkge1xuICBpZiAoYXJyLmluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihwcm9wKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgIGlmIChhcnJbaV0gPT09IHByb3ApIHJldHVybiBpXG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBFbGVtZW50Q2xhc3Mob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRWxlbWVudENsYXNzKSkgcmV0dXJuIG5ldyBFbGVtZW50Q2xhc3Mob3B0cylcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgLy8gc2ltaWxhciBkb2luZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IGJ1dCB3b3JrcyBpbiBJRThcbiAgaWYgKG9wdHMubm9kZVR5cGUpIG9wdHMgPSB7ZWw6IG9wdHN9XG5cbiAgdGhpcy5vcHRzID0gb3B0c1xuICB0aGlzLmVsID0gb3B0cy5lbCB8fCBkb2N1bWVudC5ib2R5XG4gIGlmICh0eXBlb2YgdGhpcy5lbCAhPT0gJ29iamVjdCcpIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuZWwpXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVybiBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWVcbiAgdmFyIGNsYXNzZXMgPSBlbC5jbGFzc05hbWUuc3BsaXQoJyAnKVxuICBpZiAoaW5kZXhPZihjbGFzc2VzLCBjbGFzc05hbWUpID4gLTEpIHJldHVybiBjbGFzc2VzXG4gIGNsYXNzZXMucHVzaChjbGFzc05hbWUpXG4gIGVsLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbignICcpXG4gIHJldHVybiBjbGFzc2VzXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVyblxuICB2YXIgY2xhc3NlcyA9IGVsLmNsYXNzTmFtZS5zcGxpdCgnICcpXG4gIHZhciBpZHggPSBpbmRleE9mKGNsYXNzZXMsIGNsYXNzTmFtZSlcbiAgaWYgKGlkeCA+IC0xKSBjbGFzc2VzLnNwbGljZShpZHgsIDEpXG4gIGVsLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbignICcpXG4gIHJldHVybiBjbGFzc2VzXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIHZhciBjbGFzc2VzID0gZWwuY2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgcmV0dXJuIGluZGV4T2YoY2xhc3NlcywgY2xhc3NOYW1lKSA+IC0xXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmICh0aGlzLmhhcyhjbGFzc05hbWUpKSB0aGlzLnJlbW92ZShjbGFzc05hbWUpXG4gIGVsc2UgdGhpcy5hZGQoY2xhc3NOYW1lKVxufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QtdG9hc3RyL34vZWxlbWVudC1jbGFzcy9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgT2JqZWN0LmFzc2lnblxuICovXG5cbi8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuYXNzaWduXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlcykge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIHRhcmdldCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIG5leHRJbmRleCA9IDE7IG5leHRJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG4gICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbbmV4dEluZGV4XTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IE9iamVjdChuZXh0U291cmNlKTtcblxuICAgIC8vIFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IGFjY2Vzc29ycyBub3IgcHJveGllcy4gVGhlcmVmb3JlIHRoaXNcbiAgICAvLyBjb3B5IGNhbm5vdCB0aHJvdy4gSWYgd2UgZXZlciBzdXBwb3J0ZWQgdGhpcyB0aGVuIHdlIG11c3QgaGFuZGxlXG4gICAgLy8gZXhjZXB0aW9ucyBhbmQgc2lkZS1lZmZlY3RzLiBXZSBkb24ndCBzdXBwb3J0IHN5bWJvbHMgc28gdGhleSB3b24ndFxuICAgIC8vIGJlIHRyYW5zZmVycmVkLlxuXG4gICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcbiAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXG4gKiogbW9kdWxlIGlkID0gNDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFRyYW5zaXRpb25FdmVudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbi8qKlxuICogRVZFTlRfTkFNRV9NQVAgaXMgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggZXZlbnQgZmlyZWQgd2hlbiBhXG4gKiB0cmFuc2l0aW9uL2FuaW1hdGlvbiBlbmRzLCBiYXNlZCBvbiB0aGUgc3R5bGUgcHJvcGVydHkgdXNlZCB0b1xuICogZGVmaW5lIHRoYXQgZXZlbnQuXG4gKi9cbnZhciBFVkVOVF9OQU1FX01BUCA9IHtcbiAgdHJhbnNpdGlvbmVuZDoge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ21velRyYW5zaXRpb25FbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvVHJhbnNpdGlvbkVuZCcsXG4gICAgJ21zVHJhbnNpdGlvbic6ICdNU1RyYW5zaXRpb25FbmQnXG4gIH0sXG5cbiAgYW5pbWF0aW9uZW5kOiB7XG4gICAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb25lbmQnLFxuICAgICdXZWJraXRBbmltYXRpb24nOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcbiAgICAnTW96QW5pbWF0aW9uJzogJ21vekFuaW1hdGlvbkVuZCcsXG4gICAgJ09BbmltYXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgJ21zQW5pbWF0aW9uJzogJ01TQW5pbWF0aW9uRW5kJ1xuICB9XG59O1xuXG52YXIgZW5kRXZlbnRzID0gW107XG5cbmZ1bmN0aW9uIGRldGVjdEV2ZW50cygpIHtcbiAgdmFyIHRlc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgc3R5bGUgPSB0ZXN0RWwuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2VhYmxlLCBhbmQgaWYgbm90IHJlbW92ZSB0aGVtXG4gIC8vIGZyb20gdGhlIG1hcFxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgfVxuXG4gIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uO1xuICB9XG5cbiAgZm9yICh2YXIgYmFzZUV2ZW50TmFtZSBpbiBFVkVOVF9OQU1FX01BUCkge1xuICAgIHZhciBiYXNlRXZlbnRzID0gRVZFTlRfTkFNRV9NQVBbYmFzZUV2ZW50TmFtZV07XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIGJhc2VFdmVudHMpIHtcbiAgICAgIGlmIChzdHlsZU5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgZW5kRXZlbnRzLnB1c2goYmFzZUV2ZW50c1tzdHlsZU5hbWVdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgZGV0ZWN0RXZlbnRzKCk7XG59XG5cbi8vIFdlIHVzZSB0aGUgcmF3IHthZGR8cmVtb3ZlfUV2ZW50TGlzdGVuZXIoKSBjYWxsIGJlY2F1c2UgRXZlbnRMaXN0ZW5lclxuLy8gZG9lcyBub3Qga25vdyBob3cgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBhbmQgd2UgcmVhbGx5IHNob3VsZFxuLy8gY2xlYW4gdXAuIEFsc28sIHRoZXNlIGV2ZW50cyBhcmUgbm90IHRyaWdnZXJlZCBpbiBvbGRlciBicm93c2Vyc1xuLy8gc28gd2Ugc2hvdWxkIGJlIEEtT0sgaGVyZS5cblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIpIHtcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcikge1xuICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG59XG5cbnZhciBSZWFjdFRyYW5zaXRpb25FdmVudHMgPSB7XG4gIGFkZEVuZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChub2RlLCBldmVudExpc3RlbmVyKSB7XG4gICAgaWYgKGVuZEV2ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIElmIENTUyB0cmFuc2l0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCwgdHJpZ2dlciBhbiBcImVuZCBhbmltYXRpb25cIlxuICAgICAgLy8gZXZlbnQgaW1tZWRpYXRlbHkuXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChldmVudExpc3RlbmVyLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5kRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGVuZEV2ZW50KSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGVuZEV2ZW50LCBldmVudExpc3RlbmVyKTtcbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmVFbmRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAobm9kZSwgZXZlbnRMaXN0ZW5lcikge1xuICAgIGlmIChlbmRFdmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVuZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbmRFdmVudCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRFdmVudCwgZXZlbnRMaXN0ZW5lcik7XG4gICAgfSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uRXZlbnRzO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdFRyYW5zaXRpb25FdmVudHMuanNcbiAqKiBtb2R1bGUgaWQgPSA0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHVwZGF0ZVxuICovXG5cbi8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9ICh7fSkuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4geC5jb25jYXQoKTtcbiAgfSBlbHNlIGlmICh4ICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBhc3NpZ24obmV3IHguY29uc3RydWN0b3IoKSwgeCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbn1cblxudmFyIENPTU1BTkRfUFVTSCA9IGtleU9mKHsgJHB1c2g6IG51bGwgfSk7XG52YXIgQ09NTUFORF9VTlNISUZUID0ga2V5T2YoeyAkdW5zaGlmdDogbnVsbCB9KTtcbnZhciBDT01NQU5EX1NQTElDRSA9IGtleU9mKHsgJHNwbGljZTogbnVsbCB9KTtcbnZhciBDT01NQU5EX1NFVCA9IGtleU9mKHsgJHNldDogbnVsbCB9KTtcbnZhciBDT01NQU5EX01FUkdFID0ga2V5T2YoeyAkbWVyZ2U6IG51bGwgfSk7XG52YXIgQ09NTUFORF9BUFBMWSA9IGtleU9mKHsgJGFwcGx5OiBudWxsIH0pO1xuXG52YXIgQUxMX0NPTU1BTkRTX0xJU1QgPSBbQ09NTUFORF9QVVNILCBDT01NQU5EX1VOU0hJRlQsIENPTU1BTkRfU1BMSUNFLCBDT01NQU5EX1NFVCwgQ09NTUFORF9NRVJHRSwgQ09NTUFORF9BUFBMWV07XG5cbnZhciBBTExfQ09NTUFORFNfU0VUID0ge307XG5cbkFMTF9DT01NQU5EU19MSVNULmZvckVhY2goZnVuY3Rpb24gKGNvbW1hbmQpIHtcbiAgQUxMX0NPTU1BTkRTX1NFVFtjb21tYW5kXSA9IHRydWU7XG59KTtcblxuZnVuY3Rpb24gaW52YXJpYW50QXJyYXlDYXNlKHZhbHVlLCBzcGVjLCBjb21tYW5kKSB7XG4gICFBcnJheS5pc0FycmF5KHZhbHVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGUoKTogZXhwZWN0ZWQgdGFyZ2V0IG9mICVzIHRvIGJlIGFuIGFycmF5OyBnb3QgJXMuJywgY29tbWFuZCwgdmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgdmFyIHNwZWNWYWx1ZSA9IHNwZWNbY29tbWFuZF07XG4gICFBcnJheS5pc0FycmF5KHNwZWNWYWx1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXk7IGdvdCAlcy4gJyArICdEaWQgeW91IGZvcmdldCB0byB3cmFwIHlvdXIgcGFyYW1ldGVyIGluIGFuIGFycmF5PycsIGNvbW1hbmQsIHNwZWNWYWx1ZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUodmFsdWUsIHNwZWMpIHtcbiAgISh0eXBlb2Ygc3BlYyA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZSgpOiBZb3UgcHJvdmlkZWQgYSBrZXkgcGF0aCB0byB1cGRhdGUoKSB0aGF0IGRpZCBub3QgY29udGFpbiBvbmUgJyArICdvZiAlcy4gRGlkIHlvdSBmb3JnZXQgdG8gaW5jbHVkZSB7JXM6IC4uLn0/JywgQUxMX0NPTU1BTkRTX0xJU1Quam9pbignLCAnKSwgQ09NTUFORF9TRVQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1NFVCkpIHtcbiAgICAhKE9iamVjdC5rZXlzKHNwZWMpLmxlbmd0aCA9PT0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGhhdmUgbW9yZSB0aGFuIG9uZSBrZXkgaW4gYW4gb2JqZWN0IHdpdGggJXMnLCBDT01NQU5EX1NFVCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIHNwZWNbQ09NTUFORF9TRVRdO1xuICB9XG5cbiAgdmFyIG5leHRWYWx1ZSA9IHNoYWxsb3dDb3B5KHZhbHVlKTtcblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX01FUkdFKSkge1xuICAgIHZhciBtZXJnZU9iaiA9IHNwZWNbQ09NTUFORF9NRVJHRV07XG4gICAgIShtZXJnZU9iaiAmJiB0eXBlb2YgbWVyZ2VPYmogPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGUoKTogJXMgZXhwZWN0cyBhIHNwZWMgb2YgdHlwZSBcXCdvYmplY3RcXCc7IGdvdCAlcycsIENPTU1BTkRfTUVSR0UsIG1lcmdlT2JqKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgIShuZXh0VmFsdWUgJiYgdHlwZW9mIG5leHRWYWx1ZSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZSgpOiAlcyBleHBlY3RzIGEgdGFyZ2V0IG9mIHR5cGUgXFwnb2JqZWN0XFwnOyBnb3QgJXMnLCBDT01NQU5EX01FUkdFLCBuZXh0VmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBhc3NpZ24obmV4dFZhbHVlLCBzcGVjW0NPTU1BTkRfTUVSR0VdKTtcbiAgfVxuXG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNwZWMsIENPTU1BTkRfUFVTSCkpIHtcbiAgICBpbnZhcmlhbnRBcnJheUNhc2UodmFsdWUsIHNwZWMsIENPTU1BTkRfUFVTSCk7XG4gICAgc3BlY1tDT01NQU5EX1BVU0hdLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIG5leHRWYWx1ZS5wdXNoKGl0ZW0pO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9VTlNISUZUKSkge1xuICAgIGludmFyaWFudEFycmF5Q2FzZSh2YWx1ZSwgc3BlYywgQ09NTUFORF9VTlNISUZUKTtcbiAgICBzcGVjW0NPTU1BTkRfVU5TSElGVF0uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgbmV4dFZhbHVlLnVuc2hpZnQoaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1NQTElDRSkpIHtcbiAgICAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgJXMgdGFyZ2V0IHRvIGJlIGFuIGFycmF5OyBnb3QgJXMnLCBDT01NQU5EX1NQTElDRSwgdmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAhQXJyYXkuaXNBcnJheShzcGVjW0NPTU1BTkRfU1BMSUNFXSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXkgb2YgYXJyYXlzOyBnb3QgJXMuICcgKyAnRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIHBhcmFtZXRlcnMgaW4gYW4gYXJyYXk/JywgQ09NTUFORF9TUExJQ0UsIHNwZWNbQ09NTUFORF9TUExJQ0VdKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgc3BlY1tDT01NQU5EX1NQTElDRV0uZm9yRWFjaChmdW5jdGlvbiAoYXJncykge1xuICAgICAgIUFycmF5LmlzQXJyYXkoYXJncykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXkgb2YgYXJyYXlzOyBnb3QgJXMuICcgKyAnRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIHBhcmFtZXRlcnMgaW4gYW4gYXJyYXk/JywgQ09NTUFORF9TUExJQ0UsIHNwZWNbQ09NTUFORF9TUExJQ0VdKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBuZXh0VmFsdWUuc3BsaWNlLmFwcGx5KG5leHRWYWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX0FQUExZKSkge1xuICAgICEodHlwZW9mIHNwZWNbQ09NTUFORF9BUFBMWV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZSgpOiBleHBlY3RlZCBzcGVjIG9mICVzIHRvIGJlIGEgZnVuY3Rpb247IGdvdCAlcy4nLCBDT01NQU5EX0FQUExZLCBzcGVjW0NPTU1BTkRfQVBQTFldKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgbmV4dFZhbHVlID0gc3BlY1tDT01NQU5EX0FQUExZXShuZXh0VmFsdWUpO1xuICB9XG5cbiAgZm9yICh2YXIgayBpbiBzcGVjKSB7XG4gICAgaWYgKCEoQUxMX0NPTU1BTkRTX1NFVC5oYXNPd25Qcm9wZXJ0eShrKSAmJiBBTExfQ09NTUFORFNfU0VUW2tdKSkge1xuICAgICAgbmV4dFZhbHVlW2tdID0gdXBkYXRlKHZhbHVlW2tdLCBzcGVjW2tdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV4dFZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwZGF0ZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvdXBkYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFeGVjdXRpb25FbnZpcm9ubWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9+L2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXG4gKiogbW9kdWxlIGlkID0gNTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnZhcmlhbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9+L2ZianMvbGliL2ludmFyaWFudC5qc1xuICoqIG1vZHVsZSBpZCA9IDUxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5T2ZcbiAqL1xuXG4vKipcbiAqIEFsbG93cyBleHRyYWN0aW9uIG9mIGEgbWluaWZpZWQga2V5LiBMZXQncyB0aGUgYnVpbGQgc3lzdGVtIG1pbmlmeSBrZXlzXG4gKiB3aXRob3V0IGxvc2luZyB0aGUgYWJpbGl0eSB0byBkeW5hbWljYWxseSB1c2Uga2V5IHN0cmluZ3MgYXMgdmFsdWVzXG4gKiB0aGVtc2VsdmVzLiBQYXNzIGluIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlIGtleS92YWwgcGFpciBhbmQgaXQgd2lsbCByZXR1cm5cbiAqIHlvdSB0aGUgc3RyaW5nIGtleSBvZiB0aGF0IHNpbmdsZSByZWNvcmQuIFN1cHBvc2UgeW91IHdhbnQgdG8gZ3JhYiB0aGVcbiAqIHZhbHVlIGZvciBhIGtleSAnY2xhc3NOYW1lJyBpbnNpZGUgb2YgYW4gb2JqZWN0LiBLZXkvdmFsIG1pbmlmaWNhdGlvbiBtYXlcbiAqIGhhdmUgYWxpYXNlZCB0aGF0IGtleSB0byBiZSAneGExMicuIGtleU9mKHtjbGFzc05hbWU6IG51bGx9KSB3aWxsIHJldHVyblxuICogJ3hhMTInIGluIHRoYXQgY2FzZS4gUmVzb2x2ZSBrZXlzIHlvdSB3YW50IHRvIHVzZSBvbmNlIGF0IHN0YXJ0dXAgdGltZSwgdGhlblxuICogcmV1c2UgdGhvc2UgcmVzb2x1dGlvbnMuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIga2V5T2YgPSBmdW5jdGlvbiAob25lS2V5T2JqKSB7XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIG9uZUtleU9iaikge1xuICAgIGlmICghb25lS2V5T2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlPZjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9+L2ZianMvbGliL2tleU9mLmpzXG4gKiogbW9kdWxlIGlkID0gNTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbnZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdG1lbW9pemUgPSBmdW5jdGlvbihmbikge1xyXG5cdFx0dmFyIG1lbW87XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdH07XHJcblx0fSxcclxuXHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHR9KSxcclxuXHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdH0pLFxyXG5cdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wID0gW107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xyXG5cclxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XHJcblxyXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xyXG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHR9XHJcblx0XHRpZihuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcclxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHR2YXIgc3R5bGVzID0gW107XHJcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XHJcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xyXG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XHJcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRpZighbmV3U3R5bGVzW2lkXSlcclxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xyXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRpZighbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcclxuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xyXG5cdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AucHVzaChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XHJcblx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdGlmKGlkeCA+PSAwKSB7XHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcblx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmtFbGVtZW50KTtcclxuXHRyZXR1cm4gbGlua0VsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cclxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcclxuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHR9IGVsc2UgaWYob2JqLnNvdXJjZU1hcCAmJlxyXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRpZihzdHlsZUVsZW1lbnQuaHJlZilcclxuXHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZShvYmopO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcclxuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xyXG5cdH07XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cclxuXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xyXG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGVFbGVtZW50LCBvYmopIHtcclxuXHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XHJcblxyXG5cdGlmKG1lZGlhKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0fVxyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHR9IGVsc2Uge1xyXG5cdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxpbmsobGlua0VsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcclxuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHJcblx0aWYoc291cmNlTWFwKSB7XHJcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxyXG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xyXG5cdH1cclxuXHJcblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XHJcblxyXG5cdHZhciBvbGRTcmMgPSBsaW5rRWxlbWVudC5ocmVmO1xyXG5cclxuXHRsaW5rRWxlbWVudC5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHJcblx0aWYob2xkU3JjKVxyXG5cdFx0VVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcbiAqKiBtb2R1bGUgaWQgPSA1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL2luZGV4LmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5jc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JjLXN3aXRjaC9hc3NldHMvaW5kZXguY3NzXG4gKiogbW9kdWxlIGlkID0gNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcImRlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdFwiKTsgfTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvYnVpbGRpbi9hbWQtZGVmaW5lLmpzXG4gKiogbW9kdWxlIGlkID0gNTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbiAqKiBtb2R1bGUgaWQgPSA1NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==